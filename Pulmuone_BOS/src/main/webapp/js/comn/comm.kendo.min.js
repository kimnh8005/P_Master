// ------------------------------------ KENDO TREE_VIEW VARIABLE ------------------------------------
var INIT_EXPAND_NODE_ARRAY = [];
var TREE_EXPAND_NODE_ARRAY = [];
var kendoWindowMenu;
var XHR_LIST = {};
var XHR_INDEX = 0;
// ------------------------------------ KENDO DUMMY VARIABLE ------------------------------------

(function($){
    $.fn.extend({
        /**
         * Grid 초기화 및 검색결과가 없을 경우
         */
        setNoRecords: function( messages ){
            return this.each( function() {

                var $obj      = $(this);
                var options   = $obj.cKendoGrid().options;

                if( $obj.cKendoGrid().options.fbMessage == 'none' ) return false;

                var columnCnt = 0;

                if( options.scrollable ){
                    columnCnt = $obj.find('div.k-grid-content colgroup > col').length;
                }else{
                    columnCnt = $obj.find('colgroup > col').length;
                }

                if( options.noRecordMsg == undefined && messages == undefined ){
                    //messages = '검색결과가 없습니다.';
                    messages = fnGetLangData({key : '5965', nullMsg : '조회하시고자 하는 검색조건을 선택후 검색해주세요' });
                }else if( options.noRecordMsg != '' && options.noRecordMsg != undefined){
                    messages = options.noRecordMsg;
                }

                var noRecordHtml  = '<tr>';
                    noRecordHtml += '   <td colspan="'+ columnCnt +'" style="height:50px;text-align:center">';
                    /*
                    noRecordHtml += '       <div class="k-grid-norecords" style="margin-top: 80px;">';
                    noRecordHtml += '           <div class="k-grid-norecords-template" style="margin:0 auto;position:static;">'+ messages +'</div>';
                    noRecordHtml += '       </div>';
                    */
                    noRecordHtml += messages;
                    noRecordHtml += '   </td>';
                    noRecordHtml += '</tr>';

                    // 틀고정 관련 수정 - 김승우M (2020.10.29)
                    if( $obj.cKendoGrid().dataSource._view.length == 0 ){

                      if( options.scrollable ){

                          if($obj.find(".k-grid-content-locked").length > 0) {

                              $obj.find(".k-grid-content-locked tbody").empty();
                              $obj.find('.k-grid-content tbody').empty();

                              $obj.find(".k-grid-content-locked").css("visibility","hidden");
                              $obj.find('.k-grid-content').css("visibility","hidden");
                              $obj.find('.k-pager-wrap').css("visibility","hidden");
                              $obj.find(".k-pager-sizes").css("visibility","visible")


                              // $("#norecords-message").length == 0 ? $("<div id='norecords-message'>" + messages + "</div>").insertAfter(".k-grid-header") : "";
                              var $gridHeader = $obj.find(".k-grid-header");
                              $obj.find("#norecords-message").length == 0 ? $("<div id='norecords-message'>" + messages + "</div>").insertAfter($gridHeader) : "";
                          } else {
                              $obj.find('.k-grid-content tbody').empty();
                              $obj.find('.k-grid-content tbody').append( noRecordHtml );
                          }

                      } else {
                          $obj.find('tbody').empty();
                          $obj.find('tbody').append( noRecordHtml );
                      }

                  } else {
                      if( $obj.find("#norecords-message").length > 0 ) {
                          $obj.find("#norecords-message").remove();
                      }

                      if( options.scrollable ){

                          if($obj.find(".k-grid-content-locked")) {
                              $obj.find(".k-grid-content-locked").css("visibility","visible");
                              $obj.find('.k-grid-content').css("visibility","visible");
                              $obj.find('.k-pager-wrap').css("visibility","visible");
                          }
                      }
                  }
            });
        }, //--------------------------------------------------- END setNoRecords
        /**
         * 그리드 HeadColumn 설정
         */
        setHeaderStyle: function(){
            return this.each(function() {
                var obj     = $(this).data('kendoGrid');
                var thead   = obj.thead;
                var columns = obj.columns;

                $('tr > .k-header').css( { 'text-align': 'center', 'vertical-align': 'middle' } );
            });
        }, //--------------------------------------------------- END setHeaderStyle
        /**
         * 그리드 HeadColumn 설정
         */
        setHeaderTitle: function(){
            return this.each(function() {
                var obj     = $(this).data('kendoGrid');
                var thead   = obj.thead;
                var columns = obj.columns;

            });
        }, //--------------------------------------------------- END setHeaderStyle

        /**
         * 그리드 데이터 초기화
         */
        gridClear: function(){
            return this.each( function() {
                var $obj = $(this);
                var gDs  = $obj.cKendoGrid().dataSource;

                //$obj.cKendoGrid().clearSelection(); // 선택 해제.
                gDs.data([]);
                $obj.setNoRecords();
            });
        }, //--------------------------------------------------- END gridClear
        /**
         * 조회결과가 있을 경우 첫번째 줄 자동선택 후 등록한 함수 호출
         * firstRowAutoEvent -> frAtEv
         */
        frAtEvent: function( fnCallback ){
            return this.each(function() {
                var $obj = $(this);
                var g    = $obj.cKendoGrid();

                if( $obj.cKendoGrid().dataSource._view.length > 0 ){

                    g.select($obj.find('tbody > tr:first') );

                    if( fnCallback && typeof(fnCallback) === 'function' ){
                        var callbacks = $.Callbacks();
                            callbacks.add(fnCallback);
                            callbacks.fire(fnCallback);
                    }
                }
            });
        }, //--------------------------------------------------- END frAtEvent
        /**
         * setDynamicHeight
         * 그리드의 높이를 부모 Element의 크기에 맞도록 변경.(영역에 100% 표시.)
         */
        setDynHeight: function(){
            return this.each(function() {
                var $obj = $(this),
                dataArea = $obj.find('div.k-grid-content'),
                otherElements = $obj.parent().children(':not(#'+$obj.attr('id')+', script)'),
                otherElementsHeight = 0,
                gridOtherElements = $obj.children(':not(div.k-grid-content, script, div.w_grid_context)'),
                gridOtherElementsHeight = 0;

                otherElements.each(function(idx){
                    otherElementsHeight += $(this).outerHeight(true);
                });
                var gridHeight = $obj.parent().innerHeight() - otherElementsHeight;

                gridOtherElements.each(function(idx){
                    gridOtherElementsHeight += $(this).outerHeight(true);
                });
                dataArea.height(gridHeight - (gridOtherElementsHeight+(dataArea.outerHeight(true)-dataArea.height()) ) );
            });
        }, //--------------------------------------------------- END frAtEvent

        /**
         * KendoGrid 초기 호출 함수
         * 이미 설정된 DataSource 와 Option 정보를 가지고 그리드를 초기화 및 설정을 해준다.
         * 이 함수를 호출하면 빈 그리드가 화면에 출력된다.
         *
         * @param options : Kendo UI Grid option
         */
        initializeKendoGrid: function( options ){
            return this.each(function() {

                var $obj = $(this);
                var opt  = options;

                //KendoGrid Title 다국어 처리  fnKendoGridSetTitle 호출시 gridOption의 columns 를 넘겨야한다.
                fnKendoGridSetTitle(opt.columns);

                $.extend(options, {
                      selectable  : options.selectable == undefined ? "rows" : options.selectable   // grid 선택 구분 (기본값 : false) [row / cell / multiple]
                    , resizable   : true    // 컬럼 사이즈 조절 (기본값 : false) [그룹 컬럼 헤더 사용시 false.]
                    , navigatable : true    // 키보드(단축키) 사용.
                    , scrollable  : options.scrollable == undefined ? false : options.scrollable
                });

                if( options.autoBind ){
                    $.extend(options, {
                        autoBind: true      // dataSource 자동 바인딩
                    });
                }else{
                    $.extend(options, {
                        autoBind: false     // dataSource 자동 바인딩
                    });
                }

                if( options.editable ){
                    $.extend(options, {
                        edit: fnKendoEdit
                        //, addRowOnEnter : true
                    });
                }

                if( options.height ) {
                    $.extend(options, {
                        height : options.height
                    })
                }

                // 그리드 옵션 이벤트 추가등록
                $.extend(options, {
                    dataBound: function(e){
                        try{
                            var $gObj = e.sender.element;
                            var messages = "";

                            // 데이타 바인딩 후 데이타가 1건 이상인 경우 첫번째 Row를 선택.
                            if(options.bindStatus == "rebind"){
                                if( opt.frAtEvent ){
                                    $gObj.frAtEvent(opt.frAtEvent);
                                }
                                messages = "데이터가 존재하지 않습니다.";
                            }
                            $gObj.setNoRecords(messages);

                            //그리드 행 합치기
                            //columns
                            $.each(options.columns, function (i, item) {
                                if(item.rowspan === true) {
                                    $obj.find("table").rowspan(i);
                                }
                            });

                        }catch(e){
                        }
                    },dataBinding: function(e){
                        try {

                            // 데이타 바인딩 후 데이타가 1건 이상인 경우 첫번째 Row를 선택.
                            $.extend(options,{
                                bindStatus : e.action
                            });
                        } catch (ex) {
                        }
                    }
                },{});

                // Kendo Grid 설정.
                $obj.kendoGrid(opt);

                // Grid 초기화 및 검색결과 메세지 설정.
                $obj.setNoRecords();

                // Grid Column Style 설정.
                $obj.setHeaderStyle();

                // Toolbar 우측 설정.
                $obj.find('div.k-grid-toolbar').css({'text-align' : 'right'});


                //----------------------------------- kendo.data.DataSource 이벤트 등록 -------------
                $obj.cKendoGrid().dataSource.bind('requestEnd', function(e){
                    var response = e.response;
                    if(response){
                        if(response['code']){
                            if(!fnDefCallback(response, {url : opt.dataSource.transport.options.read.url})){
                                return;
                            }
                        }else{
                        }
                    }
                });

                if( options.requestStart ) {
                	$obj.cKendoGrid().dataSource.bind('requestStart', opt.requestStart);
                }
            });
        }, //--------------------------------------------------- END initializeKendoGrid
        /**
         * KendoGrid Data 반환
         * 그리드 반환.
         */
        cKendoGrid: function(){
            return $(this).data('kendoGrid');
        } //--------------------------------------------------- END cKendoGrid

    });
})(jQuery);

/**
 * 그리드 데이터소스를 설정하고 리턴한다.
 * @param opt
 *
 * opt.url : 그리드에 바인딩할 데이터를 리턴해주는 서버주소를 입력한다.
 * opt.data : 서버로부터 받은 json 키를 입력한다.
 *            기본값은 rows 이고 특이사항 없으면 변경하지 않는다.(생략가능)
 */
function fnGetDataSource( opt ){
	var xhrIndex = XHR_INDEX++;
    return new kendo.data.DataSource({
        transport: {
            read : {
                async: opt.async === false ? false : true, // true: 비동기 / false 동기
                dataType : 'json',
                type     : 'POST',
                url      : opt.url,
                beforeSend: function(req) {
                	XHR_LIST[xhrIndex] = req;
                    req.setRequestHeader('authMenuID', CLICKED_MENU_ID);
                }
            }
        },
        schema: {
        	data  : function(response) {
    			return response.data.rows
            },error: function(e) {
            	delete XHR_LIST[xhrIndex];
            	console.log("error event handler", e);
	        }
        },requestEnd : opt.requestEnd ===undefined ? '' : opt.requestEnd
   });
}

/**
 * 페이징 그리드 데이터소스를 설정하고 리턴한다.
 * @param columns
 *
 * columns : 그리드 옵션 columns넘긴다.
 */
function fnKendoGridSetTitle( columns ){

    for(var i = 0 ; i< columns.length ;i ++){
        if (columns[i].title === undefined) {
        }else if (typeof columns[i].title !== "string") {
            columns[i].title = fnGetLangData(columns[i].title);
        }
        if(columns[i].columns){
            fnKendoGridSetTitle( columns[i].columns );
        }
    }
}
/**
 * 페이징 그리드 데이터소스를 설정하고 리턴한다.
 * @param opt
 *
 * opt.url : 그리드에 바인딩할 데이터를 리턴해주는 서버주소를 입력한다.
 * opt.data : 서버로부터 받은 json 키를 입력한다.
 *            기본값은 rows 이고 특이사항 없으면 변경하지 않는다.(생략가능)
 * opt.total : 서버로부터 받은 total 키를 입력한다.
 *             기본값은 total 이고 특이사항 없으면 변경하지 않는다.(생략가능)
 * opt.pageSize : page size 수치값을 입력한다.
 */
function fnGetPagingDataSource( opt ){
	var xhrIndex = XHR_INDEX++;
    return new kendo.data.DataSource({
        transport: {
            read : {
                dataType : 'json',
                type     : 'POST',
                url      : opt.url,
                beforeSend: function(req) {
                	XHR_LIST[xhrIndex] = req;
                    req.setRequestHeader('authMenuID', CLICKED_MENU_ID);
                }
            },
            parameterMap: function(data) {
                if(opt.param){
                    data =$.extend({}, data, opt.param);
                }
              return data;
            }
        },
        filter  : opt.filter  == undefined ? false  : opt.filter,
        pageSize       : opt.pageSize,
        serverPaging   : true,
        serverFiltering: true,
        schema: {
        	data  : function(response) {
        		delete XHR_LIST[xhrIndex];
    			return response.data.rows
        	}
            , total : function(response) {
    			return response.data.total
            }
            ,error: function(e) {
            	delete XHR_LIST[xhrIndex];
            	console.log("error event handler", e);
	        }
        }
        ,requestEnd : opt.requestEnd ===undefined ? '' : opt.requestEnd
   });
}

/**
 * 페이징 그리드 데이터소스를 설정하고 리턴한다.
 * @param opt
 *
 * opt.url : 그리드에 바인딩할 데이터를 리턴해주는 서버주소를 입력한다.
 * opt.data : 서버로부터 받은 json 키를 입력한다.
 *            기본값은 rows 이고 특이사항 없으면 변경하지 않는다.(생략가능)
 * opt.total : 서버로부터 받은 total 키를 입력한다.
 *             기본값은 total 이고 특이사항 없으면 변경하지 않는다.(생략가능)
 * opt.pageSize : page size 수치값을 입력한다.
 */
function fnGetEditPagingDataSource( opt ){
	var xhrIndex = XHR_INDEX++;

    return new kendo.data.DataSource({
        transport: {
        	read : {
                dataType : 'json',
                type     : 'POST',
                url      : opt.url,
                beforeSend: function(req) {
                	XHR_LIST[xhrIndex] = req;
                    req.setRequestHeader('authMenuID', CLICKED_MENU_ID);
                }
            }
        },
        batch  : true, //그리드 edit 모드일 경우 추가되는 옵션이고 명시를 하지 않으면 false이다.
        schema: {
            data  : function(response) {
    			return response.data.rows
            }
            , total : function(response) {
    			return response.data.total
            }
            , model : {
                id     : opt.model_id,
                fields : opt.model_fields
           }
            ,error: function(e) {
	           	delete XHR_LIST[xhrIndex];
	        	console.log("error event handler", e);
	        }
        },
        parameterMap: function(options, operation) {
            if (operation !== 'read' && options.models){
                return {
                    models: kendo.stringify(options.models)
                };
            }
        },
        requestEnd : opt.requestEnd ===undefined ? '' : opt.requestEnd ,
        filter  : opt.filter  == undefined ? false  : opt.filter,
        pageSize       : opt.pageSize,
        serverPaging   : true,
        serverFiltering: true
        /*
        ,
        ,parameterMap: function(options, operation) {
            if (operation !== 'read' && options.models){
                return {
                    models: kendo.stringify(options.models)
                };
            }
        },
        */
   });

}

/**
 * 에디터 그리드 데이터소스를 설정하고 리턴한다.
 * http://demos.telerik.com/kendo-ui/grid/editing
 * @param opt
 *
 * opt.url : 그리드에 바인딩할 데이터를 리턴해주는 서버주소를 입력한다.
 * opt.data : 서버로부터 받은 json 키를 입력한다.
 *            기본값은 rows 이고 특이사항 없으면 변경하지 않는다.(생략가능)
 * opt.model_id : 모델 아이디를 입력한다.
 * opt.model_fields : 현재 테이블 행에 대한 구조, 유효성, 기본값등을 설정한다.
 *
 * 예제))
 *  ds = fnGetEditDataSource({
 *           url          : '/biz/ss/config/envConfList.json'
 *          ,model_id     : 'CONFIG_SEQ'
 *          ,model_fields : {
 *              CONFIG_GRP   : { editable: true , type: 'string', validation: { required: true  } },
 *              CONFIG_KEY   : { editable: true , type: 'string', validation: { required: true  } },
 *              CONFIG_NAME  : { editable: true , type: 'string', validation: { required: true  } },
 *              CONFIG_VALUE : { editable: true , type: 'string', validation: { required: false } },
 *              USE_YN       : { editable: true , type: 'string', validation: { required: true  }  , defaultValue : 'Y' }
 *          }
 *  });
 */
function fnGetEditDataSource( opt ){
	var xhrIndex = XHR_INDEX++;
    return new kendo.data.DataSource({
        transport: {
        	read : {
                dataType : 'json',
                type     : 'POST',
                url      : opt.url,
                beforeSend: function(req) {
                	XHR_LIST[xhrIndex] = req;
                    req.setRequestHeader('authMenuID', CLICKED_MENU_ID);
                }
            }
        },
        batch  : true, //그리드 edit 모드일 경우 추가되는 옵션이고 명시를 하지 않으면 false이다.
        schema: {
        	data  : function(response) {
    			return response.data.rows
            },
            model : {
                id     : opt.model_id,
                fields : opt.model_fields
           }
            ,error: function(e) {
            	delete XHR_LIST[xhrIndex];
            	console.log("error event handler", e);
	        }
        },
        parameterMap: function(options, operation) {
            if (operation !== 'read' && options.models){
                return {
                    models: kendo.stringify(options.models)
                };
            }
        },
        requestEnd : opt.requestEnd ===undefined ? '' : opt.requestEnd
   });
}

/**
 * 그룹 그리드 데이터소스를 설정하고 리턴한다.
 * @param opt
 *
 * opt.url : 그리드에 바인딩할 데이터를 리턴해주는 서버주소를 입력한다.
 * opt.data : 서버로부터 받은 json 키를 입력한다.
 *            기본값은 rows 이고 특이사항 없으면 변경하지 않는다.(생략가능)
 * opt.model_fields : 현재 테이블 행에 대한 구조, 유효성, 기본값등을 설정한다.
 * opt.group_fields : 그룹을 설정한다.
 * opt.aggregate_fields : 집계를 설정한다.
 */
function fnGetGroupDataSource( opt ){
	var xhrIndex = XHR_INDEX++;
    return new kendo.data.DataSource({
        transport: {
        	read : {
                dataType : 'json',
                type     : 'POST',
                url      : opt.url,
                beforeSend: function(req) {
                	XHR_LIST[xhrIndex] = req;
                    req.setRequestHeader('authMenuID', CLICKED_MENU_ID);
                }
            }
        },
        schema: {
            data  : function(response) {
    			return response.data.rows
            }
            , model : {
                fields : opt.model_fields
           }
            ,error: function(e) {
            	delete XHR_LIST[xhrIndex];
            	console.log("error event handler", e);
	        }
        },
        parameterMap: function(options, operation) {
            if (operation !== 'read' && options.models){
                return {
                    models: kendo.stringify(options.models)
                };
            }
        },
        requestEnd : opt.requestEnd ===undefined ? '' : opt.requestEnd,
        group: opt.group_fields,
        aggregate: opt.aggregate_fields
   });
}

/**
 * 에디트 그리드에서 변경사항을 추출해준다.
 * @param tgGrid : 대상 그리드 id
 * @param operation : insert or update or delete
 *
 * ex))
 * fnEGridDsExtract('memberGrid', 'insert'); // 에디트 그리드 신규입력 목록
 * fnEGridDsExtract('memberGrid', 'update'); // 에디트 그리드 수정 목록
 * fnEGridDsExtract('memberGrid', 'delete'); // 에디트 그리드 삭제 목록
 *
 */
function fnEGridDsExtract( tgGrid, operation ){

    var rtnInsertRec = [];
    var rtnUpdateRec = [];
    var rtnDeleteRec = [];

    try{

        var grid  = $('#'+tgGrid).data('kendoGrid');
        var cData = grid.dataSource.data();
        // TO_DO : Array에 저장하는 OBJECT가 많아지면 분기처리 고려..
        for (var i = 0; i < cData.length; i++) {
            if(cData[i].isNew()) {
                rtnInsertRec.push(cData[i].toJSON());
            }else if ( cData[i].dirty) {
                rtnUpdateRec.push(cData[i].toJSON());
            }
        }

        if (grid.dataSource._destroyed != null) {
	        for (var i = 0; i < grid.dataSource._destroyed.length; i++) {
	            rtnDeleteRec.push(grid.dataSource._destroyed[i].toJSON());
	        }
        }

        if( operation == 'insert' ){
            return rtnInsertRec;
        }else if( operation == 'update' ){
            return rtnUpdateRec;
        }else if( operation == 'delete' ){
            return rtnDeleteRec;
        }

    }catch(e){
    }finally{
        delete rtnInsertRec;
        delete rtnUpdateRec;
        delete rtnDeleteRec;
    }

}

/**
 *  GRID 에서 데이터를 추출해준다.
 */
function fnGridDsExtract( tgGrid ){

    var rtnRec = [];
    try{

        var grid  = $('#'+tgGrid).data('kendoGrid');
        var cData = grid.dataSource.data();

        // TO_DO : Array에 저장하는 OBJECT가 많아지면 분기처리 고려..
        for (var i = 0; i < cData.length; i++) {
            rtnRec.push(cData[i].toJSON());
        }

        return rtnRec;

    }catch(e){
    }finally{
        delete rtnRec;
    }

}

/**
 *
 */
function fnKendoEdit(e){

    var kendoSpclKeys = [kendo.keys.UP, kendo.keys.DOWN, kendo.keys.ENTER, kendo.keys.TAB];
    var editForm = e.container.find('.k-input').focus();
    var eGrid    = $(e.sender.table).parents('.k-grid').cKendoGrid();

    if (eGrid.options.forbizEditCustm && typeof(eGrid.options.forbizEditCustm) === 'function') {
        var callbacks = $.Callbacks();
            callbacks.add(eGrid.options.forbizEditCustm(e));
            callbacks.fire();
    }

    // 마우스 클릭시 미수정 컬럼이면 수정방지
    if( e.container.hasClass('forbiz-cell-readonly') && !e.model.isNew() ){
        $(this).trigger('focusout');
        eGrid.closeCell($(this));       // editmode : incell
        eGrid.closeCell($(this).closest('td'));

        return false;
    }

    editForm.keydown( function(e){
        if ($.inArray(e.keyCode, kendoSpclKeys) > -1) {

            e.stopPropagation();

            if (eGrid.editable && !eGrid.editable.validatable.validate()) {
                return false;
            }

            var selectedField = $(this).data('bind').split(':')[1];
            var dataItem = eGrid.dataItem($(this).closest('tr'));
                dataItem.set(selectedField, $(this).val());
            fnKendoEditKeyEvent($(this), e);
        }
    });
} // ------------------------------------------------------------------------- End fnKendoEdit

/**
 *
 */
function fnKendoEditKeyEvent($this, event){
    var eGrid = $this.closest('.k-grid').cKendoGrid();
    var obj   = $this.closest('.k-grid');
    var role  = $this.closest('td').find('input[data-role]').data('role');


    if(event.which === 9 || event.which === 13){        // enter / tab
        if(role === 'numerictextbox' || role === 'dummy' || role === 'dummy'){
        }

        var skip        = false;
        var $thisRow    = $this.closest('tr');
        var $targetRow  = '';
        var $targetCell = $this.closest('td').nextAll(':visible:not(.forbiz-cell-readonly):first');

        /*
         *   IF 수정할 next td 가 있을 경우
         *     current tr, next td
         *   IF 수정할 next td 가 없을 경우
         *     IF 수정할 tr 이 있을 경우
         *       next tr, next tr > 첫번째 td
         *     IF 수정할 tr 이 없을 경우
         *       skip?? 어떤 행동??
         */
        if( $targetCell.length > 0 ){
            $targetRow = $thisRow;
            $targetCell = $targetCell;
        }else{
            if( $this.closest('tr').next().index() > -1 ){
                $targetRow = $this.closest('tr').next();
                $targetCell = $targetRow.find('td:visible:not(.forbiz-cell-readonly):not(this > .w_grid_checkbox):first');
            }else{
                skip = true;
            }
        }

        if( !skip ){
            // 선택 해제.
            $this.trigger( 'focusout' );
            //eGrid.clearSelection();
            eGrid.closeCell( $this );
            eGrid.closeCell( $this.closest('td') );
            eGrid.select( $targetRow );
            setTimeout( function(){
                eGrid.editCell($targetCell);
            }, 50);
        }

    }

    return true;

} // ------------------------------------------------------------------------- End fnKendoEditKeyEvent

/**
 * kendoDatePicker 생성 및 이벤트 처리
 * @param {Object} opt : kendo 설정 옵션
 *
 * opt.id     : 타켓 INPUT ID
 * opt.format : 날짜포멧
 * opt.defVal : 초기 바인딩 데이터 (생략가능)
 * opt.change : 날짜 선택 후 호출되는 함수로 기타 로직이 필요하면 여기에다 코딩한다.
 * opt.defType : "oneWeek"설정 시 기본 설정 값이 일주일로 선택된다.(생략 시 오늘 버튼이 기본적으로 선택된다.)
 * opt.defType : "yesterday"설정 시 기본 설정 값이 어제로 선택된다.(생략 시 오늘 버튼이 기본적으로 선택된다.)
 * opt.defType : "oneMonth"설정 시 기본 설정 값이 1개월로 선택된다.(생략 시 오늘 버튼이 기본적으로 선택된다.)
 * opt.defType : "threeMonth"설정 시 기본 설정 값이 1개월로 선택된다.(생략 시 오늘 버튼이 기본적으로 선택된다.)
 * opt.nextDate :
 */
function fnKendoDatePicker( opt ){
    $('#' + opt.id).kendoDatePicker({
        format: opt.format ? opt.format : "yyyy-MM-dd",
        value : opt.defVal,
        change: opt.change,
        disableDates : opt.disableDates,
        min : (opt.min != undefined) ? opt.min : new Date(1900, 0, 1),
        max : (opt.max != undefined) ? opt.max : new Date(2999,12,31), // 최대 설정 기간을 2999-12-31로 설정
        // popup: {
        //     appendTo: $('#' + opt.id).wrap('<span class="fb__datePicker">').parent()
        // }
    });

    const blurForm = $(".notUseBlur");

    if(blurForm.length === 0) {
        $('#' + opt.id).blur(function(e){
            var v = fnFormatDate( $(this).val(), opt.format );
            $(this).val( v );
        });
    }

    // datePicker readonly 처리
    // $("#" + opt.id).attr("readonly", true);


    if(opt.btnStyle){
        if(!opt.btnStartId){
            alert("btnStyle선언시 btnStartId 필수");
        }
        if(!opt.btnEndId){
            alert("btnStyle선언시 btnEndId 필수");
        }
        var minusCheck = false;
        var oneWeekActive = "";
        var yesterdayActive = "";
        var oneMonthActive = "";
        var threeMonthActive = "";

        if(opt.defVal != null && opt.defType == 'oneWeek'){
    		$('#'+opt.btnStartId).attr("data-default","startDate");
    		$('#'+opt.btnEndId).attr("data-default","endDate");

            oneWeekActive = "fb-btn-active='true'";
    	}else if(opt.defVal != null && opt.defType == 'yesterday'){
    		$('#'+opt.btnStartId).attr("data-default","startDate");
    		$('#'+opt.btnEndId).attr("data-default","endDate");

    		yesterdayActive = "fb-btn-active='true'";
    	}else if(opt.defVal != null && opt.defType == 'oneMonth'){
    		$('#'+opt.btnStartId).attr("data-default","startDate");
    		$('#'+opt.btnEndId).attr("data-default","endDate");

    		oneMonthActive = "fb-btn-active='true'";
    	}else if(opt.defVal != null && opt.defType == 'threeMonth'){
    		$('#'+opt.btnStartId).attr("data-default","startDate");
    		$('#'+opt.btnEndId).attr("data-default","endDate");

    		threeMonthActive = "fb-btn-active='true'";
    	}

        // opt.nextDate === true이면 startDate가 오늘 날짜가 되고 endDate가 오늘 날짜 이후의 날짜가된다.
        if(opt.nextDate){
            minusCheck = true;
            $('#' + opt.id).parent().parent().parent().append('<div class="date-controller">'
                                        +'<button data-id="fnDateBtn1" type="button" class="set-btn-type6" msg-key="4810">오늘</button>'
                                        +'<button data-id="fnDateBtn3" type="button" class="set-btn-type6" msg-key="4812 "' + oneWeekActive + '>1주일</button>'
                                        +'<button data-id="fnDateBtn4" type="button" class="set-btn-type6" msg-key="4730">15일</button>'
                                        +'<button data-id="fnDateBtn5" type="button" class="set-btn-type6" msg-key="4813"' + oneMonthActive + '>1개월</button>'
                                        +'<button data-id="fnDateBtn6" type="button" class="set-btn-type6" msg-key="4814">2개월</button>'
                                        +'<button data-id="fnDateBtn7" type="button" class="set-btn-type6" msg-key="4815"' + threeMonthActive + '>3개월</button>'
                                        +'<button data-id="fnDateBtnC" type="button" class="set-btn-type6-del" msg-key="4219"> 초기화</button>'
                                        +'</div>'
            );
        } else {
             $('#' + opt.id).parent().parent().parent().append('<div class="date-controller">'
                                        +'<button data-id="fnDateBtn1" type="button" class="set-btn-type6" msg-key="4810">오늘</button>'
                                        +'<button data-id="fnDateBtn2" type="button" class="set-btn-type6" msg-key="4811"' + yesterdayActive + '>어제</button>'
                                        +'<button data-id="fnDateBtn3" type="button" class="set-btn-type6" msg-key="4812 "' + oneWeekActive + '>1주일</button>'
                                        +'<button data-id="fnDateBtn4" type="button" class="set-btn-type6" msg-key="4730">15일</button>'
                                        +'<button data-id="fnDateBtn5" type="button" class="set-btn-type6" msg-key="4813"' + oneMonthActive + '>1개월</button>'
                                        +'<button data-id="fnDateBtn6" type="button" class="set-btn-type6" msg-key="4814">2개월</button>'
                                        +'<button data-id="fnDateBtn7" type="button" class="set-btn-type6" msg-key="4815"' + threeMonthActive + '>3개월</button>'
                                        +'<button data-id="fnDateBtnC" type="button" class="set-btn-type6-del" msg-key="4219"> 초기화</button>'
                                        +'</div>'
            );
        }

        //$('#' + opt.id).parent().parent().parent().find('.fnDateBtn').mousedown(function(e){
        $('#' + opt.id).parent().parent().parent().find('button').mousedown(function(e){
            var $dateContainer = $(this).parent().parent().parent();
            var parentEl = this.parentElement;
        	var buttonElChildren = parentEl.querySelectorAll("button");
            var thisId = $(this).data('id');
            var optD;
            var optM;

            switch(thisId){
                case "fnDateBtn1" : optM ='d'; optD = 0 ; break;
                case "fnDateBtn2" : optM ='d'; optD = 1 ; break;
                case "fnDateBtn3" : optM ='d'; optD = 6 ; break;
                case "fnDateBtn4" : optM ='d'; optD = 14; break;
                case "fnDateBtn5" : optM ='m'; optD = 1 ; break;
                case "fnDateBtn6" : optM ='m'; optD = 2 ; break;
                case "fnDateBtn7" : optM ='m'; optD = 3 ; break;
                case "fnDateBtnC" : optM ='c'; optD = 0 ; break;
            }

            // 버튼 fb-btn-active 초기화
            $(buttonElChildren).each(function() {
                $(this).attr("fb-btn-active", false);
            });

            // 선택한 버튼 fb-btn-active 처리
            if( thisId !== "fnDateBtnC" ) {
                $(this).attr("fb-btn-active", true);
            } else {
                // defType === "oneWeek"인 경우
                if( opt.defType === "oneWeek" ) {
                    $(this).parent().find("[data-id='fnDateBtn3']").attr("fb-btn-active", true);
                }else if(opt.defType === "yesterday" ) {
                	$(this).parent().find("[data-id='fnDateBtn2']").attr("fb-btn-active", true);
                }else if(opt.defType === "oneMonth" ) {
                	$(this).parent().find("[data-id='fnDateBtn5']").attr("fb-btn-active", true);
                }else if(opt.defType === "threeMonth" ) {
                	$(this).parent().find("[data-id='fnDateBtn7']").attr("fb-btn-active", true);
                }
            }

            var startDate;
            var endDate;
            var dateFormat = 'yyyy-MM-dd';

            // 오늘 기준 미래 날짜로
            if( minusCheck ) {

                startDate = fnGetToday();

                if( optM === "d" ) {
                    endDate = fnGetDayAdd(startDate, optD, dateFormat);
                } else if ( optM === "m" ) {
                    endDate = fnGetMonthAdd(startDate, optD, dateFormat);
                } else {
                    // defType === "onWeek"인 경우
                    if( opt.defType === "oneWeek" ) {
                        endDate = fnGetDayAdd(startDate, 6, dateFormat);
                    } else if(opt.defType === "yesterday"){ // defType === "yesterday"인 경우
                    	endDate = fnGetDayAdd(startDate, 1, dateFormat);
                    } else if(opt.defType === "oneMonth" ) { // defType === "oneMonth"인 경우
                    	endDate = fnGetMonthAdd(startDate, 1, dateFormat);
                    } else if(opt.defType === "threeMonth" ) { // defType === "threeMonth"인 경우
                    	endDate = fnGetMonthAdd(startDate, 3, dateFormat);
                    } else {
                        startDate = "";
                        endDate = "";
                    }

                    // timePicker 초기화
                    fbClearTimePicker($dateContainer);
                }

            } else {
                //오늘 기준 과거 날짜로
                endDate = fnGetToday();

                if( optM === "d" ) {
                    startDate = fnGetDayMinus(endDate, optD, dateFormat);
                } else if ( optM === "m" ) {
                    startDate = fnGetMonthMinus(endDate, optD, dateFormat);
                } else {
                    // defType === "onWeek"인 경우
                    if( opt.defType === "oneWeek" ) {
                        startDate = fnGetDayMinus(endDate, 6, dateFormat);
                    } else if(opt.defType === "yesterday" ) { // defType === "yesterday"인 경우
                    	startDate = fnGetDayMinus(endDate, 1, dateFormat);
                    } else if(opt.defType === "oneMonth" ) { // defType === "oneMonth"인 경우
                    	startDate = fnGetMonthAdd(endDate, -1, dateFormat);
                    } else if(opt.defType === "threeMonth" ) { // defType === "threeMonth"인 경우
                    	startDate = fnGetMonthAdd(endDate, -3, dateFormat);
                    } else {
                        startDate = "";
                        endDate = "";
                    }

                     // timePicker 초기화
                     fbClearTimePicker($dateContainer);
                }
            }

            var maxDate = new Date(2999,11,31);
            var minDate = new Date(1900,01,01);
            // // 타임피커 초기화
            $('#'+opt.btnStartId).data("kendoDatePicker").max(maxDate);
            $('#'+opt.btnEndId).data("kendoDatePicker").min(minDate);
            $('#'+opt.btnStartId).data("kendoDatePicker").value('');
            $('#'+opt.btnEndId).data("kendoDatePicker").value('');
            $('#'+opt.btnStartId).data("kendoDatePicker").value(startDate);
            $('#'+opt.btnEndId).data("kendoDatePicker").value(endDate);
            // $('#'+opt.btnStartId).data("kendoDatePicker").max(endDate);
            // $('#'+opt.btnEndId).data("kendoDatePicker").min(startDate);
        });

        $('.set-btn-type1').kendoButton();
    }
}

/**
 *
 * @param {string} id : id 셀렉터
 */
function fnGetDatePickerInstance(id) {
    return $("#" + id).data("kendoDatePicker");
}

/**
 * fnkendoDateTimePicker 생성 및 이벤트 처리
 * @param {Object} opt : kendo 설정 옵션
 *
 * opt.id     : 타켓 INPUT ID (필수)
 * opt.format : 날짜포멧 (생략가능) 기본 yyyy/MM/dd hh:mm tt
 * opt.interval : 분 단위   (생략가능) 기본 60
 * opt.defVal : 초기 바인딩 데이터 (생략가능)
 * opt.change : 날짜 선택 후 호출되는 함수로 기타 로직이 필요하면 여기에다 코딩한다. (생략가능)
 *
 * @return
 * $('#id').data('kendoDateTimePicker');
 */
function fnkendoDateTimePicker( opt ){
    if(opt.id === undefined || opt.id ==""){
        alter("id 필수입니다");
        return;
    }
    /*
    $('#' + opt.id).blur(function(e){
        //var v = fnFormatDate( $(this).val(), 'yyyy-MM-dd hh:mm' );
        //$(this).val( v );
    });
    */
    return  $('#' + opt.id).kendoDateTimePicker({
            format : opt.format == undefined ? 'yyyy-MM-dd hh:mm': opt.format,
            value : opt.defVal == undefined ? new Date() : opt.defVal,
            change: opt.change == undefined ? '' : opt.change,
            interval : opt.interval == undefined ? '60' : opt.interval
			, max : opt.max == undefined ? new Date(2999, 12, 31, 23, 59) : opt.max // 최대 설정 기간을 2999-12-31 23:59로 설정
			, interval : opt.interval == undefined ? 1 : opt.interval // 1분 단위로 설정
        }).data('kendoDateTimePicker');
}

/**
 * fnkendoTimePicker 생성 및 이벤트 처리
 * @param {Object} opt : kendo 설정 옵션
 *
 * opt.id     : 타켓 INPUT ID (필수)
 * opt.format : 시간포멧 (생략가능) 기본 hh:mm, 24시 설정하고 싶을 경우 HH:mm
 * opt.interval : 분 단위   (생략가능) 기본 30
 * opt.defVal : 초기 바인딩 데이터 (생략가능)
 * opt.change : 시간 선택 후 호출되는 함수로 기타 로직이 필요하면 여기에다 코딩한다. (생략가능)
 * opt.dateInput : 데이터 입력시 입력제한설정 여부. (생략가능) 기본 false
 *
 * @return
 * $('#id').data('kendoTimePicker');
 */
function fnkendoTimePicker( opt ){
    if(opt.id === undefined || opt.id ==""){
        alter("id 필수입니다");
        return;
    }
    return  $('#' + opt.id).kendoTimePicker({
            format : opt.format == undefined ? 'hh:mm': opt.format,
            value : opt.defVal == undefined ? new Date() : opt.defVal,
            change: opt.change == undefined ? '' : opt.change,
            interval : opt.interval == undefined ? '30' : opt.interval,
            dateInput : opt.dateInput == undefined ? false : opt.dateInput
        }).data('kendoTimePicker');
}

/**
 * fnKendoDropDownList 생성 및 이벤트 처리
 * 서버로부터 받은 json키는 rows 이다.
 *
 * @param {Object} opt : kendo 설정 옵션
 *
 * opt.autoBind   : false or true. 기본값은 true (일반은 생략가능. cascade 기능적용시 필수)
 * opt.cscdId     : 이전 DropDownList Tag Id를 적어준다. (일반은 생략가능. cascade 기능적용시 필수)
 * opt.cscdField  : 부모 dropdown 에서 선택한 id 값을 서버로 쿼리 요청시 사용할 parameter 이름을 적어준다.  (일반은 생략가능. cascade 기능적용시 필수)
 * opt.blank      : 첫번째 행 출력 문구. 기본값은 없음. (생략가능)
 * opt.params     : 파라미터 정의. {'서버전달 파라미터명1':'Tag Obj ID1', '서버전달 파라미터명2':'Tag Obj ID2'}
 * opt.valueField : 기본값은 CODE. 개발자가 값은 리네임할 수 있음.
 * opt.textField  : 기본값은 NAME. 개발자가 값은 리네임할 수 있음.
 * opt.id         : 타켓 INPUT ID
 * opt.url        : api url주소
 */
function ffnKendoDropDownList( opt ){

    if (!opt) return ;

    //기본레이아웃
    const _header = "<select name='"+opt.id+"'>";
    const _default = opt.blank ? "<option value=''>"+opt.blank+"</option>" : "";
    const _footer = "</select>";

    //option 태그 담을 변수
    let _content = "";

    /**
     * api연동이 필요한 select인지 확인
     */
    function requestApi(params, callback) {
        $.ajax({
            url: params.url,
            data: params.data,
            type: params.method ? params.method : "POST",
            dataType: "json",

            success: function (data) {
                //callback(data);
                callback(data.data);
            },

            error: function (error) {
                console.error(`${params.url} has exception...`, error);
            },
        });
    }

    function isRequestApi() {
        if (opt.url) {
            requestApi({
                url: opt.url,
                method: opt.method ? opt.method : "GET",
                data: opt.params
            }, renderContent)
        }
        else {
            for (let i = 0; i < opt.data.length; i++) {
                const data = opt.data[i];
                _content += "<option value='"+data.CODE+"'>"+data.NAME+"</option>";
            }

            renderSelectBox();

        }
    }

    /**
     * api연동해서 받은 데이터를 option태그에 바인딩
     */
    function renderContent(response){
        const rows = response.rows;

        if (rows && rows.length) {
            rows.forEach(function(obj) {
                const _value = Object.values(obj);
                _content += "<option value='"+_value[0]+"'>"+_value[1]+"</option>";
            })

            renderSelectBox();
        }
    }

    /**
     * return 하는 함수
     */
    function renderSelectBox() {
        const _layout = _header + _default + _content + _footer;

        return $('#' + opt.id).html(_layout);
    }


    function init() {
        isRequestApi();
    }

    init();
}


/**
 * fnKendoDropDownList 생성 및 이벤트 처리
 * 서버로부터 받은 json키는 rows 이다.
 *
 * @param {Object} opt : kendo 설정 옵션
 *
 * opt.autoBind   : false or true. 기본값은 true (일반은 생략가능. cascade 기능적용시 필수)
 * opt.cscdId     : 이전 DropDownList Tag Id를 적어준다. (일반은 생략가능. cascade 기능적용시 필수)
 * opt.cscdField  : 부모 dropdown 에서 선택한 id 값을 서버로 쿼리 요청시 사용할 parameter 이름을 적어준다.  (일반은 생략가능. cascade 기능적용시 필수)
 * opt.blank      : 첫번째 행 출력 문구. 기본값은 없음. (생략가능)
 * opt.params     : 파라미터 정의. {'서버전달 파라미터명1':'Tag Obj ID1', '서버전달 파라미터명2':'Tag Obj ID2'}
 * opt.valueField : 기본값은 CODE. 개발자가 값은 리네임할 수 있음.
 * opt.textField  : 기본값은 NAME. 개발자가 값은 리네임할 수 있음.
 * opt.id         : 타켓 INPUT ID
 * opt.url        : DropDownList에 바인딩할 테이터를 리턴해주는 주소를 입력한다.
 *                  기본 사용 주소 : /biz/ss/code/getCodelist.json?TYPE_CODE=typeCode 값
 * opt.maxLength  : 최대 출력 개수 지정
 */
// bak_
function fnKendoDropDownList( opt ){
    const MAX_HEIGHT = 275;
    if(opt.url != undefined){
    	var xhrIndex = XHR_INDEX++;
        return $('#' + opt.id).kendoDropDownList({
            autoBind   : opt.autoBind == undefined ? true : opt.autoBind,
            async: opt.async === false ? false : true, // true: 비동기 / false 동기
            cascadeFrom: opt.cscdId == undefined ? '' : opt.cscdId,
            cascadeFromField: opt.cscdField== undefined ? '' : opt.cscdField,
            value : opt.value ==undefined ? '' : opt.value,
            optionLabel: opt.blank == undefined ? '' : opt.blank,   // "Select product...",
            /* HGRM-2013 - dgyoun : selectbox 수정 선택 시 기존 값 선택  Start */
            dataBound : opt.dataBound && typeof opt.dataBound == "function" ? opt.dataBound : null,
            /* HGRM-2013 - dgyoun : selectbox 수정 선택 시 기존 값 선택  End */
            // height : opt.height ? opt.height : undefined,
            height : opt.blank ? MAX_HEIGHT : MAX_HEIGHT - 25,
            dataSource : {
                serverFiltering: true,
                transport: {
                    read: {
                        url     : opt.url,
                        dataType: 'json',
                        beforeSend: function(req) {
                        	XHR_LIST[xhrIndex] = req;
                            req.setRequestHeader('authMenuID', CLICKED_MENU_ID);
                        }
                    },
                    parameterMap: function (data, type) {
                        var parameters = {};
                        if(type == 'read'){
                            if( opt.params != undefined && opt.params != '' ){
                                var objJson = opt.params;
                                $.each(objJson, function(key, value){
                                    parameters[key] = value;
                                });
                            }
                            if(opt.cscdId !== undefined && opt.cscdField !==undefined){
                                parameters[opt.cscdField] = $('#'+opt.cscdId).val();
                            }
                        }
                        return parameters;
                    }
                },
                schema: {
                    data  : function(response) {
            			return response.data.rows
                    }
	                ,error: function(e) {
	                	delete XHR_LIST[xhrIndex];
	                	console.log("error event handler", e);
	    	        }
                },
                requestEnd: function(e) {

                    var response = e.response;
                    if(response){
                        if(response['code']){
                            if(!fnDefCallback(response, opt)){
                                return;
                            }else{
                                if(opt.urlCallback){
                                    var callbacks = $.Callbacks();
                                    callbacks.add( opt.urlCallback);
                                    callbacks.fire( response );
                                }
                            }
                        }else{
                        }
                    }

                }
            },
            dataValueField: opt.valueField == undefined ? 'CODE' : opt.valueField,
            dataTextField : opt.textField  == undefined ? 'NAME' : opt.textField,
            animation: {
                close: {
                    effects: 'zoom:out',
                    duration: 300
                }
            },
            popup: opt.popup ? opt.popup : {
                appendTo: $('#' + opt.id).closest('.fb__custom__select:not(input)'),
            }
        }).data('kendoDropDownList');
    }else{
        return $('#' + opt.id).kendoDropDownList({
            autoBind   : opt.autoBind == undefined ? true : opt.autoBind,
            async: opt.async === false ? false : true, // true: 비동기 / false 동기
            cascadeFrom: opt.cscdId == undefined ? '' : opt.cscdId,
            cascadeFromField: opt.cscdField== undefined ? '' : opt.cscdField,
            optionLabel: opt.blank == undefined ? '' : opt.blank,   // "Select product...",
            /* HGRM-2013 - dgyoun : selectbox 수정 선택 시 기존 값 선택  Start */
            dataBound : opt.dataBound && typeof opt.dataBound == "function" ? opt.dataBound : null,
            /* HGRM-2013 - dgyoun : selectbox 수정 선택 시 기존 값 선택  End */
            dataSource : opt.data,
            // "Select product...",
            // height : opt.height ? opt.height : undefined,
            height : opt.blank ? MAX_HEIGHT : MAX_HEIGHT - 25,
            dataValueField: opt.valueField == undefined ? 'CODE' : opt.valueField,
            dataTextField : opt.textField  == undefined ? 'NAME' : opt.textField,
            value : opt.value == undefined ? '' : opt.value,
            animation: {
                close: {
                    effects: 'zoom:out',
                    duration: 300
                }
            },
            popup: opt.popup ? opt.popup : {
                appendTo: $('#' + opt.id).closest('.fb__custom__select:not(input)'),
            }
        }).data('kendoDropDownList');
    }
}

/**
 * 상점정보를 가져온다.
 * @param {Object} opt
 */
function fnShopKendoDropDownList(opt){
    var data =  fnKendoDropDownList({
        id  : opt.id,
        url : "/comn/st/getShopList",
        valueField: "ST_SHOP_ID",
        textField : "SHOP_NAME",
        blank : (opt.blank) ? opt.blank : null,
        urlCallback : (opt.urlCallback) ? opt.urlCallback : null
    });
    return data;
}


var LAYER_POPUP_OBJECT = '';

/**
 * http://docs.telerik.com/kendo-ui/api/javascript/ui/window#events-close
 * 팝업 함수 - KendoWindow 함수
 *
 * @param {Object} opt : kendo 설정 옵션
 *
 * opt.id      : UNIQUE 팝업 아이디.
 * opt.title   : 팝업 제목
 * opt.width   : 가로
 * opt.height  : 세로
 * opt.src     : 팝업페이지 주소
 * opt.param   : 팝업페이지 파라미터
 * opt.success : 팝업 페이지가 닫힐 경우 호출받는 함수를 적는다.
 *               예문에서 참고되는 fnBizPopCallback 함수는 가능하면 함수명 변경없이 그대로 사용을 권고한다.
 */
function fnKendoPopup( opt ){
	/*
    if( USER_BROWSER == 'edge' ){
    	fnKendoPopupEdge( opt );
    	return;
    }
    */

    //var lpId = opt.id;

	var parsedSrc = opt.src.split('#/');
	var lpId = parsedSrc[1];


    if( opt.param ){
    	var queryString = '';
    	try{
    		queryString = jQuery.param( opt.param );
    	}catch(e){
    		queryString = '';
    	}

        opt.src = opt.src + '&lpId=' + lpId + '&' + queryString;
        POP_PARAM['parameter'] = opt.param;
    }else{
        POP_PARAM = {};
    }

    LAYER_POPUP_OBJECT = $("<div><iframe class='k-content-frame' id='" + opt.id + "' name='" + opt.id + "' src='' scrolling='"  + (opt.scrollable ===undefined?  'no' :opt.scrollable)+"'></div>").kendoWindow({
        iframe  : true,
        modal   : true,
        width   : opt.width == undefined ? "70%" : opt.width,
        height  : opt.height == undefined ? "60%" : opt.height,
        title   : opt.title,
        actions : ['Refresh', 'Close'], // 'Minimize', 'Maximize',
        position: opt.pos,
        resizable: opt.resizable ? opt.resizable : true,
        minWidth: opt.minWidth ? opt.minWidth : 100,
        draggable: false,
        open    : function(e) {},
        activate: function(e){
            $('div .k-window-content').css('overflow', 'hidden');
            $("body").addClass("fb__lock");

            // 타이틀에 도움말 추가할 경우
            if( opt.help ) {
                fnHelpInPopupTitle(opt.help);
            }
        },
        refresh : function(e) {
       	 if( POP_GB_ID != '' && POP_PARAM != '' ){
              if(typeof(opt.success) === 'function') opt.success(POP_GB_ID, POP_PARAM);
          }else if( POP_GB_ID != ''){
              if(typeof(opt.success) === 'function') opt.success(POP_GB_ID ,null);
          }else if( POP_PARAM != ''){
              if(typeof(opt.success) === 'function') opt.success(null,POP_PARAM);
          }else{
              if(typeof(opt.success) === 'function') opt.success(null,null);
          }
       },
        close   : function(e) {
            if( POP_GB_ID != '' && POP_PARAM != '' ){
                if(typeof(opt.success) === 'function') opt.success(POP_GB_ID, POP_PARAM);
            }else if( POP_GB_ID != ''){
                if(typeof(opt.success) === 'function') opt.success(POP_GB_ID ,null);
            }else if( POP_PARAM != ''){
                if(typeof(opt.success) === 'function') opt.success(null,POP_PARAM);
            }else{
                if(typeof(opt.success) === 'function') opt.success(null,null);
            }
            $('div .k-window-content').css('overflow', 'auto');
            $("body").removeClass("fb__lock");
            // 전역변수 초기화
            POP_PAGE_ID = '';
            POP_GB_ID   = '';
            POP_PARAM   = {};

            storageClear();
            this.destroy();
        },

        error: function(e) {
        }
    });

    var _kendoPopup = LAYER_POPUP_OBJECT.data('kendoWindow');

    // 켄도 팝업 최대 너비 설정
    if( opt.maxWidth ) {
        _kendoPopup.setOptions({
            maxWidth: opt.maxWidth,
        });
    }

    if( opt.pos == undefined ){
        _kendoPopup.center();
    }
    _kendoPopup.open();

    try{

    	CLICKED_MENU_URL = opt.src;

	    $('<form/>', {
	    		action: "modal.html",
	            method: 'get',
	            target: opt.id
	    }).hide().appendTo('body')
	               // add any data
	             .append('<input name="lpId" />').find('[name=lpId]').val(lpId).end()
	             .submit().remove();
    }catch(e){
    	alert(e);
    }

}

/**
 * http://docs.telerik.com/kendo-ui/api/javascript/ui/window#events-close
 * 팝업 함수 - KendoWindow 함수 - edge 용도
 *
 * https://github.com/BrandyMint/ken/blob/master/pages/main.html 참고해볼 것...
 *
 * @param {Object} opt : kendo 설정 옵션
 *
 * opt.id      : UNIQUE 팝업 아이디.
 * opt.title   : 팝업 제목
 * opt.width   : 가로
 * opt.height  : 세로
 * opt.src     : 팝업페이지 주소
 * opt.param   : 팝업페이지 파라미터
 * opt.success : 팝업 페이지가 닫힐 경우 호출받는 함수를 적는다.
 *               예문에서 참고되는 fnBizPopCallback 함수는 가능하면 함수명 변경없이 그대로 사용을 권고한다.
 */
function fnKendoPopupEdge( opt ){

    var lpId        = opt.id;
    var currentUrl  = location.protocol + '//' + location.host + location.pathname;
    var queryString = '';

    if( opt.param ){

    	try{
    		queryString = jQuery.param( opt.param );
    	}catch(e){
    		queryString = '';
    	}

        opt.src = opt.src + '?lpId=' + lpId + '&' + queryString;
        POP_PARAM['parameter'] = opt.param;
    }else{
        POP_PARAM = {};
    }

    var goUrl =  currentUrl + opt.src + queryString;

    LAYER_POPUP_OBJECT = $("<div><iframe class='k-content-frame' id='" + opt.id + "' name='" + opt.id + "' src='' scrolling='"  + (opt.scrollable ===undefined?  'no' :opt.scrollable)+"'></div>").kendoWindow({
        iframe  : true,
        //modal   : true,
        width   : opt.width == undefined ? "70%" : opt.width,
        height  : opt.height == undefined ? "60%" : opt.height,
        title   : opt.title,
        actions : ['Refresh', 'Close'], // 'Minimize', 'Maximize',
        position: opt.pos,
        open    : function(e) {},
        //content : opt.src,
        content : goUrl,
        activate: function(e){
            $('div .k-window-content').css('overflow', 'hidden');
        },
        close   : function(e) {
            if( POP_GB_ID != '' && POP_PARAM != '' ){
                if(typeof(opt.success) === 'function') opt.success(POP_GB_ID, POP_PARAM);
            }else if( POP_GB_ID != ''){
                if(typeof(opt.success) === 'function') opt.success(POP_GB_ID ,null);
            }else if( POP_PARAM != ''){
                if(typeof(opt.success) === 'function') opt.success(null,POP_PARAM);
            }else{
                if(typeof(opt.success) === 'function') opt.success(null,null);
            }

            // 전역변수 초기화
            POP_PAGE_ID = '';
            POP_GB_ID   = '';
            POP_PARAM   = {};

            this.destroy();
        },

        error: function(e) {
        	alert("");
        }
    });

    if( opt.pos == undefined ){
        LAYER_POPUP_OBJECT.data('kendoWindow').center().open();
    }else{
        LAYER_POPUP_OBJECT.data('kendoWindow').open();
    }
}


function fnKendoInputPoup( opt ){
    var id = (opt.id===undefined)?'kendoPopup': opt.id;
    var kendoWindow =$('#'+id).data('kendoWindow');
    kendoWindow.setOptions({
      width   : opt.width == undefined ? "550px" : opt.width,
      height  : opt.height == undefined ? "500px" : opt.height,
      minWidth: opt.minWidth ? opt.minWidth : 100,
    });
    kendoWindow.title( opt.title == undefined ? "Input Popup" : fnGetLangData(opt.title));
    kendoWindow.center().open();

    // 타이틀에 도움말 추가할 경우
    if( opt.help ) {
        fnHelpInPopupTitle(opt.help);
    }

    kendoWindow.bind("activate", function(e){
        var windowContent = $("#" + id + ".k-window-content");
        windowContent.addClass("inputPopup-content");
    });

}
/**
 * 사용하지 않는 함수
 * @param {Object} lpId
 * @param {Object} id
 * @param {Object} data
 */
function fnKendoPopupClose( lpId, id, data ){
    //LAYER_POPUP_OBJECT.data('kendoWindow').destroy(); //this.destroy();
    fnBizPopCallback( id, data );
    parent.$('#' + lpId).parent().data('kendoWindow').destroy();

}

/**
 * 멀티파일 업로드 함수
 * http://demos.telerik.com/kendo-ui/upload/index
 * @param opt
 *
 * opt.id : HTML FORM > Input element type > file > id
 * opt.select : 파일을 선택후 체크해야 할 로직을 코딩한다.
 * opt.template : 업로드해야할 파일리스트 HTML 템플릿을 id 를 입력한다. (생략가능)
 * opt.localization : 첨부파일 버튼명을 입력한다. (생략가능)
 */
function fnKendoMultiUpload( opt ){

    $('#' + opt.id).kendoUpload({
        multiple     : true,
        showFileList : true,
        async        : {
            autoUpload: false
        },
        select      : opt.select,
        template    : opt.template == undefined ? '' : opt.template,
        localization: {
            select: opt.localization == undefined ? '파일선택' : opt.localization
        }
    });

}

/**
 * 파일 업로드 함수
 * http://demos.telerik.com/kendo-ui/upload/index
 * @param opt
 *
 * opt.id : HTML FORM > Input element type > file > id
 * opt.select : 파일을 선택후 체크해야 할 로직을 코딩한다.
 * opt.template : 업로드해야할 파일리스트 HTML 템플릿을 id 를 입력한다. (생략가능)
 * opt.localization : 첨부파일 버튼명을 입력한다. (생략가능)
 */
function fnKendoUpload( opt ){

    $('#' + opt.id).kendoUpload({
        multiple     : false,
        showFileList : false,
        select      : opt.select,
        template    : opt.template == undefined ? '' : opt.template,
        localization: {
            select: opt.localization == undefined ? '파일선택' : opt.localization
        }
    });

}

/**
 * 트리 데이터소스를 설정하고 리턴한다.
 * @param opt
 *
 * opt.url  : 트리에 바인딩할 데이터를 리턴해주는 서버주소를 입력한다.
 * opt.data : 서버로부터 받은 json 키를 입력한다.
 *            기본값은 rows 이고 특이사항 없으면 변경하지 않는다.(생략가능)
 *            서버로부터 데이터를 받을때 하위노드 여부 컬럼을 ISLEAF 명칭으로 값은 true or false 로 한다.
 * opt.model_id : 모델 아이디를 입력한다.
 *
 */
function fnKendoTreeDS( opt ){
	var xhrIndex = XHR_INDEX++;
    return new kendo.data.HierarchicalDataSource({
        transport: {
            read: {
                url     : opt.url,
                dataType: 'json',
                beforeSend: function(req) {
                	XHR_LIST[xhrIndex] = req;
                    req.setRequestHeader('authMenuID', CLICKED_MENU_ID);
                }
            }
        },
        schema: {
            data  : function(response) {
                if( opt.url.includes("/admin/display/manage/selectDpPageList") ||
                    opt.url.includes("/admin/display/manage/selectDpCategoryList") ||
                    opt.url.includes("/admin/display/manage/selectDpInventoryGroupList")) {    // BOS > 전시관리 > 전시 콘텐츠 관리 트리메뉴 defalust 펼침
                    if(response.data.rows.length > 0) {
                        for(var i = 0 ; i < response.data.rows.length; i++) {
                            response.data.rows[i].expanded = true;
                        }
                    }
                }
    			return response.data.rows
            }
            , model : {
                id          : opt.model_id,
                hasChildren : 'hasChildren'
            }
            ,error: function(e) {
            	delete XHR_LIST[xhrIndex];
            	console.log("error event handler", e);
	        }
        },
        requestEnd : function(e) {

            var response = e.response;

            if(response){
                if(response['code']){
                    if(!fnDefCallback(response, opt)){
                        return;
                    }
                }

                /* 2020.09.24 - dgyoun : 응답구조 변경에 따른 처리 수정 : 김승우 */
                var loopCnt = "";
                var rows = null;

                if( response.data && response.data.rows.length ){
                    loopCnt = response.data.rows.length;
                    rows = response.data.rows;
                } else {
                    return;
                }

                if( loopCnt > 0 ){
                    for( var i=0; i<loopCnt; i++ ){
                        if(rows[i].isleaf.toLowerCase()  == 'true'){
                            rows[i].hasChildren = true;
                        } else {
                            rows[i].hasChildren = false;
                        }
                    }
                }
                //var loopCnt = response.rows.length;
                //if( loopCnt > 0 ){
                //    for( var i=0; i<loopCnt; i++ ){
                //        if(response.rows[i].isleaf.toLowerCase()  == 'true'){
                //            response.rows[i].hasChildren = true;
                //        }else{
                //            e.response.rows[i].hasChildren = false;
                //        }
                //    }
                //}

            }
        }
    });
}

/**
 * fnKendoTreeView 생성 및 이벤트 처리
 *
 * @param {Object} opt : kendo 설정 옵션
 *
 * opt.id            : 트리 영역 DIV ID
 * opt.dataSource    : 트리 데이터소스 입력. fnKendoTreeDS 함수 사용.
 * opt.dataTextField : 트리에 출력되는 노드명.
 * opt.autoBind      : 초기 데이터 바인딩 여부
 * opt.dragAndDrop   : drag & drop 사용 여부
 * opt.autoScroll    : 트리 영역 스크롤 여부
 * opt.change        : 노드명 클릭시 발생하는 이벤트로 커스트마이징 로직이 들어가는 영역이다.
 * opt.expand        : 하위 노드 확장시 발행하는 이벤트 (반대 개념 collapse)
 * opt.collapse      : 하위 노드 축소시 발행하는 이벤트 (반대 개념 expand)
 * opt.dragstart     : 드래그 시작시 발행하는 이벤트
 * opt.drop          : 노드가 드랍될대 발생하는 이벤트
 * opt.dragend       : 드랍이 되고 나서 발생하는 이벤트
 *
 * 참고이벤트))
 * $(트리 div id).data('kendoTreeView').bind('dataBound', function(e){ console.log(e) });
 * $(트리 div id).data('kendoTreeView').bind('collapse', function(e){ console.log(e) });
 * $(트리 div id).data('kendoTreeView').bind('expand', function(e){ console.log(e) });
 *
 */

function fnKendoTreeView( opt ){
    $('#' + opt.id).kendoTreeView({
//    	====수정사항 템플릿 추가 ====
    	template : opt.template ? opt.template : null
//    	====수정사항====
        ,dataSource   : opt.dataSource
        ,dataTextField: opt.dataTextField
        ,autoBind: opt.autoBind == undefined ? true : opt.autoBind
        ,dragAndDrop: opt.dragAndDrop == undefined ? false : opt.dragAndDrop
        ,autoScroll: opt.autoScroll == undefined ? false : opt.autoScroll
        ,change: opt.change == undefined ? (function (){}) : opt.change
        ,expand: opt.expand == undefined ? (function (){}) : opt.expand
        ,collapse: opt.collapse == undefined ? (function (){}) : opt.collapse
        ,dragstart: opt.dragstart == undefined ? (function (){}) : opt.dragstart
        ,drop: opt.drop == undefined ? (function (){}) : opt.drop
        ,dragend: opt.dragend == undefined ? (function (){}) : opt.dragend
    });
}

var FORBIZ_DEF_MESSAGE;
var FORBIZ_CONF_MESSAGE;

/**
 * 메세지창
 * @param {Object} opt
 *
 * opt.type   : def or confirm (생략시 def 설정)
 * opt.message: HTML TAG
 *               ex)) <p>A new version of <strong>Kendo UI</strong> is available.<br/>
 *                    Would you like to download and install it now?<p>
 * opt.ok     : 확인 후 호출되는 함수 (생략가능)
 * opt.cancel : 취소 후 호출되는 함수 (생략가능)
 */
function fnKendoMessage( opt ){
    if( opt.type == 'confirm' ){
        FORBIZ_CONF_MESSAGE = $("#forbizMessage").kendoDialog({
            closable: false,
            modal: true,
            minWidth: 400,
            title  : 'Confirm Message',
            content: opt.message,
            actions: [
                { text: fnGetLangData({key :"4487"  ,nullMsg :'확인' }), action: function(e){
	                    if(typeof(opt.ok) === 'function') {
	                    	setTimeout(function() {
	                    		opt.ok();
	                    	});
	                    }
                        FORBIZ_CONF_MESSAGE.data("kendoDialog").close();
                        fnKendoMessageInit();
                    }
                },
                { text: fnGetLangData({key :"3644"  ,nullMsg :'취소' }), action: function(e){
                        if(typeof(opt.cancel) === 'function') opt.cancel();
                        FORBIZ_CONF_MESSAGE.data("kendoDialog").close();
                        fnKendoMessageInit();
                    }
                }
            ]
        });

        FORBIZ_CONF_MESSAGE.data("kendoDialog").open();
    }else{

        FORBIZ_DEF_MESSAGE = $("#forbizMessage").kendoDialog({
            closable: false,
            modal: true,
            minWidth: 400,
            title  : 'Message',
            content: opt.message,
            actions: [
                { text: '확인', action: function(e){
	                    if(typeof(opt.ok) === 'function') {
	                    	setTimeout(function() {
	                    		opt.ok();
	                    	});
	                    }
                        FORBIZ_DEF_MESSAGE.data("kendoDialog").close();
                        fnKendoMessageInit();
                    }
                }
            ]
        });
        FORBIZ_DEF_MESSAGE.data("kendoDialog").open();
    }
    $(".k-dialog-buttongroup").find('.k-button').get(0).focus();
}

/**
 * fnKendoMessage(=kendoDialog) 메세지 초기화 함수
 */
function fnKendoMessageInit(){
    $('.k-dialog').remove();
    $('body').append('<div id="forbizMessage"></div>');
}

/**
 * Input Tag Masking 처리하는 함수
 *
 * @param {Object} opt
 *
 * opt.fn   : 기능을 명시한다.(onlyNum, money etc..)
 *            상세한 내용은 아래의 샘플을 참고한다.
 * opt.mask : 입력 체계를 설정한다.(생략가능)
 *
 *  ex)) fn : onlyNum - 숫자만 입력
 *       fn : money - 숫자만입력 + 콤마처리 + 우측정렬
 *       fn : creditCard - 4자리 + 4자리 + 4자리 + 4자리
 *       fn : birth - 4자리 + 2자리 + 2자리
 *       fn : marry - 4자리 + 2자리 + 2자리
 *       fn : juminNo - 6자리 + 7자리
 *       fn : bizNo - 3자리 + 2자리 + 5자리
 * ----------------------------------------
 *       fn   : code
 *       mask : 00-0000-00 (포맷입력) 구분자가 필요할 경우 무조건 - 로 입력한다.
 */
$.fn.forbizMaskTextBox = function( opt ) {

    for( var i=0; i<$(this).length; i++){

        var tagId = $(this)[i].id;

        if( opt.fn == 'onlyNum' ){
            //fnSetOnlyNum({ id : tagId });

            var $tagId = $('#' + tagId);

            $tagId.attr('data-role', 'onlyNum');
            // keypress
            $tagId.on('keydown', function(e){
                // 입력된 키의 아스키 코드값을 변수 t에 저장
                var t = event.keyCode;
                // 숫자, 키패드 숫자, bs, del, <-, ->, tab 키만 입력되게 처리
                if((t>=48&&t<=57)||(t >= 96 && t <= 105)||t==8||t==9||t==37||t==39||t==46){
                    return;
                }else{
                    console.log('유효화지 않는 키입니다. --> ' + t);
                    event.returnValue = false;
                }
            });
            // 키입력 이벤트 등록하기
            $tagId.on('keyup', function(e){
                this.value=this.value.replace(/[^(0-9)^(,)]/g, '');
            });
            $tagId.on('focusout', function(e){
                this.value=this.value.replace(/[^(0-9)^(,)]/g, '');
            });
        }else if( opt.fn == 'money' ){

            var $tagId = $('#' + tagId);

            // INPUT 속성 설정하기
            $tagId.css('text-align','right');
            $tagId.attr('data-role', 'money2');

            // setValue 생성하기
            if( $.trim($tagId.val()) == '' ){
                $tagId.val( '0' );
            }else{
                $tagId.val( kendo.toString(kendo.parseFloat($tagId.val()), "n0") );
            }
            $tagId.on('keydown', function(e){
                // 입력된 키의 아스키 코드값을 변수 t에 저장
                var t = event.keyCode;
                // 숫자, 키패드 숫자, bs, del, <-, ->, tab 키만 입력되게 처리
                if((t>=48&&t<=57)||(t >= 96 && t <= 105)||t==8||t==9||t==37||t==39||t==46){
                    return;
                }else{
                    console.log('유효화지 않는 키입니다. --> ' + t);
                    event.returnValue = false;
                }
            });

            // 키입력 이벤트 등록하기
            $tagId.on('keyup', function(e){
                this.value=this.value.replace(/[^(0-9)^(,)]/g, '');
            });
            $tagId.on('focusout', function(e){
                this.value=this.value.replace(/[^(0-9)^(,)]/g, '');
            });

            // 포커스 이벤트 등록 바인딩하기
            $tagId.bind('focus', function (e) {
                $(this).val( kendo.parseFloat($(this).val()) );
            });

            // 포커스 아웃 이벤트 바인딩하기
            $tagId.bind('blur', function (e) {
                $(this).val( kendo.toString(kendo.parseFloat($(this).val()), "n0") );
            });

            //fnSetMoney({ id : tagId });
        }else if( opt.fn == 'creditCard' ){
            $('#' + tagId).kendoMaskedTextBox({
                mask: '0000-0000-0000-0000',
                clearPromptChar: true,
                change : function(e){
                    this.value( this.value().replace(/_/g, '0') );
                }
            });
        }else if( opt.fn == 'ymd' ){
            $('#' + tagId).kendoMaskedTextBox({
                mask: '0000-00-00',
                clearPromptChar: true,
                change : function(e){
                    this.value( this.value().replace(/_/g, '0') );
                }
            });
        }else if( opt.fn == 'juminNo' ){
            $('#' + tagId).kendoMaskedTextBox({
                mask: '000000-0000000',
                clearPromptChar: true,
                change : function(e){
                    this.value( this.value().replace(/_/g, '0') );
                }
            });
        }else if( opt.fn == 'bizNo' ){
            $('#' + tagId).kendoMaskedTextBox({
                mask: '000-00-00000',
                clearPromptChar: true,
                change : function(e){
                    this.value( this.value().replace(/_/g, '0') );
                }
            });
        }else if( opt.fn == 'code' ){
            $('#' + tagId).kendoMaskedTextBox({
                mask: opt.mask,
                clearPromptChar: true,
                change : function(e){
                    this.value( this.value().replace(/_/g, '0') );
                }
            });
        }

    } // END FOR
};

/**
 * 그리드 리사이즈
 * @param {Object} tagId
 */
function fnResizeGrid( tagId ) {

    if( tagId == null || tagId == '' ) return;

    var gridElement = $('#'+tagId);
    var dataArea = gridElement.find('.k-grid-content');
    var newHeight = gridElement.parent().innerHeight() - 2;
    var diff = gridElement.innerHeight() - dataArea.innerHeight();
    gridElement.height(newHeight);
    dataArea.height(newHeight - diff);
}
/**
 * 그리드에서 데이터 추가하
 * @param {Object} tagId
 */
function fnInsertGrid(objJson,schema){

    var $grid = $(this).data('kendoGrid');

    if($grid){

        var cols = $grid.columns;
        var obj = {};

        for(var i=0;i<cols.length;i++)
            obj[cols[i].field] = objJson[schema][cols[i].field];

        $grid.dataSource.add(obj);
    }

    objJson = null;
}

/**
 * 그리드에서 숫자형태로 변경할 때 사용하는 함수
 * @param {Object} tagId
 */
function fnGridQTY(money,length) {
    if(typeof(money) === 'string') money = parseInt(money, 10);
    if(money)
    {
        if(length)
        {
            if(typeof(money) === 'string') money = parseFloat(money);
            if($.isNumber(length)){
                return kendo.toString(money, 'n'+length);
            }
        }
        else
        {
            if(typeof(money) === 'string') money = parseInt(money,10);
            return kendo.toString(money, 'n0');
        }
    }
    else
    {
        return 0;
    }
}

function fnKendoWindowMenu(opt){
    if(!opt.id){
        alert("Div Tag ID 누락");
        return;
    }
    kendoWindowMenu =$('#'+opt.id).kendoWindow({
        title: false
        ,draggable: false
        ,width: 800
        ,height: 750
        ,scrollable: false
        ,resizable: false
        ,actions: {}
      //modal: true
    }).data("kendoWindow").center().open();
    $('#container').removeClass('aside-hide');
        $(window).resize(function(){
            kendoWindowMenu.center();
        });
}

function fnInitItemListViewArea(opt){

    var itemHtml = '<div class="itemView">'
                +'<img src="#= S_IMG #" alt="#: ITEM_NAME # image" />'
                +'<p>#:ITEM_NAME#</p>'
                +'  <div class="edit-buttons">'
                +'      <a class="k-button k-delete-button" href="\\#"><span class="k-icon k-i-delete"></span></a>'
                +'  </div>'
                +'</div>';

    opt.areaObj.kendoListView({
        dataSource: opt.dataSource
        ,template: kendo.template( itemHtml )
        ,remove: function(e) {
            //handle event
            opt.dataSource.remove(e.model);
            e.preventDefault();
        }
    });
    /*
    opt.areaPageObj.kendoPager({
        dataSource: opt.dataSource
    });
    */

    opt.areaObj.kendoSortable({
        filter: ">div.itemView"
        ,cursor: "move"
        ,placeholder: function(element) {
            return element.clone().css("opacity", 0.5);
        }
        ,hint: function(element) {
            return element.clone().removeClass("k-state-selected");
        }
        ,change: function(e) {

            var oldIndex = e.oldIndex,
                newIndex = e.newIndex,
                data = opt.dataSource.data(),
                dataItem = opt.dataSource.getByUid(e.item.data("uid"));

            opt.dataSource.pushDestroy(dataItem);
            opt.dataSource.insert(newIndex, dataItem);

            for (var i = 0; i < data.length; i++) {
                data[i].SORT = i;
                data[i].dirty = true;
            }
        }
    });
}

/**
 * Kendo Grid Rowspan
 * @param {Object} 그리드 아이디
 * @param {Object} 그리드 field
 */
function fnMergeGridRows( gId, gField ){

    $('#' + gId + '>.k-grid-content>table').each(function (index, item) {

        var dimension_col = 1;
        // First, scan first row of headers for the "Dimensions" column.
        $('#' + gId + '>.k-grid-header>.k-grid-header-wrap>table').find('th').each(function () {
            try{
	            if( $(this).context.dataset.field == gField) {

	                // first_instance holds the first instance of identical td
	                var first_instance = null;

	                $(item).find('tr').each(function () {

	                    // find the td of the correct column (determined by the colTitle)
	                    var dimension_td = $(this).find('td:nth-child(' + dimension_col + ')');

	                    if (first_instance == null) {
	                        first_instance = dimension_td;
	                    } else if (dimension_td.text() == first_instance.text()) {
	                        // if current td is identical to the previous
	                        // then remove the current td
	                        dimension_td.remove();
	                        // increment the rowspan attribute of the first instance
	                        first_instance.attr('rowspan', typeof first_instance.attr('rowspan') == "undefined" ? 2 : first_instance.attr('rowspan') + 1);
	                    } else {
	                        // this cell is different from the last
	                        first_instance = dimension_td;
	                    }
	                });
	                return;
	            }
            }catch(e){
            	console.log('fnMergeGridRows Error : ' + e);
            }

            dimension_col++;
        });
    });
}

/**
 * 그리드 포멧을 정의한다.
 * @param {Object} str
 */
function fnKendoFormat( str ){

	if( str == '{0:n0}' ){

	}



}


/**
 * kendoGrid 마우스 drag & drop 으로 레코드 정렬
 * @param kendoGrid ID
 * @param sortFieldName 정렬로 사용할 field 이름 (default = "sort")
 * @param tooltip 레코드 이동시 풍선도움말 문구 (default : "")
 *
 * * 주의 :	1. 새로 레코드 추가시에는 반드시 기존 레코드의 sort 값 + 1 로 sort 셀의 값을 설정해야 한다.
 * 			2. sort 값은 중복되지 않아야 한다.
 */
function fnKendoGridSortByDragDrop(gridId, sortFieldName = "sort", tooltip = "") {
	var grid = $("#" + gridId).data("kendoGrid");

	grid.table.kendoSortable({
		//hint: hintElement,
		hint: function(element) { return tooltip ? "<table><tr><td>" + tooltip + "</td></tr></table>" : "" },
		cursor: "move",
		placeholder: function(element) {
			return element.clone().addClass("k-state-hover").css("opacity", 0.65);
		},
		container: "#" + gridId + " tbody",
		filter: ">tbody >tr",
		change: function(e) {
			oldIndex = e.oldIndex , // The old position.
			newIndex = e.newIndex , // The new position.
			view = grid.dataSource.view(),
			dataItem = grid.dataSource.getByUid(e.item.data("uid")); // Retrieve the moved dataItem.

			dataItem[sortFieldName] = newIndex; // Update the sort
			dataItem.dirty = true;

			// Shift the sort of the records.
			if (oldIndex < newIndex) {
				var lastSortValue = 0;
				for (var i = oldIndex + 1; i <= newIndex; i++) {
					grid.dataSource.view()[i][sortFieldName]--;
					grid.dataSource.view()[i].dirty = true;
					lastSortValue = grid.dataSource.view()[i][sortFieldName];
					//view[i].sort--;
					//view[i].dirty = true;
				}

				grid.dataSource.getByUid($(e.item).attr("data-uid"))[sortFieldName] = lastSortValue + 1;
			} else {
				for (var i = oldIndex; i >= newIndex; i--) {
					grid.dataSource.view()[i][sortFieldName]++;
					grid.dataSource.view()[i].dirty = true;
					//view[i].sort++;
					//view[i].dirty = true;
				}

				if (newIndex > 0)
					grid.dataSource.getByUid($(e.item).attr("data-uid"))[sortFieldName] = grid.dataSource.view()[newIndex - 1][sortFieldName] * 1 + 1;
				else
					grid.dataSource.getByUid($(e.item).attr("data-uid"))[sortFieldName] = 1;
			}

			var arryData = [];

			for (var i = 0; i < grid.dataSource.view().length; i++)
				arryData.push(grid.dataSource.view()[i]);

			var newData = fnArrayMove(arryData, oldIndex, newIndex);

			//grid.dataSource.data(newData);
			grid.dataSource.view(newData);
			//grid.refresh();

	      //grid.dataSource.sync();
		}
	});
}


/**
 * 배열 요소 이동 함수
 * @param arr 배열
 * @param old_index 이동 대항 요소 index
 * @param new_index 이동 대상 위치 index
 * @param 요소가 이동된 배열 (참고: arry 변수에 대한 call by reference 도 작동함)
 */
function fnArrayMove(arr, old_index, new_index) {
	if (new_index >= arr.length) {
    	var k = new_index - arr.length + 1;
        while (k--) {
        	arr.push(undefined);
        }
    }
    arr.splice(new_index, 0, arr.splice(old_index, 1)[0]);
    return arr; // for testing
};


/**
 * 그리드 페이지네이션 적용
 * @param grid의 dataSource
 * @param dataItem
 */
function fnKendoGridPagenation(girdDataSource, dataItem ){
	return girdDataSource.total() - ((girdDataSource.page() - 1) * girdDataSource.pageSize()) - girdDataSource.indexOf(dataItem);
}

function fnHelpInPopupTitle(data) {
    $(".k-window").addClass("helpTitle");
    var $titleEl = $(".k-window-title");

    console.log("[opt.help]", data);

    var helpKey = data.key || "";
    var helpTitle = data.title || "";
    var helpMessage = data.message || "";

    var $helpEl = $("<div class='inlineBlock' data-help-key='" + helpKey + "' data-help-title='" + helpTitle + "' data-help-message='" + helpMessage + "'></div>");
    console.log("[$helpEl]", $helpEl);

    $titleEl.append($helpEl);

    // kendoPopup의 경우 iframe으로 생성되므로, title과 content영역의 도움말 설정을 별도로 해야하기때문에, fnGetHelpData()를 호출한다.
    fnGetHelpData($helpEl);
}