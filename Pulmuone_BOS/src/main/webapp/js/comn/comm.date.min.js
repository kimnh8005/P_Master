//http://noritersand.tistory.com/378
String.prototype.string = function(len){var s = '', i = 0; while (i++ < len) { s += this; } return s;};
String.prototype.zf = function(len){
	return "0".string(len - this.length) + this;
};
Number.prototype.zf = function(len){
	return this.toString().zf(len);
};
Date.prototype.oFormat = function(f) {
    if (!this.valueOf()) return " ";

    var weekName = ["일요일", "월요일", "화요일", "수요일", "목요일", "금요일", "토요일"];
    var d = this;

    return f.replace(/(yyyy|yy|MM|dd|E|hh|mm|ss|a\/p)/gi, function($1) {
        switch ($1) {
            case "yyyy": return d.getFullYear();
            case "yy": return (d.getFullYear() % 1000).zf(2);
            case "MM": return (d.getMonth() + 1).zf(2);
            case "dd": return d.getDate().zf(2);
            case "E": return weekName[d.getDay()];
            case "HH": return d.getHours().zf(2);
            case "hh": return ((h = d.getHours() % 12) ? h : 12).zf(2);
            case "mm": return d.getMinutes().zf(2);
            case "ss": return d.getSeconds().zf(2);
            case "a/p": return d.getHours() < 12 ? "오전" : "오후";
            default: return $1;
        }
    });
};

/**
 * 오늘 날짜를 리턴한다.
 * @param String format
 */
function fnGetToday( fmt ){
	if( fmt == undefined ) fmt = 'yyyy-MM-dd';
	return new Date().oFormat( fmt );
}

/**
 * 입력한 날짜가 yyyy-MM-dd이고, 올바른 날짜인지 체크
 * @param {string} dateString 
 */
function fnIsValidDate(dateString) {
  var regEx = /^\d{4}-\d{2}-\d{2}$/;
  if(!dateString.match(regEx)) return false;

  var d = new Date(dateString);
  var dNum = d.getTime();
  if(!dNum && dNum !== 0) return false;

  return d.toISOString().slice(0,10) === dateString;
}

/**
 * 오늘 날짜/시간(24시간기준)를 리턴한다.
 * @param String format
 */
function fnGetTodayTime( fmt ){
	if( fmt == undefined ) fmt = 'yyyy-MM-dd HH:mm:ss';
	return new Date().oFormat( fmt );
}

/**
 *  입력받은 날짜에  일수를 빼어 리턴한다.
 *  @param String 날짜 8자리
 *  @param String 일수
 *  @param String format
 */
function fnGetDayMinus( str, num, fmt ){

	if( fmt == undefined ) fmt = 'yyyy-MM-dd';

	var d     = str.replace(/-/g,'').replace(/\//g,'');
	var year  = d.substring(0,4);
    var month = d.substring(4,6);
    var day   = d.substring(6,8);

	var dt = new Date(year, month-1, day);
	    dt.setDate(dt.getDate() - num);

	year  = dt.getFullYear();
	month = dt.getMonth();
	day   = dt.getDate();
	//console.log( str + ' : -' + num + ' : ' + year +'-'+ month +'-'+ day );
	dt = new Date(year, month, day);
	return dt.oFormat( fmt );
}
/**
 *  입력받은 날짜에  일수를 더하여 리턴한다.
 *  @param String 날짜 8자리
 *  @param String 일수
 *  @param String format
 */
function fnGetDayAdd( str, num, fmt ){

	if( fmt == undefined ) fmt = 'yyyy-MM-dd';

	var d     = str.replace(/-/g,'').replace(/\//g,'');
	var year  = d.substring(0,4);
    var month = d.substring(4,6);
    var day   = d.substring(6,8);

	var dt = new Date(year, month-1, day);
	    dt.setDate(dt.getDate() + num);

	year  = dt.getFullYear();
	month = dt.getMonth();
	day   = dt.getDate();
	//console.log( str + ' : +' + num + ' : ' + year +'-'+ month +'-'+ day );
	dt = new Date(year, month, day);
	return dt.oFormat( fmt );
}
/**
 *  입력받은 날짜에  월을 빼어 리턴한다.
 *  @param String 날짜 8자리
 *  @param String 월수
 *  @param String format
 */
function fnGetMonthMinus( str, num, fmt ){

	if( fmt == undefined ) fmt = 'yyyy-MM-dd';

	var d     = str.replace(/-/g,'').replace(/\//g,'');
	var year  = d.substring(0,4);
    var month = d.substring(4,6);
    var day   = d.substring(6,8);

	var dt = new Date(year, month, day);
	    dt.setMonth(dt.getMonth() - num);

	year  = dt.getFullYear();
	month = dt.getMonth().zf(2);
	day   = dt.getDate().zf(2);

	if( month == '0' || month == '00' ){
		month= 12;
		year = year - 1;
	}

	//console.log( 'month : ' + str + ' : +' + num + ' : ' + year +'-'+ month.zf(2) +'-'+ day.zf(2) );

	dt = new Date(year, month-1, day);
	return dt.oFormat( fmt );

}

/**
 * 날짜 포멧으로 변환하여 리턴한다.
 * @param String 날짜
 * @param String data Format
 * @param String out Format
 */
function fnFormatDate( date, oFormat, dFormat ){

	var returnDate = '';

	if( date == undefined ) return returnDate;
	if( dFormat == undefined ) dFormat = 'yyyyMMdd';
	//oFormat.replace(/Y/g,'y').replace(/D/g,'d')

	returnDate = date.replace(/-/g,'').replace(/\//g,'');

	var dtObj = kendo.parseDate(returnDate, dFormat);

	if(dtObj instanceof Date){
		returnDate = kendo.toString(dtObj, oFormat);
	}else{
		returnDate = '';
	}

	return returnDate;
}

/**
 *  입력받은 날짜에 월을 더하여 리턴한다.
 *  @param String 날짜 8자리
 *  @param String 일수
 *  @param String format
 */
function fnGetMonthAdd( str, num, fmt ){

	if( fmt == undefined ) fmt = 'yyyy-MM-dd';

	var d     = str.replace(/-/g,'').replace(/\//g,'');
	var year  = d.substring(0,4);
    var month = d.substring(4,6);
    var day   = d.substring(6,8);

	var dt = new Date(year, month, day);
	    dt.setMonth(dt.getMonth() + num);

	year  = dt.getFullYear();
	month = dt.getMonth().zf(2);
	day   = dt.getDate().zf(2);

	if( month == '0' || month == '00' ){
		month= 12;
		year = year - 1;
	}

	//console.log( 'month : ' + str + ' : +' + num + ' : ' + year +'-'+ month.zf(2) +'-'+ day.zf(2) );

	dt = new Date(year, month-1, day);
	return dt.oFormat( fmt );
}

/**
 * 시작일에서 종료일 이상 날짜를 선택하지 못하게하는 함수
 * @param 시작일 Input Tag ID
 * @param 종료일 Input Tag ID
 */
function fnStartCalChange( sId, eId ) {
	var sd = $('#' + sId).data('kendoDatePicker');
	var ed = $('#' + eId).data('kendoDatePicker');
    var startDate = sd.value();
    var endDate   = ed.value();

    if (startDate) {
        startDate = new Date(startDate);
        startDate.setDate(startDate.getDate());
        ed.min(startDate);
    } else if (endDate) {
        sd.max(new Date(endDate));
    } else {
        endDate = new Date();
        sd.max(endDate);
        ed.min(endDate);
    }
}

/**
 * 종료일에서 시작일 이전 날짜를 선택하지 못하게하는 함수
 * @param 시작일 Input Tag ID
 * @param 종료일 Input Tag ID
 */
function fnEndCalChange( sId, eId ) {
	var sd = $('#' + sId).data('kendoDatePicker');
	var ed = $('#' + eId).data('kendoDatePicker');
	var endDate   = ed.value();
	var startDate = sd.value();


    if (endDate) {
        endDate = new Date(endDate);
        endDate.setDate(endDate.getDate());
        sd.max(endDate);
    } else if (startDate) {
        ed.min(new Date(startDate));
    } else {
        endDate = new Date();
        sd.max(endDate);
        ed.min(endDate);
    }
}

/**
 * 날짜
 * @param {*} e : 켄도데이트피커 change 이벤트 전달 인자
 * @param {string} type : "start" , "end"
 * @param {string} sId 	: 시작일 데이트피커 아이디
 * @param {string} eId : 종료일 데이트피커 아이디
 */
function fnOnChangeDatePicker(e, type, sId, eId) {
	var self = e.sender.element;
	var sd = $('#' + sId).data('kendoDatePicker');
	var ed = $('#' + eId).data('kendoDatePicker');
	var sDate = sd.value();
	var eDate   = ed.value();
	var isValid = true;

	// sDate, eDate 둘중 하나라도 없으면 검사할 필요가 없다.
	if( sDate && eDate ) {
		isValid = fnValidateDatePicker(sDate, eDate);
	}

	if( !isValid ) {
		if( type === "start" ) {
			alert("시작일은 종료일을 초과할 수 없습니다.");
			// sd.value("");
		} else {
			alert("종료일은 시작일보다 빠를수 없습니다.");
			// ed.value("");
		}
		self.data("kendoDatePicker").value("");
		return;
	} 
	fnClearDateController(eId);
}

/**
 * 날짜 + 시간
 * @param {*} e : 켄도데이트피커 change 이벤트 전달 인자
 * @param {string} type : "start" , "end"
 * @param {string} sId 	: 시작일 데이트피커 아이디
 * @param {string} sHour : 시작 시간 타임피커 아이디
 * @param {string} sMin : 시작 분 타임피커 아이디
 * @param {string} eId : 종료일 데이트피커 아이디
 * @param {string} eHour : 종료 시간 타임피커 아이디
 * @param {string} eMin : 종료 분 타임피커 아이디
 */
function fnOnChangeDateTimePicker( e, type, sId, sHour, sMin, eId, eHour, eMin ) {
	var self = e.sender.element;
	var role = self.data("role");

	var sd = $('#' + sId).data("kendoDatePicker");
	var sh = $('#' + sHour).data("kendoDropDownList");
	var sm = $('#' + sMin).data("kendoDropDownList");

	var ed = $('#' + eId).data("kendoDatePicker");
	var eh = $('#' + eHour).data("kendoDropDownList");
	var em = $('#' + eMin).data("kendoDropDownList");
	
	var sDate = sd.value();
	var eDate   = ed.value();
	var isValid = true;

	if( sDate && eDate ) {
		sDate.setHours(sh.value());
		sDate.setMinutes(sm.value());

		eDate.setHours(eh.value());
		eDate.setMinutes(em.value());

		isValid = fnValidateDatePicker(sDate, eDate);
	}

	if( !isValid ) {
		if( type === "start" ) {
			alert("시작일은 종료일을 초과할 수 없습니다.");
		} else {
			alert("종료일은 시작일보다 빠를수 없습니다.");
		}
		
		if( role === "datepicker" ) {
			self.data("kendoDatePicker").value("");
		} else  if( role === "dropdownlist" ) {
			if( type === "start" ) {
				self.data("kendoDropDownList").select(0);
			} else {
				self.data("kendoDropDownList").select(e.sender.dataSource.options.data.length - 1);
			}
		}
		return;
	} 
	fnClearDateController(eId);
}

// 날짜 선택 버튼 초기화
function fnClearDateController(eId) {
	const $parent = $("#" + eId).closest(".datepicker-wrapper");
	const $dateControllerButtons = $parent.find(".date-controller button");

	if( $dateControllerButtons.length ) {
		$dateControllerButtons.each(function() {
			$(this).attr("fb-btn-active", false);
		})
	}
}

// 시작일, 종료일 비교 함수
function fnValidateDatePicker(sDate, eDate) {
	var result = true;

	try {
		sDate = sDate instanceof Date ? sDate : new Date(sDate);
		eDate = eDate instanceof Date ? eDate : new Date(eDate);

		if( sDate.getTime() > eDate.getTime() ) {
			result = false;
		}
	} catch(err) {
		result = false;
	} finally{
		return result;
	}
}

/**
 * 오늘, 어제, 일주일, 15일, 1개월, 2개월, 3개월 기간 검색 함수
 * @param 시작일 Input Tag ID
 * @param 종료일 Input Tag ID
 * @param 날짜타입
 */
function fnTermCalTpA( sid, eid, argv1 ){

	var today = fnGetToday();

	if( argv1 == 'd-1' ){
		$('#' + sid).data('kendoDatePicker').value( fnGetDayMinus( today, 1 ) );
	}else{
		$('#' + sid).data('kendoDatePicker').value( today );
	}

	fnStartCalChange('sdate', 'edate');

	switch( argv1 ){
		case 'd1':
			$('#' + eid).data('kendoDatePicker').value( today );
			break;
		case 'd-1':
			$('#' + eid).data('kendoDatePicker').value( fnGetDayMinus( today, 1 ) );
			break;
		case 'd7':
			$('#' + eid).data('kendoDatePicker').value( fnGetDayAdd( today, 7 ) );
			break;
		case 'd15':
			$('#' + eid).data('kendoDatePicker').value( fnGetDayAdd( today, 15 ) );
			break;
		case 'm1':
			$('#' + eid).data('kendoDatePicker').value( fnGetMonthAdd( today, 1 ) );
			break;
		case 'm2':
			$('#' + eid).data('kendoDatePicker').value( fnGetMonthAdd( today, 2 ) );
			break;
		case 'm3':
			$('#' + eid).data('kendoDatePicker').value( fnGetMonthAdd( today, 3 ) );
			break;
	}

	fnEndCalChange('sdate', 'edate');

	if( $('#' + sid).data('kendoDatePicker').value() == null ){
		fnTermCalTpA( sid, eid, argv1 );
	}

	if( $('#' + eid).data('kendoDatePicker').value() == null ){
		fnTermCalTpA( sid, eid, argv1 );
	}
}

