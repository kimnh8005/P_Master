function fnGetTpl(opt) {
    try {
        if (opt && opt.url) {
            $.cookie('_COOKIE_PAGE_URL', opt.url, {
                path : '/'
            });

            $.ajax({
                type : opt.method ? 'GET' : 'POST',
                dataType : 'html',
                timeout : opt.timeout ? opt.timeout : 300000,
                url : opt.url,
                data : opt.params,
                beforeSend : function(xhr, settings) {
                	xhr.setRequestHeader('authMenuID', CLICKED_MENU_ID);
                    fnOpenLoading()
                },
                success : function(data, status, xhr) {
                    if (data.indexOf('000000400') > -1) {
                        data = JSON.parse(data);

                        if (fnDefCallback(data, opt)) {
                            if (typeof (opt.success) === 'function')
                                opt.success(data.data)
                        }
                    } else {
                        $('#ng-view').html(data)
                    }
                    delete opt
                },
                error : function(xhr, status, strError) {
                    var msg = '';
                    msg += '[[MESSAGE]] \n\n';
                    msg += 'The network is unstable. (' + xhr.readyState + ') \n';
                    msg += 'Please try again. ' + strError + ' \n';
                    delete opt
                }
            })
        }
    } catch (e) {
        console.log(e)
    } finally {
        delete opt;
        fnCloseLoading()
    }
}

/**
 * ajax 요청을 보낼 때, opt.isDupUrl -> "Y", opt.async -> true 로 설정해서 동일 url로 여러 api 요청을 비동기적으로 동시에 보낼 수 있습니다.
 */
function fnAjax(opt) {
    try {
        debugStorage(false);
        if (opt && opt.url && (getItemUrl(opt.url) == 'f' || opt.isDupUrl == 'Y')) {
            setItem(opt.url, 't');
            if (opt.params) {} else {
                opt["params"] = new Object
            }
            $.ajax({
                type : opt.method ? 'GET' : 'POST',
                dataType : 'json',
                contentType: opt.contentType != undefined && opt.contentType !== "" ? opt.contentType : "application/x-www-form-urlencoded; charset=UTF-8",
                timeout : opt.timeout ? opt.timeout : 300000,
                url : opt.url,
                data : ( opt.contentType == 'application/json' ? JSON.stringify(opt.params) : opt.params ),
                processData : opt.processData == undefined ? true : opt.processData,
                async : opt.async == undefined ? true : opt.async,
                beforeSend : function(xhr, settings) {
                	xhr.setRequestHeader('authMenuID', CLICKED_MENU_ID);
                    fnBtnHandler($.extend(opt, {
                        isBtn : false
                    }))
                },
                success : function(data, status, xhr) {
                	setItem(opt.url, 'f');
                    if (fnDefCallback(data, opt)) {
                    	var resultcode = {code:"", message:"", messageEnum:""};
                    	resultcode.code = data.code;
                    	resultcode.message = data.message;
                    	resultcode.messageEnum = data.messageEnum;
                    	data = data.data;
                        if (typeof (opt.success) === 'function') {
                        	if(data == null) {
                        		data = {addFile:""};
                        	}
                            if( opt.params['addFile'] && ! data['addFile'] ) { // fnAjaxSubmit 에서 1차 호출한 파일 업로드 결과 존재시
                                data['addFile'] = JSON.parse(opt.params['addFile']); // 파일 업로드 결과를 ajax 최종 Data 에 포함
                            }
                    	    opt.success(data, resultcode)
                        }
                    }
                    else {
                    	var resultcode = {code:"", message:"", messageEnum:""};
                    	resultcode.code = data.code;
                    	resultcode.message = data.message;
                    	resultcode.messageEnum = data.messageEnum;
                    	data = data.data;
                        if (typeof (opt.fail) === 'function') {
                            if( opt.params['addFile'] && ! data['addFile'] ) { // fnAjaxSubmit 에서 1차 호출한 파일 업로드 결과 존재시
                                data['addFile'] = JSON.parse(opt.params['addFile']); // 파일 업로드 결과를 ajax 최종 Data 에 포함
                            }
                    	    opt.fail(data, resultcode)
                        }
                    }
                    fnBtnHandler($.extend(opt, {
                        isBtn : true
                    }));
                    delete opt
                },
                error : function(xhr, status, strError) {
                    setItem(opt.url, 'f');
                    if (typeof (opt.error) === 'function') {
                        opt.error(xhr, status, strError);  // opt 에 error callBack function 선언된 경우 호출
                    } else {
                        var msg = '[[MESSAGE]] \n\n';
                        msg += 'The network is unstable. (' + xhr.readyState + ') \n';
                        msg += 'Please try again. ' + strError + ' \n'
                    }
                    fnBtnHandler($.extend(opt, {
                        isBtn : true
                    }));
                    delete opt
                }
            })
        }
    } catch (e) {
        console.log(e)
    } finally {
        delete opt
    }
}

function fnBtnHandler(opt) {
    if (opt.isBtn) {
        if (opt.isAction == 'insert') {
            if ($('#fnSave').length > 0)
                $('#fnSave').kendoButton().data("kendoButton").enable(true)
        } else if (opt.isAction == 'update') {
            if ($('#fnSave').length > 0)
                $('#fnSave').kendoButton().data("kendoButton").enable(true)
        } else if (opt.isAction == 'delete') {
            if ($('#fnDel').length > 0)
                $('#fnDel').kendoButton().data("kendoButton").enable(true)
        } else if (opt.isAction == 'fileDelete') {
            if ($('#fileDelete').length > 0)
                $('#fileDelete').kendoButton().data("kendoButton").enable(true);
            if ($('#fileDelete1').length > 0)
                $('#fileDelete1').kendoButton().data("kendoButton").enable(true);
            if ($('#fileDelete2').length > 0)
                $('#fileDelete2').kendoButton().data("kendoButton").enable(true);
            if ($('#fileDelete3').length > 0)
                $('#fileDelete3').kendoButton().data("kendoButton").enable(true)
        } else if (opt.isAction == 'select' || opt.isAction == 'common') {} else {
            console.log('※※※※※※※ 버튼설정(fnAjax > isAction) 추가로 하셔야합니다.');
            if ($('#fnSave').length > 0)
                $('#fnSave').kendoButton().data("kendoButton").enable(true)
        }
    } else {
        if (opt.isAction == 'insert') {
            if ($('#fnSave').length > 0)
                $('#fnSave').kendoButton().data("kendoButton").enable(false)
        } else if (opt.isAction == 'update') {
            if ($('#fnSave').length > 0)
                $('#fnSave').kendoButton().data("kendoButton").enable(false)
        } else if (opt.isAction == 'delete') {
            if ($('#fnDel').length > 0)
                $('#fnDel').kendoButton().data("kendoButton").enable(false)
        } else if (opt.isAction == 'fileDelete') {
            if ($('#fileDelete').length > 0)
                $('#fileDelete').kendoButton().data("kendoButton").enable(false);
            if ($('#fileDelete1').length > 0)
                $('#fileDelete1').kendoButton().data("kendoButton").enable(false);
            if ($('#fileDelete2').length > 0)
                $('#fileDelete2').kendoButton().data("kendoButton").enable(false);
            if ($('#fileDelete3').length > 0)
                $('#fileDelete3').kendoButton().data("kendoButton").enable(false)
        } else if (opt.isAction == 'select' || opt.isAction == 'common') {} else {
            console.log('※※※※※※※ 버튼설정(fnAjax > isAction) 추가로 하셔야합니다.')
        }
    }
}

function fnAjaxSubmit(opt) {
    try {
        var enctype = $('#' + opt.form).attr('enctype');
        if (enctype.indexOf('multipart') >= 0) {
            debugStorage(false);
            if (opt && opt.url && getItemUrl(opt.url) == 'f') {
                setItem(opt.url, 't');
                $('#' + opt.form).ajaxSubmit({
                    dataType : 'json',
                    cache : false,
                    data : {
                        'storageType' : opt.storageType,
                        'domain' : opt.domain,
                    },
                    url : opt.fileUrl == undefined ? '/comn/fileUpload' : '/comn' + opt.fileUrl,
                    contentType : 'application/x-www-form-urlencoded; charset=UTF-8',
                    beforeSend : function(xhr, settings) {
                        fnBtnHandler($.extend(opt, {
                            isBtn : false
                        }))
                    },
                    success : function(data, status, xhr) {
                        setItem(opt.url, 'f');
                        if (fnDefCallback(data, opt)) {
                        	data = data.data;
                            $.extend(opt.params, {
                                'addFile' : kendo.stringify(data['addFile'])
                            });
                            fnAjax({
                                url : opt.url,
                                method : opt.method,
                                params : opt.params,
                                success : opt.success,
                                contentType : opt.contentType ? opt.contentType : '',
                                isBtn : false,
                                isAction : opt.isAction
                            })
                        }
                    }
                })
            }
        }
    } catch (e) {
        console.log(e)
    } finally {
        delete opt
    }
}

function fnDataSourceRead(datasource, data) {
    datasource.read(data)
}

function fnDataSourcePaging(datasource, data) {
    datasource.query(data)
}

function fnJsonToQueryString(json) {
    return '?' + Object.keys(json).map(function(key) {
        return encodeURIComponent(key) + '=' + encodeURIComponent(json[key])
    }).join('&')
}

function fnSearchData(data) {
    var searchData = new Array();
    var subColums;
    $.each(data, function(key, value) {
        subColums = new Object();
        subColums['field'] = key;
        subColums['value'] = String(value).trim();
        searchData.push(subColums)
        //console.log(">>>>> value : " + String(value).trim() + " / " + String(value).trim().length);
    });

    return searchData
}

function fnDefCallback(data, opt) {
    fnCloseLoading();
    if (data.code == '0000' || data.code == '000010000') {
        return true
    }

	if (data.code.indexOf("LOCAL_DEFINE_") > -1) { //"LOCAL_DEFINE_"로 시작하는 code는 페이지에서 처리하도록 한다.
	    return false
	}

    switch (data.code) {
    case 'URL_AUTH_FAIL': //URL 권한 없을떄
    	fnKendoMessage({ message : 'URL 권한이 없습니다 - ' + opt.url });
    	break;
    case 'NEED_LOGIN' :			//비로그인 상태
    	fnKendoMessage({
            message : fnGetLangData({
                key : data.message,
                nullMsg : data.message
            }),
            ok : function(e) {
            	try {
            		parent.location.href = 'admVerify.html'
                } catch (e) {
                    location.href = 'admVerify.html'
                }
            }
        });
        break;
    case '0001' :			//비로그인 상태
    	fnKendoMessage({
            message : fnGetLangData({
                key : data.message,
                nullMsg : data.message
            }),
            ok : function(e) {
            	try {
            		parent.location.href = 'admVerify.html'
                } catch (e) {
                    location.href = 'admVerify.html'
                }
            }
        });
        break;
    case '000000400':
        alert(data.message);
        try {
            parent.document.location.href = '/view/login.json'
        } catch (e) {
            location.href = '/view/login.json'
        }
        break;
    case '5519':
    case '5816':
        fnKendoMessage({
            message : fnGetLangData({
                key : data.message,
                nullMsg : data.message
            }),
            ok : function(e) {
                $.ajax({
                    url : "/comn/ur/login/logOut",
                    success : function(data) {
                        location.href = 'admVerify.html'
                    }
                })
            }
        });
        break;
    case '6666':
        fnKendoMessage({
            message : fnGetLangData({
                key : data.message,
                nullMsg : data.message
            }),
            ok : function(e) {
                location.href = '#/desPersInfoAdd'
            }
        });
        break;
    case 'DUPLICATE_DATA_DO_REFRESH':
    	fnKendoMessage({
            message : fnGetLangData({
                key : data.message,
                nullMsg : data.message
            }),
            ok : function(e) {
            	opt.refreshGrid.read();
            }
        });
        break;
    default:
        console.log(data.code, data.message);
        fnKendoMessage({
            message : fnGetLangData({
                key : data.code,
                nullMsg : data.message
            })
        });
        break
    }
    return false
}

function fnExcelDownload(_url, _jsonData, btnObj) {
    if (true) { // confirm("엑셀 파일을 다운로드 합니다.")

        var xhr = new XMLHttpRequest();
        xhr.onreadystatechange = function() {

            fnOpenLoading();

            if (this.readyState == 4 && this.status == 200) {

                var _data = this.response;
                var _blob = new Blob([ _data ], {
                    type : 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
                });

                var fileName = decodeURIComponent(decodeURI( //
                        xhr.getResponseHeader("file-name") //
                    ).replace(/\+/g, " ") // 파일명에서 공백이 + 로 표시 : " " 으로 replace 처리
                );
                var link = document.createElement('a');
                link.href = window.URL.createObjectURL(_blob);
                link.download = fileName;
                link.click();

                fnCloseLoading();

            } else {
                fnCloseLoading();
            }

        };

        // 엑셀다운로드 버튼 비활성화
        if(fnNvl(btnObj) != '') {
            $(btnObj).prop('disabled', true);
        }

        xhr.open('POST', _url);
        xhr.responseType = 'blob';
        xhr.setRequestHeader('Content-type', 'application/json');
        xhr.setRequestHeader('authMenuID', CLICKED_MENU_ID);
        xhr.send(JSON.stringify(_jsonData));
        xhr.onloadend = function() {
            // 엑셀다운로드 버튼 활성화
            if(fnNvl(btnObj) != '') {
                $(btnObj).prop('disabled', false);
            }
        };

    };
}

function fnGetPublicStorageUrl() {  // 로컬/개발 등 각 서버 환경에서 public 저장소 접근 url 호출/반환

    var publicStorageUrl;

    $.ajax({
        type : 'GET',
        dataType : 'json',
        url : '/comn/getPublicStorageUrl',
        async : false,
        beforeSend : function(xhr, settings) {
            fnOpenLoading();
        },
        success : function(data, status, xhr) {
            data = data.data;

            fnCloseLoading();
            publicStorageUrl = data['publicStorageUrl'];
        },
        error : function(xhr, status, strError) {
            fnCloseLoading();
            return null;
        }
    });

    return publicStorageUrl;
}


function fnDownloadPublicFile(opt) {  // Public 저장소의 파일 다운로드

    var filePath = opt.filePath; // 다운로드할 파일의 하위 경로
    var physicalFileName = opt.physicalFileName; // 업로드시 저장된 물리적 파일명
    var originalFileName = opt.originalFileName; // 원본 파일명 또는 다운로드시 지정할 파일명

    // 파일 다운로드시 Response Header 에 인코딩된 파일명을 지정하는 Key 값
    var downloadFileNameResponseHeaderKey = 'file-name';

    var downloadUrl = '/comn/fileDownload'; // 파일 다운로드 API

    downloadUrl += '?' + 'filePath' + '=' + filePath;
    downloadUrl += '&' + 'physicalFileName' + '=' + physicalFileName;
    downloadUrl += '&' + 'originalFileName' + '=' + originalFileName;

    var xhr = new XMLHttpRequest();

    xhr.onreadystatechange = function() {  // 요청에 대한 콜백

        if (xhr.readyState === xhr.DONE) { // 요청 완료시

            // 다운로드 완료시 서버에서 전달한 파일명
            var downloadFileName = decodeURIComponent( //
                    decodeURI( //
                            xhr.getResponseHeader(downloadFileNameResponseHeaderKey) //
                    ) //
                    .replace(/\+/g, " ") // 파일명에서 공백이 + 로 표시 : " " 으로 replace 처리
            );

            if( xhr.status === 200 || xhr.status === 201 ) { // 다운로드 성공

                if (typeof window.navigator.msSaveBlob !== 'undefined') { // IE 사용시

                    window.navigator.msSaveBlob(xhr.response, downloadFileName);

                } else {

                    var a = document.createElement('a');

                    a.href = window.URL.createObjectURL(xhr.response);
                    a.download = downloadFileName;
                    a.style.display = 'none';

                    document.body.appendChild(a);
                    a.click();

                }

            } else { // 다운로드 실패

                var reader = new FileReader();

                reader.addEventListener('loadend', (e) => {
                    var errorMessage = JSON.parse(e.srcElement['result']);
                    console.log(errorMessage);
                });

                reader.readAsText(xhr.response);

            }

        }

    } // xhr.onreadystatechange end

    xhr.open('GET', downloadUrl);
    xhr.responseType = 'blob';
    xhr.send();

}


function fnDeletePublicFile(opt) {  // Public 저장소의 파일 삭제

    var filePath = opt.filePath; // 삭제할 파일의 하위 경로
    var physicalFileName = opt.physicalFileName; // 업로드시 저장된 물리적 파일명

    var deleteUrl = '/comn/fileDelete'; // 파일 삭제 API

    deleteUrl += '?' + 'filePath' + '=' + filePath;
    deleteUrl += '&' + 'physicalFileName' + '=' + physicalFileName;

    var xhr = new XMLHttpRequest();

    xhr.onreadystatechange = function() {  // 요청에 대한 콜백

        if (xhr.readyState === xhr.DONE) { // 요청 완료시

            if( xhr.status === 200 || xhr.status === 201 ) { // 파일 삭제 성공

                console.log(xhr.response);

            } else { // 파일 삭제 실패

                var reader = new FileReader();

                reader.addEventListener('loadend', (e) => {
                    var errorMessage = JSON.parse(e.srcElement['result']);
                    console.log(errorMessage);
                });

                reader.readAsText(xhr.response);

            }

        }

    } // xhr.onreadystatechange end

    xhr.open('DELETE', deleteUrl);
    xhr.responseType = 'blob';
    xhr.send();

}


function fnGetServerUrl() {  // 로컬/개발 등 각 서버 환경에서 동일 레벨 서버 URL 반환

	var serverUrlObj = new Object();

    var bosUrl;
    var mallUrl;
    var imageUrl;

    $.ajax({
        type : 'GET',
        dataType : 'json',
        url : '/comn/getServerUrl',
        async : false,
        beforeSend : function(xhr, settings) {
            fnOpenLoading();
        },
        success : function(data, status, xhr) {
            data = data.data;

            fnCloseLoading();
            serverUrlObj.bosUrl = data.bosUrl;
            serverUrlObj.mallUrl = data.mallUrl;
            serverUrlObj.imageUrl = data.imageUrl;
        },
        error : function(xhr, status, strError) {
            fnCloseLoading();
            return null;
        }
    });

    return serverUrlObj;
}