var OPER_TP_CODE = 'N';
$.extend($.validator.messages, {
	required : '필수 입력입니다.',
	remote : '을(를) 수정 해주세요.',
	email : '을(를) 올바른 이메일 주소로 입력하세요.',
	url : '을(를) 올바른 URL 형식으로 입력하세요.',
	date : '을(를) 올바른 날짜 형식으로 입력하세요.',
	dateISO : '을(를) ISO 형식에 맞는 날짜로 입력하세요.',
	number : '은(는) 숫자만 입력하세요.',
	digits : '은(는) 숫자(digits)만 입력하세요.',
	creditcard : '을(를) 올바른 신용카드 번호로 입력하세요.',
	equalTo : ' : 값이 서로 다릅니다.',
	accept : '을(를) 동의해 주세요.',
	maxlength : $.validator.format('을(를) {0}글자 이하로 입력하세요.'),
	minlength : $.validator.format('을(를) 적어도 {0}글자 이상 입력하세요.'),
	rangelength : $.validator.format('을(를) {0}글자 이상 {1}글자 이하로 입력하세요.'),
	max : $.validator.format('을(를) {0} 이하로 입력하세요.'),
	min : $.validator.format('을(를) {0} 이상으로 입력하세요.'),
	range : $.validator.format('을(를) {0}에서 {1} 사이의 값을 입력하세요.')
});
(function($) {
	$.validator.setDefaults({
		onsubmit : true,
		onkeyup : false,
		onfocusout : false,
		ignore : [],
		showErrors : function(errorMap, errorList) {
			if (this.numberOfInvalids()) {

				var caption = "";
				const $currentElement = $(errorList[0].element);
				let message = errorList[0].message;

				if ($currentElement.attr('title')) {
					caption = $currentElement.data('title')
				} else if ($currentElement.attr('alert')) {
					caption = $currentElement.data('alert')
				} else if ($currentElement.attr("data-validate-title")){
					caption = $currentElement.data("validate-title")
				} else if ($("label[for='" + errorList[0].element.id + "']").text()) {
					caption = $("label[for='" + errorList[0].element.id + "']").text()
				}

				if (caption == "") {
					caption = $currentElement.closest("td").prev('th').find('label').text()
				}

				if($currentElement.attr("data-validate-message")){
					message = $currentElement.data("validate-message");
				}

				fnKendoMessage({
					// message : '<p>' + '<span style=\'color: red;font-size: 9pt;font-weight: bolder;\'>[' + caption + '] </span>' + errorList[0].message + '<p>',
					message : '<p>' + '<span style=\'color: red;font-size: 9pt;font-weight: bolder;\'>[' + caption + '] </span>' + message + '<p>',
					ok : function(e) {
						// $('#' + errorList[0].element.id).focus()
						errorList[0].element.focus();
					}
				})
			}
		}
	})
})(jQuery);
$.fn.formSerialize = function(valid) {
	var params = {};
	try {
		if (valid) {
			$(this).find('input, textarea, select, radio, checkbox').each(function(index, rows) {
				try {
					if (!$(rows).valid()) {
						return params['rtnValid'] = false
					} else {
						params['rtnValid'] = true
					}
				} catch(e) {
					params['rtnValid'] = true
				}
			})
		}
		$(this).find('input, textarea, select, radio, checkbox').each(function() {
			var formID = $((this).form).attr('id');
			if ($(this).is("textarea")) {
				params[$(this).attr('name')] = $(this).val()
			}
			switch($(this).attr('type')) {
			case'text':
				var kdObj;
				if ($(this).data('role') == 'dropdownlist') {
					kdObj = $(this).data("kendoDropDownList");
					params[$(this).attr('name')] = this.value
				} else if ($(this).data('role') == 'datepicker') {
					kdObj = $(this).data("kendoDatePicker");
					if (kdObj != undefined) {
						params[$(this).attr('name')] = fnFormatDate(this.value, 'yyyyMMdd')
					} else {
						params[$(this).attr('name')] = fnFormatDate(this.value, 'yyyyMMdd')
					}
				} else if ($(this).data('role') == 'maskedtextbox') {
					kdObj = $(this).data("kendoMaskedTextBox");
					params[$(this).attr('name')] = this.value.replace(/-/g, '')
				} else if ($(this).data('role') == 'money2') {
					params[$(this).attr('name')] = this.value.replace(/,/g, '')
				} else {
					params[$(this).attr('name')] = $(this).val()
				}
				break;
			case'password':
				params[$(this).attr('name')] = $(this).val();
				break;
			case'hidden':
				params[$(this).attr('name')] = $(this).val();
				break;
			case'textarea':
				params[$(this).attr('name')] = $(this).val();
				break;
			case'radio':
				var val = $('#' + formID + ' :radio[name="' + $(this).attr("name") + '"]:checked').val();
				params[$(this).attr('name')] = (val == null) ? '' : val;
				break;
			case'select':
				params[$(this).attr('name')] = $(this).val();
				break;
			case'checkbox':
				var value = "";
				$('form[id=' + formID + '] :checkbox[name=' + $(this).attr("name") + ']:checked').each(function() {
					value += $(this).val() + "∀"
				});
				if (value == null)
					value = "";
				value = value.substring(0, value.length - 1);
				params[$(this).attr("name")] = value;
				break
			}
		});
		return params
	} catch(e) {
		return params['jsErrMsg'] = e.toString()
	} finally {
		params = {}
	}
};
$.fn.bindingForm = function(data, schema) {
	try {
		return this.each(function() {
			if (data[schema] == null)
				return;
			if (data[schema].length <= 0)
				return;
			OPER_TP_CODE = 'U';

			$(this).find('input, textarea, select, radio, checkbox').each(function() {
				var formID = $((this).form).attr('id');
				try {
					if ($(this).is("textarea")) {
						if ($(this).data('role') == "editor") {
							kdObj = $(this).data("kendoEditor");
							kdObj.value(fnTagConvert(data[schema][$(this).attr('name')]))
						} else {
							if(data[schema][$(this).attr('name')] != undefined){
								$(this).val(data[schema][$(this).attr('name')])
							}
						}
					}
					switch($(this).attr('type')) {
					case'text':
						var id = $(this).attr('id');
						var kdObj = null;
						if ($(this).data('role') == 'dropdownlist') {
							kdObj = $(this).data("kendoDropDownList");
							kdObj.value(data[schema][$(this).attr('name')])
						} else if ($(this).data('role') == 'datepicker') {
							kdObj = $(this).data("kendoDatePicker");
							if (kdObj !== undefined) {
								if(data[schema][$(this).attr('name')] != undefined){
									kdObj.value(fnFormatDate(data[schema][$(this).attr('name')], 'yyyy-MM-dd'))
								}
							} else {
								if(data[schema][$(this).attr('name')] != undefined){
									$(this).val(fnFormatDate(data[schema][$(this).attr('name')], 'yyyy-MM-dd'))
								}
							}
						} else if ($(this).data('role') == 'maskedtextbox') {
							$(this).data("kendoMaskedTextBox").value(data[schema][$(this).attr('name')])
						} else if ($(this).data('role') == 'money') {
							$(this).val(data[schema][$(this).attr('name')]);
							$(this).trigger('blur')
						} else if ($(this).data('role') == 'file-attach') {
							$(this).data("kendoAutoComplete").value(objJson[schema][$(this).attr("name")])
						} else {
							if (data[schema][$(this).attr('name')] !== undefined) {
								$(this).val(data[schema][$(this).attr('name')]);
								if ($(this).attr('data-key') == 'true') {
									$(this).attr('readonly', true);
									$(this).attr('disabled', true);
									$(this).addClass('disabled')
								}
							}
						}
						break;
					case'password':
						$(this).val(data[schema][$(this).attr('name')]);
						if ($(this).attr('data-key') == 'true') {
							$(this).attr('readonly', true);
							$(this).addClass('disabled')
						}
						break;
					case'hidden':
						if (data[schema][$(this).attr('name')] !== undefined) {
							$(this).val(data[schema][$(this).attr('name')])
						}
						break;
					case'radio':
						$('#' + formID + ' input:radio[name=' + $(this).attr('name') + ']:input[value="' + data[schema][$(this).attr('name')] + '"]').prop('checked', true);
						if ($(this).attr('data-key') == 'true') {
							$(this).attr('readonly', true);
							$(this).addClass('disabled')
						}
						break;
					case'checkbox':
						var jbString = data[schema][$(this).attr("name")];
						if ( typeof jbString == 'string') {
							var jbSplit = jbString.split('∀');
							for (var i = 0; i < jbSplit.length; i++) {
								if (jbSplit[i]) {
									$('#' + formID + ' input:checkbox[name=' + $(this).attr('name') + ']:input[value="' + jbSplit[i] + '"]').prop('checked', true);
								}
							}
						} else if ( typeof jbString == 'number') {
							$('#' + formID + ' input:checkbox[name=' + $(this).attr('name') + ']:input[value="' + jbString + '"]').prop('checked', true);
						}
						if ($(this).attr('data-key') == 'true') {
							$(this).attr('readonly', true);
							$(this).addClass('disabled')
						}
						break;
					case'select':
						$(this).val(data[schema][$(this).attr('name')]);
						if ($(this).attr('data-key') == 'true') {
							$(this).attr('readonly', true);
							$(this).addClass('disabled')
						}
						break
					}
				} catch(e) {
					console.log(e)
				}
			});
			if ($('#fnSearch').length > 0)
				$('#fnSearch').kendoButton().data("kendoButton").enable(true);
			if ($('#fnNew').length > 0)
				$('#fnNew').kendoButton().data("kendoButton").enable(true);
			if ($('#fnClear').length > 0)
				$('#fnClear').kendoButton().data("kendoButton").enable(true);
			if ($('#fnSave').length > 0)
				$('#fnSave').kendoButton().data("kendoButton").enable(true);
			if ($('#fnDel').length > 0)
				$('#fnDel').kendoButton().data("kendoButton").enable(true)
		})
	} catch(e) {
		console.log(e)
	} finally {
		delete data
	}
};
$.fn.formClear = function(argv) {
	return this.each(function() {
		$(this).find('input, textarea, select, radio, checkbox').each(function() {
			var formID = $((this).form).attr('id');
			if ($(this).is("textarea")) {
				$(this).val('')
			}
			switch($(this).attr('type')) {
			case'text':
				var id = $(this).attr('id');
				if ($(this).data('role') == 'dropdownlist') {
					var kdObj = $(this).data("kendoDropDownList");
					kdObj.select(0)
				} else if ($(this).data('role') == 'datepicker') {
					var kdObj = $(this).data("kendoDatePicker");

					if($(this).data("default") == 'startDate'){
						$(this).val(fnGetDayMinus(fnGetToday(),6))
					}else if($(this).data("default") == 'endDate'){
						$(this).val(fnGetToday())
					}else if (kdObj != undefined) {
						kdObj.value('')
					}else {
						$(this).val('')
					}
				} else if ($(this).data('role') == 'money' || $(this).data('role') == 'onlyNum') {
					$(this).val('')
				} else if ($(this).attr("role") == "combobox") {
					return true;
				} else {
					$(this).val('');
					if ($(this).attr('data-key') == 'true') {
						$(this).attr('readonly', false);
						$(this).attr('disabled', false);
						$(this).removeClass('disabled')
					}
				}
				break;
			case'password':
				$(this).val('');
				if ($(this).attr('data-key') == 'true') {
					$(this).attr('readonly', false);
					$(this).removeClass('disabled')
				}
				break;
			case'textarea':
				if ($(this).data('role') == "editor") {
					$(this).data("kendoEditor").value('')
				} else {
					$(this).val('')
				}
				break;
			case'radio':
				$('#' + formID + ' input[name=' + $(this).attr('name') + ']:checked').attr('checked', false);
				$('#' + formID + ' input[name=' + $(this).attr('name') + ']').each(function(idx) {
					if (idx == 0)
						this.checked = true
				});
				if ($(this).attr('data-key') == 'true') {
					$(this).attr('readonly', false);
					$(this).removeClass('disabled')
				}
				break;
			case'checkbox':
				$('input:checkbox[name=' + $(this).attr('name') + ']:checked').attr('checked', false);
				if ($(this).attr('data-key') == 'true') {
					$(this).attr('readonly', false);
					$(this).removeClass('disabled')
				}
				break;
			case'select':
				if ( $(this).data("role") == "combobox" ) {
					var kdObj = $(this).data("kendoComboBox");
					kdObj.select(0)
				} else {
					$(this).val('');
				}
				break;
			case'hidden':
				if ($(this).attr('data-fix') != 'true' || $(this).attr('data-fix') == undefined) {
					$(this).val('')
				}
				break
			}
		});
		if ($('#fnSearch').length > 0)
			$('#fnSearch').kendoButton().data("kendoButton").enable(true);
		if ($('#fnNew').length > 0)
			$('#fnNew').kendoButton().data("kendoButton").enable(true);
		if ($('#fnClear').length > 0)
			$('#fnClear').kendoButton().data("kendoButton").enable(true);
		if (argv == undefined)
			argv = false;
		if ($('#fnSave').length > 0)
			$('#fnSave').kendoButton().data("kendoButton").enable(argv);
		if ($('#fnDel').length > 0)
			$('#fnDel').kendoButton().data("kendoButton").enable(false);
			fbClearTimePicker($(this));
		OPER_TP_CODE = 'N'
	})
};
$.fn.enterTab = function(opt) {
	var settings = $.extend({
		'target' : '',
		'search' : false,
		'custmFn' : ''
	}, opt);
	$(this).on('keydown', 'input, select, textarea, span.k-dropdown', function(e) {
		var self = $(this), form = self.parents('form:eq(0)'), focusable, next;
		if (e.keyCode == 13) {
			focusable = form.find('input,a,select,button,textarea, span.k-dropdown').filter(':visible');
			next = focusable.eq(focusable.index(this) + 1);
			if (self[0].nodeName == 'TEXTAREA') {
				if (e.keyCode == 13 && e.ctrlKey) {
					if (next.length) {
						next.focus()
					} else {
						if (settings.target != '') {
							focusable = $('#' + settings.target).eq(0).find('input,a,select,button,textarea').filter(':visible');
							nextNodeID = focusable.eq(0).attr('id');
							$('#' + nextNodeID, '#' + settings.target).focus()
						} else if (settings.search) {
							$('#fnSearch').trigger('click')
						} else if (settings.custmFn) {
							$('#' + settings.custmFn).trigger('click')
						}
					}
				}
			} else {
				if (next.length) {
					next.focus();
					if (next.find('input').data('role') == 'dropdownlist') {
						$('#' + next.find('input').attr('id')).trigger('click')
					}
				} else {
					if (settings.target != '') {
						focusable = $('#' + settings.target).eq(0).find('input,a,select,button,textarea').filter(':visible');
						nextNodeID = focusable.eq(0).attr('id');
						$('#' + nextNodeID, '#' + settings.target).focus()
					} else if (settings.search) {
						$('#fnSearch').trigger('click')
					} else if (settings.custmFn) {
						$('#' + settings.custmFn).trigger('click')
					}
				}
			}
		}
	})
};
$(document).keydown(function(e) {
	var code = e.which ? e.which : e.keyCode;
	if (code == 113) {
		$('#fnSearch').trigger('click')
	} else if (code == 115) {
	} else if (code == 117) {
	} else {
	}
});
$(document).on('keydown', 'input[data-role="onlyNum"], input[data-role="money"]', function(e) {
	var e1 = event;
	e1 = (e1) ? e1 : window.event;
	var charCode = (e1.which) ? e1.which : e1.keyCode;
	if ($(this).data('role') == 'onlyNum' || $(this).data('role') == 'money') {
		if ((charCode >= 48 && charCode <= 57) || (charCode >= 96 && charCode <= 105) || charCode == 8 || charCode == 46 || charCode == 37 || charCode == 39)
			return true;
		else
			return false
	}
});
function fnSetOnlyNum(opt) {
	var $tagId = $('#' + opt.id);
	$tagId.attr('data-role', 'onlyNum')
}

function fnSetMoney(opt) {
	fnSetOnlyNum(opt);
	var $tagId = $('#' + opt.id);
	$tagId.attr('data-role', 'money');
	$tagId.css('text-align', 'right');
	if ($.trim($tagId.val()) == '') {
		$tagId.val('0')
	} else {
		$tagId.val(kendo.toString(kendo.parseFloat($tagId.val()), "n0"))
	}
	$tagId.bind('focus', function(e) {
		$tagId.val(kendo.parseFloat($tagId.val()))
	});
	$tagId.bind('blur', function(e) {
		$tagId.val(kendo.toString(kendo.parseFloat($tagId.val()), "n0"))
	})
}

function fnUpdateGrid(data, objGrid, schema) {
	$(objGrid).assignUpdateGrid(data, schema)
}
$.fn.assignUpdateGrid = function(objJson, schema) {
	var $grid = $(this).data('kendoGrid');
	if ($grid) {
		var rowIndex = $grid.select().index();
		var cols = $grid.columns;
		var data = $grid.dataItem($grid.select());
		for (var i = 0; i < cols.length; i++)
			if (cols[i].field != null) {
				data.set(cols[i].field, objJson[schema][cols[i].field])
			}
		$grid.select($(this).find("tbody>tr:eq(" + rowIndex + ")"))
	}
	objJson = null
};
$.fn.getRadioVal = function() {
	var thisId = $(this).attr('id');
	return $('#' + thisId).find('input[type=radio]:checked').val()
};
function fnStringToDate(date, dateformat) {
	if (date) {
		var newdate = kendo.parseDate(date, 'yyyyMMdd');
		try {
			if (dateformat) {
				if (dateformat == 'yyyyMMdd') {
					return kendo.toString(newdate, "yyyy-MM-dd")
				} else if (dateformat == 'yyMMdd') {
					return kendo.toString(newdate, "yyyy-MM-dd")
				} else if (dateformat == 'MMdd') {
					return kendo.toString(newdate, "yyyy-MM-dd")
				} else if (dateformat == 'yyyyMM') {
					return kendo.toString(newdate, "yyyy-MM-dd")
				} else if (dateformat == 'yyMM') {
					return kendo.toString(newdate, 'MMdd')
				}
			} else {
				return kendo.toString(newdate, "yyyy-MM-dd")
			}
		} finally {
			newdate = null
		}
	} else {
		return ''
	}
}

function fnGetWeekDay(obj) {
	if (obj.mode) {
	} else {
		switch(obj.code) {
		case"0":
			return fnGetLangData({
				key : "4753",
				nullMsg : '일요일'
			});
			break;
		case"1":
			return fnGetLangData({
				key : "4747",
				nullMsg : '월요일'
			});
			break;
		case"2":
			return fnGetLangData({
				key : "4748",
				nullMsg : '화요일'
			});
			break;
		case"3":
			return fnGetLangData({
				key : "4749",
				nullMsg : '수요일'
			});
			break;
		case"4":
			return fnGetLangData({
				key : "4750",
				nullMsg : '목요일'
			});
			break;
		case"5":
			return fnGetLangData({
				key : "4751",
				nullMsg : '금요일'
			});
			break;
		case"6":
			return fnGetLangData({
				key : "4752",
				nullMsg : '토요일'
			});
			break
		}
	}
}

function SHA256(s) {
	var chrsz = 8;
	var hexcase = 0;
	function safe_add(x, y) {
		var lsw = (x & 0xFFFF) + (y & 0xFFFF);
		var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
		return (msw << 16) | (lsw & 0xFFFF)
	}

	function S(X, n) {
		return (X >>> n) | (X << (32 - n))
	}

	function R(X, n) {
		return (X >>> n)
	}

	function Ch(x, y, z) {
		return ((x & y) ^ ((~x) & z))
	}

	function Maj(x, y, z) {
		return ((x & y) ^ (x & z) ^ (y & z))
	}

	function Sigma0256(x) {
		return (S(x, 2) ^ S(x, 13) ^ S(x, 22))
	}

	function Sigma1256(x) {
		return (S(x, 6) ^ S(x, 11) ^ S(x, 25))
	}

	function Gamma0256(x) {
		return (S(x, 7) ^ S(x, 18) ^ R(x, 3))
	}

	function Gamma1256(x) {
		return (S(x, 17) ^ S(x, 19) ^ R(x, 10))
	}

	function core_sha256(m, l) {
		var K = new Array(0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5, 0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5, 0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3, 0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174, 0xE49B69C1, 0xEFBE4786, 0xFC19DC6, 0x240CA1CC, 0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA, 0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7, 0xC6E00BF3, 0xD5A79147, 0x6CA6351, 0x14292967, 0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13, 0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85, 0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3, 0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070, 0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5, 0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3, 0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208, 0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2);
		var HASH = new Array(0x6A09E667, 0xBB67AE85, 0x3C6EF372, 0xA54FF53A, 0x510E527F, 0x9B05688C, 0x1F83D9AB, 0x5BE0CD19);
		var W = new Array(64);
		var a, b, c, d, e, f, g, h, i, j;
		var T1, T2;
		m[l >> 5] |= 0x80 << (24 - l % 32);
		m[((l + 64 >> 9) << 4) + 15] = l;
		for (var i = 0; i < m.length; i += 16) {
			a = HASH[0];
			b = HASH[1];
			c = HASH[2];
			d = HASH[3];
			e = HASH[4];
			f = HASH[5];
			g = HASH[6];
			h = HASH[7];
			for (var j = 0; j < 64; j++) {
				if (j < 16)
					W[j] = m[j + i];
				else
					W[j] = safe_add(safe_add(safe_add(Gamma1256(W[j - 2]), W[j - 7]), Gamma0256(W[j - 15])), W[j - 16]);
				T1 = safe_add(safe_add(safe_add(safe_add(h, Sigma1256(e)), Ch(e, f, g)), K[j]), W[j]);
				T2 = safe_add(Sigma0256(a), Maj(a, b, c));
				h = g;
				g = f;
				f = e;
				e = safe_add(d, T1);
				d = c;
				c = b;
				b = a;
				a = safe_add(T1, T2)
			}
			HASH[0] = safe_add(a, HASH[0]);
			HASH[1] = safe_add(b, HASH[1]);
			HASH[2] = safe_add(c, HASH[2]);
			HASH[3] = safe_add(d, HASH[3]);
			HASH[4] = safe_add(e, HASH[4]);
			HASH[5] = safe_add(f, HASH[5]);
			HASH[6] = safe_add(g, HASH[6]);
			HASH[7] = safe_add(h, HASH[7])
		}
		return HASH
	}

	function str2binb(str) {
		var bin = Array();
		var mask = (1 << chrsz) - 1;
		for (var i = 0; i < str.length * chrsz; i += chrsz) {
			bin[i >> 5] |= (str.charCodeAt(i / chrsz) & mask) << (24 - i % 32)
		}
		return bin
	}

	function Utf8Encode(string) {
		string = string.replace(/\r\n/g, "\n");
		var utftext = "";
		for (var n = 0; n < string.length; n++) {
			var c = string.charCodeAt(n);
			if (c < 128) {
				utftext += String.fromCharCode(c)
			} else if ((c > 127) && (c < 2048)) {
				utftext += String.fromCharCode((c >> 6) | 192);
				utftext += String.fromCharCode((c & 63) | 128)
			} else {
				utftext += String.fromCharCode((c >> 12) | 224);
				utftext += String.fromCharCode(((c >> 6) & 63) | 128);
				utftext += String.fromCharCode((c & 63) | 128)
			}
		}
		return utftext
	}

	function binb2hex(binarray) {
		var hex_tab = hexcase ? "0123456789ABCDEF" : "0123456789abcdef";
		var str = "";
		for (var i = 0; i < binarray.length * 4; i++) {
			str += hex_tab.charAt((binarray[i >> 2] >> ((3 - i % 4) * 8 + 4)) & 0xF) + hex_tab.charAt((binarray[i >> 2] >> ((3 - i % 4) * 8)) & 0xF)
		}
		return str
	}

	s = Utf8Encode(s);
	return binb2hex(core_sha256(str2binb(s), s.length * chrsz))
}

/**
 * 바이트수 반환
 */
function byteCheck(el){
    var codeByte = 0;
    for (var idx = 0; idx < el.length; idx++) {
        var oneChar = escape(el.charAt(idx));
        if ( oneChar.length == 1 ) {
            codeByte ++;
        } else if (oneChar.indexOf("%u") != -1) {
            codeByte += 2;
        } else if (oneChar.indexOf("%") != -1) {
            codeByte ++;
        }
    }
    return codeByte;
}

/**
 * Element안에 있는 태그 disable/enable 함수
 * @param {*} toggle : true/false
 */
$.fn.toggleDisableInTag = function(toggle){

	const $el = $(this).find("input, textarea, button, select");

	$el.each(function(){
		const self = $(this);
		if(self.data("role")) {
			const _role = self.data("role").toLowerCase();
			let kendoObj = null;

			switch(_role) {
				case  "dropdownlist":
					kendoObj = self.data("kendoDropDownList");
					break;
				case "datepicker":
					kendoObj = self.data("kendoDatePicker");
					break;
				case "maskedtextbox":
					kendoObj = self.data("kendoMaskedTextBox");
					break;
				case "editor":
					kendoObj = self.data("kendoEditor");
					break;
				case "upload":
          kendoObj = self.data("kendoUpload");
          break;
				default :
				break;
			}

			// kendo Object가 있을 경우에만 enable 함수 실행 (2021.02.02 김승우M)
			if( kendoObj ) {
	      kendoObj.enable(!toggle);
			}

		} else {
			self.prop("disabled", toggle);
		}
	})
}