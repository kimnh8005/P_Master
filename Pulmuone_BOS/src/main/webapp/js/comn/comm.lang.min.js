
/**
 * 비동기 사용자 함수
 * @param opt
 *
 * opt.method : 전송방식 기본값 POST (생략가능)
 * opt.url    : 서버호출 URL
 * opt.timeout: 타임아웃 시간 기본값 30초 (생략가능)
 * opt.params : 서버전달 파라미터
 * opt.success: 입력/수정/삭제 성공 후 호출해야할 콜백함수 입력. 특이사항이 아니면 함수명은 변경하지 않고 사용한다.
 */
var LANG_CODE = 'kr';
var LANG_DATA = new Object();
var insertMsgYN ="N";
var curPageId ="";
var lnagArray = new Array();
var PG_SESSION;
var PG_AUTH;
var PG_ID = "";
function fnTranslate(param){
//	$('#ng-view [msg-key]').each (function (index){
//		var strTr = LANG_DATA[$(this).attr ('msg-key')];
//		if(strTr){
//			strTr = strTr.replace(/&amp;/g, '&')
//			     .replace(/&gt;/g, '>')
//			     .replace(/&lt;/g, '<')
//			     .replace(/&quot;/g, '"')
//			     .replace(/&#39;/g, '\'');
//		}
//		$(this).html(strTr);
//	   /*
//	   if(strTr){
//				   $(this).text(strTr);
//			   }else{
//				   $(this).text("다국어작업 필요");
//		 }
//		 */
//
//	});
//
//	if(insertMsgYN =="Y"){
//		var dataArray = new Array();
//		$('#ng-view [msg-key]').each (function (index){
//			var strTr = LANG_DATA[$(this).attr ('msg-key')];
//			if(strTr ===undefined){
//				var obj = new Object();
//				obj["GB_DIC_MST_ID"] =$(this).attr ('msg-key');
//				LANG_DATA[$(this).attr ('msg-key')] = strTr;
//				dataArray.push(obj);
//			}
//		});
//		var paramArray = $.merge( dataArray, lnagArray );
//		if(paramArray.length > 0 ){
//			fnAjax({
//				url     : '/comn/insertPageMsgKey',
//				params  : { insertArray : kendo.stringify( paramArray ), PG_ID:PG_ID},
//				success : function(){
//					lnagArray = new Array();
//				}
//			});
//		}
//	}

	fnCloseLoading();
}
function fnSetLangJson(jsdata){
	LANG_DATA = jsdata;
}
function fnGetLangJson(jsdata){
	return LANG_DATA;
}
function fnGetLangData(opt){
//	if(insertMsgYN =="Y"){
//		var strTr =LANG_DATA[opt.key];
//		if(strTr ===undefined){
//			var obj = new Object();
//			obj["GB_DIC_MST_ID"] =opt.key;
//			lnagArray.push(obj);
//		}
//	}
	return opt.nullMsg;
}
function fnGetLangDataInsertArray(opt){

}
function fnSetLangCode(opt){
	LANG_CODE = opt.langCode;
	var navLang = navigator.language.substr (0, 2);
}
function fnGetLangCode(){
	return LANG_CODE;
}
function fnGetLangKey(formId){
	var obj = new Object();
	$('#ng-view [msg-key]').each (function (index){
		if($(this).attr ('for')){
			obj[$('#'+$(this).attr ('for')).attr('name')] =$(this).attr ('msg-key');
		}
	});
	return obj;
}

/**
 * 페이지 정보를 가져온다.
 * @param {Object} opt
 *
 * opt.menu_id   : 메뉴 아이디
 */
function fnPageInfo( opt ){
	fnGetSwiper();
	/*
	if(PG_ID ==opt.PG_ID){
		return;
	}
	*/

	if(MAIN_MENU_LIST == undefined){
			setTimeout( function(e){ fnPageInfo(opt);}, 500);
			return;
	}

	var isPass = false;
	var thisHashUrl = location.hash.replace('#', '') || "/" + opt.PG_ID;
		// ngViewVer 파라미터를 떼어내는 작업을 한다.
		if( thisHashUrl.indexOf('ngViewVer=') > -1 ){
			thisHashUrl = thisHashUrl.substring(0, thisHashUrl.indexOf('ngViewVer')-1);
		}

	var convertThisURL = thisHashUrl.split("?");

	//----------현재 URL----------------------------
	var url = '';
	if(typeof convertThisURL === "string"){
		url += convertThisURL;
	}else{
		url += convertThisURL[0];
	}

	/**
	 * 현재 클릭한 메뉴아이디 - 	CLICKED_MENU_GRP_ID, CLICKED_MENU_ID
	 * 링크를 통해 들어오는 호출은 	CLICKED_MENU_GRP_ID, CLICKED_MENU_ID 를 정확하게 선별할 수 있다.
	 *
	 * 하지만 뒤로가기에 대한 처리는 필수로 필요한다. 브라우져 주소를 파싱하여 클릭한 메뉴아이디를 선별한다.
	 *
	 */
	// 1. 클릭한 메뉴의 해쉬URL 정보가 프로그램에 등록이 되어있는지 체크한다. 뒤로가기에 대한 처리 참고.
	for(var zz=0; zz < MAIN_MENU_LIST.length; zz++){
		if( MAIN_MENU_LIST[zz].URL == thisHashUrl ){
			CLICKED_MENU_ID     = MAIN_MENU_LIST[zz].MENU_ID;
			CLICKED_MENU_GRP_ID = MAIN_MENU_LIST[zz].ST_MENU_GRP_ID;
			isPass = true;
			break;
		}
	}
	// 2. 클릭한 메뉴의 해쉬URL 정보가 프로그램에 등록이 안되어 있을 경우 파라미터를 뺀 URL을 가지고 비교를 한다. 뒤로가기에 대한 처리 참고.
	if( isPass == false){
		for(var zz=0; zz < MAIN_MENU_LIST.length; zz++){
			if( MAIN_MENU_LIST[zz].URL == url ){
				CLICKED_MENU_ID     = MAIN_MENU_LIST[zz].MENU_ID;
				CLICKED_MENU_GRP_ID = MAIN_MENU_LIST[zz].ST_MENU_GRP_ID;
				break;
			}
		}
	}

	/**************************************************************************************/
			// 네비게이션 영역(gnb, lnb)의 active class 일괄 삭제 처리
			$('#navigation').find('.active').removeClass('active');
			// gnb 처리
			$('#menuGrpId'+CLICKED_MENU_GRP_ID).parent().children('a').addClass("active");
			if( CLICKED_MENU_GRP_ID == '39' ){
				$('div.member-bar').show();
				$('div#contents').css({'padding-top':'90px'});
			}else{
				$('div.member-bar').hide();
				// $('div#contents').css('padding-top', '30px');
			}

			// 팝업 상단 처리
			$('.ifr_popup div#contents').css('padding-top', '10px');

			if(CLICKED_MENU_GRP_ID){
				// lnb 처리
				fnDrawLeftMenu( CLICKED_MENU_GRP_ID );

				$("#topMenuItem"+CLICKED_MENU_ID).addClass('textactive');
				$("#lnb"+CLICKED_MENU_ID).addClass('active');
				$("#lnb"+CLICKED_MENU_ID).parent().parent().children('a').addClass('active');
				// lnb block 처리
				if( fnIsLeftMenu( url, thisHashUrl ) ){
					$('article#container').removeClass('no-lnb');
				}else{
					$('article#container').addClass('no-lnb');
				}

				console.log('url : ' + url, 'CLICKED_MENU_ID : ' + CLICKED_MENU_ID);
			}

	/**************************************************************************************/

	if(CLICKED_MENU_ID ==''){
			setTimeout( function(e){ fnPageInfo(opt);}, 500);
			return;
	}

	PG_ID =opt.PG_ID;

	var data = {
		programId   : opt.PG_ID,
		stMenuId : CLICKED_MENU_ID
	};
	if(data.programId == null){
		return;
	}else{
		curPageId =	data.programId;
	}
	fnAjax({
		url     : '/admin/comn/getPageInfo',
		params  : data,
		isAction: 'select',
		success :
			function( data ){
					// 다국어 전역변수에 데이터를 입력한다.
					if($('#ng-view').css('display') == 'none'){
						$('#ng-view').css({"display":""});
					}

					// 타이틀 처리한다.
					$('h1.title').html( data.title );
					$('#contentsTitleHelp').remove();
					if (data.stHelpId) {
						$('h1.title').after("<div id='contentsTitleHelp' data-help-key='" + data.stHelpId + "'></div>");
					}
					//도움말 공통
					fnGetHelpData();

					// 네비게이션 처리한다.
					$('.location').html( data.navi );

					$('div.k-popup').each(function(index) {
						$(this).remove();
				    });
				    $('div.k-window').each(function(index) {
						$(this).remove();
				    });
					if(kendoWindowMenu){
						kendoWindowMenu.destroy();
						kendoWindowMenu = undefined;
					}
					$(document).scrollTop(0);

					// 권한처리를 한다.
//					LANG_DATA  = data.lang;
					PG_SESSION = data.session;
					PG_AUTH  = data.auth;
					if( PG_AUTH != undefined && PG_AUTH.length > 0 ){
						$.each(PG_AUTH, function (key, value){
							$('[auth-remove="' + value + '"]').show().removeAttr("auth-remove");
						});
						$('[auth-remove]').remove();
					}
					OPER_TP_CODE = 'N';
					var callbacks = $.Callbacks();
					    callbacks.add( opt.callback );
					    callbacks.fire(  );
			}
	});
}

function fnIsProgramAuth(authCode) {
	if (PG_AUTH != undefined && PG_AUTH.length > 0) {
		if (PG_AUTH.indexOf(authCode) > -1) {
			return true;
		} else {
			return false;
		}
	} else {
		return false;
	}
}

/**
 * 페이지 다국어정보를 가져온다.
 * @param {Object} opt
 *
 * opt.PG_ID   : 프로그램 아이디
 */
function fnPageLangInfo( opt ){
	fnGetSwiper();
/*
	if(PG_ID == opt.PG_ID){
		return;
	}
 */
	PG_ID =opt.PG_ID;
	var data = {
		PG_ID   : opt.PG_ID
	};
	if(data.PG_ID == null){
		return;
	}else{
		curPageId =	data.PG_ID;
	}
	fnAjax({
		url     : '/comn/gb/langInfo',
		params  : data,
		success :
			function( data ){
					// 다국어 전역변수에 데이터를 입력한다.
					if($('#ng-view').css('display') == 'none'){
						$('#ng-view').css({"display":""});
					}

					$(document).scrollTop(0);

//					LANG_DATA = data.lang;
					PG_SESSION = data.session;
					OPER_TP_CODE = 'N';
					var callbacks = $.Callbacks();
					    callbacks.add( opt.callback );
					    callbacks.fire(  );
			}
	});
}
function fnPageInfo_pup( opt ){

	var callbacks = $.Callbacks();
	callbacks.add( opt.callback );
	callbacks.fire( opt.callback );
}
