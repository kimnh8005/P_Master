plugins {
    id 'org.springframework.boot' version '2.2.4.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'java'
    id 'idea'
    id 'org.sonarqube' version '2.7'
}

ext {
    // Nexus Maven Mirror
    NEXUS_MAVEN_MIRROR_PROTOCOL = "http"
    NEXUS_MAVEN_MIRROR_URL = "49.50.173.250:8081/repository/maven-public/"
    NEXUS_MAVEN_MIRROR_USERNAME = "reader"
    NEXUS_MAVEN_MIRROR_PASSWORD = "Vhqlwm20!!"

    // Nexus Snapshot Repository
    NEXUS_SNAPSHOT_REPOSITORY_PROTOCOL = "http"
    NEXUS_SNAPSHOT_REPOSITORY_URL = "49.50.173.250:8081/repository/maven-snapshots/"
    NEXUS_SNAPSHOT_REPOSITORY_USERNAME = "uploader"
    NEXUS_SNAPSHOT_REPOSITORY_PASSWORD = "U6An+Y77dfb"

    // nCloud dev
    DEV_DOCKER_REGISTRY_PROTOCOL = "https"
    DEV_DOCKER_REGISTRY_URL = "dev-pulmuone-image.kr.ncr.ntruss.com"
    DEV_DOCKER_REGISTRY_USERNAME = "ApZTxOC5V29tVWXA9BWO"
    DEV_DOCKER_REGISTRY_PASSWORD = "QhN00nlomNSpBX3eoc8yjKAVmkt2XdWwFZ19Zfij"

    // nCloud qa
    QA_DOCKER_REGISTRY_PROTOCOL = "https"
    QA_DOCKER_REGISTRY_URL = "dev-pulmuone-image.kr.ncr.ntruss.com"
    QA_DOCKER_REGISTRY_USERNAME = "ApZTxOC5V29tVWXA9BWO"
    QA_DOCKER_REGISTRY_PASSWORD = "QhN00nlomNSpBX3eoc8yjKAVmkt2XdWwFZ19Zfij"

    // nCloud ver
    VER_DOCKER_REGISTRY_PROTOCOL = "https"
    VER_DOCKER_REGISTRY_URL = "ver-pulmuone-image.kr.ncr.ntruss.com"
    VER_DOCKER_REGISTRY_USERNAME = "ApZTxOC5V29tVWXA9BWO"
    VER_DOCKER_REGISTRY_PASSWORD = "QhN00nlomNSpBX3eoc8yjKAVmkt2XdWwFZ19Zfij"

    // nCloud prod
    PROD_DOCKER_REGISTRY_PROTOCOL = "https"
    PROD_DOCKER_REGISTRY_URL = "prod-pumuone-image.kr.ncr.ntruss.com"
    PROD_DOCKER_REGISTRY_USERNAME = "ApZTxOC5V29tVWXA9BWO"
    PROD_DOCKER_REGISTRY_PASSWORD = "QhN00nlomNSpBX3eoc8yjKAVmkt2XdWwFZ19Zfij"

    TIME_ZONE = TimeZone.getTimeZone("Asia/Seoul")              // 한국 시간대
    BUILD_VERSION = new Date().format("yyyyMMddHHmmss", TIME_ZONE)  // 빌드 버전 : 빌드 시간을 War/Jar Version 과 Image Tag 로 표시

    COMMON_UNIT_TEST_CLASS = "kr.co.pulmuone.common.CommonUnitTest"

    DEFAULT_PROFILE = "local"
    DEV_PROFILE = "dev"
    QA_PROFILE = "qa"
    VER_PROFILE = "ver"
    PROD_PROFILE = "prod"
}

repositories {
    maven {
        name 'nexus-maven-mirror'
        url "${NEXUS_MAVEN_MIRROR_PROTOCOL}://${NEXUS_MAVEN_MIRROR_URL}"
        credentials {
            username "${NEXUS_MAVEN_MIRROR_USERNAME}"
            password "${NEXUS_MAVEN_MIRROR_PASSWORD}"
        }
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'maven-publish'
    apply plugin: 'project-report'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        maven {
            name 'nexus-maven-mirror'
            url "${NEXUS_MAVEN_MIRROR_PROTOCOL}://${NEXUS_MAVEN_MIRROR_URL}"
            credentials {
                username "${NEXUS_MAVEN_MIRROR_USERNAME}"
                password "${NEXUS_MAVEN_MIRROR_PASSWORD}"
            }
        }
    }

    compileJava.options.encoding = 'UTF-8'
    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-jdbc'
        implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.boot:spring-boot-starter-aop'
        implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.1.2'
        annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

        implementation 'org.springframework.boot:spring-boot-starter-data-redis'
        implementation 'org.springframework.session:spring-session-data-redis'

        implementation 'io.springfox:springfox-swagger2:2.9.2'
        implementation 'io.springfox:springfox-swagger-ui:2.9.2'

        implementation 'mysql:mysql-connector-java'
        implementation 'com.oracle.database.jdbc:ojdbc8:19.7.0.0'
        implementation 'com.oracle.database.nls:orai18n:19.7.0.0'
        implementation 'kr.co.pulmuone.3rdparty:tibero:5'

        implementation 'org.hsqldb:hsqldb'
        implementation 'com.hynnet:json-lib:2.4'   // StringUtil 에서 사용
        implementation 'org.codehaus.jackson:jackson-core-asl:1.6.3'
        implementation 'org.codehaus.jackson:jackson-mapper-asl:1.6.3'
        implementation 'org.bgee.log4jdbc-log4j2:log4jdbc-log4j2-jdbc4.1:1.16'

        implementation 'org.apache.poi:poi:4.1.2'
        implementation 'org.apache.poi:poi-ooxml:4.1.2'
        implementation 'org.apache.commons:commons-pool2:2.7.0'

        implementation 'org.elasticsearch:elasticsearch:7.9.2'
        implementation 'org.elasticsearch.client:elasticsearch-rest-client:7.9.2'
        implementation 'org.elasticsearch.client:elasticsearch-rest-high-level-client:7.9.2'

        implementation 'com.google.code.gson:gson'
        implementation 'com.google.auth:google-auth-library-oauth2-http:0.22.0'
        implementation 'com.google.firebase:firebase-admin:7.0.1'
        implementation 'com.google.zxing:javase:3.4.1'

        implementation 'com.github.pagehelper:pagehelper-spring-boot-starter:1.2.13'
        implementation 'org.jsoup:jsoup:1.13.1'
        implementation 'commons-io:commons-io:2.7'
        implementation 'com.jcraft:jsch:0.1.55'

        implementation 'org.apache.velocity.tools:velocity-tools-generic:3.1'

        implementation 'io.jsonwebtoken:jjwt:0.9.1'

        implementation 'commons-collections:commons-collections:3.2.2'

        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        testCompileOnly 'org.projectlombok:lombok'
        testAnnotationProcessor 'org.projectlombok:lombok'

        testImplementation('org.springframework.boot:spring-boot-starter-test') {
            exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        }
    }

    // 해당 task로 서브 모듈 추가시 기초적인 디렉토리를 자동으로 생성
    task initSourceFolders {
        sourceSets*.java.srcDirs*.each {
            if (!it.exists()) {
                it.mkdirs()
            }
        }

        sourceSets*.resources.srcDirs*.each {
            if (!it.exists()) {
                it.mkdirs()
            }
        }

        // COMMON 모듈이 아닌 경우, webapp 폴더 생성
        if (project.name.startsWith('Pulmuone_COMMON') == false) {

            def webappDir = new File("${projectDir}/src/main/webapp/WEB-INF")

            if (webappDir.exists() == false) {
                webappDir.mkdirs()
            }

        }
    }

    task copyWhatapAgent(type: Copy) {
        from "${projectDir}/../libs/whatap"
        into "${buildDir}/libs/whatap"
    }
}

// -------- 하위 Gradle 모듈 설정 Start --------
project(":Pulmuone_COMMON") {
    // 마스터의 build.gradle 과 COMMON 모듈의 build.gradle 에 동일하게 등록
    bootJar {
        enabled = false
    }

    jar {
        enabled = true
    }
}

project(":Pulmuone_BOS") {
    dependencies {
        implementation project(':Pulmuone_COMMON')   // 공통 모듈을 별도 디펜던시 등록
        testImplementation project(':Pulmuone_COMMON').sourceSets.test.output   // JUnit, Gradle test Task 실행 연계
    }
}

project(":Pulmuone_MALL") {
    dependencies {
        implementation project(':Pulmuone_COMMON')   // 공통 모듈을 별도 디펜던시 등록
        testImplementation project(':Pulmuone_COMMON').sourceSets.test.output   // JUnit, Gradle test Task 실행 연계
    }
}

project(":Pulmuone_BATCH") {
    dependencies {
        implementation project(':Pulmuone_COMMON')
        testImplementation project(':Pulmuone_COMMON').sourceSets.test.output
    }
}

// -------- 하위 Gradle 모듈 설정 End --------

// -------- 도커 실행 command 반환 메서드 Start --------
/*
 * 도커 이미지 빌드 command 반환
 *
 */

def getDockerImageBuildCommand(def moduleName, def registryUrl, def imageName, def profile, def warFileName, def exposePort) {
    return ["docker", "build",
            "--no-cache=false",   // 이전 빌드에서 생성된 캐시 사용하지 않고 처음부터 다시 이미지 생성
            "--rm=true",          // 이미지 빌드 성공시 임시 컨테이너 삭제
            "--force-rm=false",   // 이미지 빌드 실패시 임시 컨테이너 삭제
            "--file", "./Dockerfile-${moduleName}",   // Dockerfile 경로 : 각 하위 모듈의 build.gradle 경로 기준
            "--tag", "${registryUrl}/${imageName}-${profile}",
            "--build-arg", "PROFILE=${profile}",
            "--build-arg", "WAR_FILE_PATH=./build/libs",
            "--build-arg", "WAR_FILE_NAME=${warFileName}",
            "--build-arg", "EXPOSE_PORT=${exposePort}",
            "."
    ]
}

/*
 * ${imageTag} 로 해당 이미지의 태그 값 별도 지정 command 반환
 */

def getDockerTagCommand(def registryUrl, def imageName, def profile, def imageTag) {
    return ['docker', 'tag',
            "${registryUrl}/${imageName}-${profile}",
            "${registryUrl}/${imageName}-${profile}:${imageTag}"
    ]
}

/*
 * 도커 레지스트리 로그인 command 반환
 */

def getDockerContainerRegistryLogInCommand(def userName, def password, def protocol, def registryUrl) {
    return ['docker', 'login',
            '--username', "${userName}",
            '--password', "${password}",
            "${protocol}://${registryUrl}"
    ]
}

/*
 * 빌드된 도커 이미지를 도커 레지스트리로 push 하는 command 반환
 *
 */

def getDockerPushCommand(def registryUrl, def imageName, def profile, def imageTag) {

    def imgTag = "${imageTag}"

    if(imgTag != null && imgTag.length() > 0) {
        return ['docker', 'push',
                "${registryUrl}/${imageName}-${profile}:${imageTag}"
        ]
    } else {
        return ['docker', 'push',
                "${registryUrl}/${imageName}-${profile}"
        ]
    }
}

/*
 * 도커 레지스트리 로그아웃 command 반환
 */

def getDockerContainerRegistryLogOutCommand(def protocol, def registryUrl) {
    return ['docker', 'logout',
            "${protocol}://${registryUrl}"
    ]
}

/*
 * 빌드된 도커 이미지 삭제 command 반환
 */

def getDockerImageDeleteCommand(def registryUrl, def imageName, def profile, def imageTag) {
    return ['docker', 'rmi', '-f',
            "${registryUrl}/${imageName}-${profile}:${imageTag}"
    ]
}
// -------- 도커 실행 command 반환 메서드 End --------
