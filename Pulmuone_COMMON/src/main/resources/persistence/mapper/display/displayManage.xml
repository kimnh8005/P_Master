<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.pulmuone.v1.comm.mapper.display.manage.DisplayManageMapper">

  <!-- 전시페이지 -->
  <resultMap type="kr.co.pulmuone.v1.display.manage.dto.vo.PageVo" id="pageMap">
    <result column="DP_PAGE_ID"                   property="dpPageId"                 />
    <result column="PAGE_CD"                      property="pageCd"                   />
    <result column="PAGE_NM"                      property="pageNm"                   />
    <result column="DEPTH"                        property="depth"                    />
    <result column="PRNTS_PAGE_ID"                property="prntsPageId"              />
    <result column="DEPTH_1_PAGE_ID"              property="depth1PageId"             />
    <result column="DEPTH_2_PAGE_ID"              property="depth2PageId"             />
    <result column="DEPTH_3_PAGE_ID"              property="depth3PageId"             />
    <result column="DEPTH_4_PAGE_ID"              property="depth4PageId"             />
    <result column="DEPTH_5_PAGE_ID"              property="depth5PageId"             />
    <result column="SORT"                         property="sort"                     />
    <result column="USE_YN"                       property="useYn"                    />
    <result column="DEL_YN"                       property="delYn"                    />
    <result column="CREATE_ID"                    property="createId"                 />
    <result column="CREATE_DT"                    property="createDt"                 />
    <result column="MODIFY_ID"                    property="modifyId"                 />
    <result column="MODIFY_DT"                    property="modifyDt"                 />

    <result column="ISLEAF"                       property="isleaf"                   />
    <result column="USE_YN_NM"                    property="useYnNm"                  />
    <result column="PAGE_FULL_PATH"               property="pageFullPath"             />
    <result column="GROUP_DESC"                   property="groupDesc"                />
  </resultMap>


  <!-- 전시컨텐츠 -->
  <resultMap type="kr.co.pulmuone.v1.display.manage.dto.vo.ContsVo" id="contsMap">
    <result column="DP_CONTS_ID"                property="dpContsId"            />
    <result column="DP_INVENTORY_ID"            property="dpInventoryId"        />
    <result column="IL_CTGRY_ID"                property="ilCtgryId"            />
    <result column="CONTS_TP"                   property="contsTp"              />
    <result column="CONTS_LEVEL"                property="contsLevel"           />
    <result column="PRNTS_CONTS_ID"             property="prntsContsId"         />
    <result column="LEVEL_1_CONTS_ID"           property="level1ContsId"        />
    <result column="LEVEL_2_CONTS_ID"           property="level2ContsId"        />
    <result column="LEVEL_3_CONTS_ID"           property="level3ContsId"        />
    <result column="DP_START_DT"                property="dpStartDt"            />
    <result column="DP_END_DT"                  property="dpEndDt"              />
    <result column="DP_RANGE_TP"                property="dpRangeTp"            />
    <result column="TITLE_NM"                   property="titleNm"              />
    <result column="DP_CTGRY_ID"                property="dpCtgryId"            />
    <result column="TEXT_1"                     property="text1"                />
    <result column="TEXT_1_COLOR"               property="text1Color"           />
    <result column="TEXT_2"                     property="text2"                />
    <result column="TEXT_2_COLOR"               property="text2Color"           />
    <result column="TEXT_3"                     property="text3"                />
    <result column="TEXT_3_COLOR"               property="text3Color"           />
    <result column="LINK_URL_PC"                property="linkUrlPc"            />
    <result column="LINK_URL_MOBILE"            property="linkUrlMobile"        />
    <result column="HTML_PC"                    property="htmlPc"               />
    <result column="HTML_MOBILE"                property="htmlMobile"           />
    <result column="IMG_PATH_PC"                property="imgPathPc"            />
    <result column="IMG_ORIGIN_NM_PC"           property="imgOriginNmPc"        />
    <result column="IMG_PATH_MOBILE"            property="imgPathMobile"        />
    <result column="IMG_ORIGIN_NM_MOBILE"       property="imgOriginNmMobile"    />
    <result column="GIF_IMG_PATH_PC"            property="gifImgPathPc"         />
    <result column="GIF_IMG_ORIGIN_NM_PC"       property="gifImgOriginNmPc"     />
    <result column="GIF_IMG_PATH_MOBILE"        property="gifImgPathMobile"     />
    <result column="GIF_IMG_ORIGIN_NM_MOBILE"   property="gifImgOriginNmMobile" />
    <result column="CONTS_ID"                   property="contsId"              />
    <result column="DP_COND_TP"                 property="dpCondTp"             />
    <result column="DP_SORT_TP"                 property="dpSortTp"             />
    <result column="SORT"                       property="sort"                 />
    <result column="USE_YN"                     property="useYn"                />
    <result column="DEL_YN"                     property="delYn"                />
    <result column="CREATE_ID"                  property="createId"             />
    <result column="CREATE_DT"                  property="createDt"             />
    <result column="MODIFY_ID"                  property="modifyId"             />
    <result column="MODIFY_DT"                  property="modifyDt"             />

    <result column="CONTS_TP_NM"                property="contsTpNm"            />
    <result column="CONTS_LEVEL_NM"             property="contsLevelNm"         />
    <result column="DP_RANGE_TP_NM"             property="dpRangeTpNm"          />
    <result column="DP_COND_TP_NM"              property="dpCondTpNm"           />
    <result column="DP_SORT_TP_NM"              property="dpSortTpNm"           />
    <result column="USE_YN_NM"                  property="useYnNm"              />
    <result column="STATUS_NM"                  property="statusNm"             />
    <result column="CTGRY_FULL_NM"              property="ctgryFullNm"          />
    <result column="CONTS_NM"                   property="contsNm"              />
    <result column="CONTS_LEVEL_1_DESC"         property="contsLevel1Desc"      />
    <result column="CONTS_LEVEL_2_DESC"         property="contsLevel2Desc"      />
    <result column="CONTS_LEVEL_3_DESC"         property="contsLevel3Desc"      />
    <result column="MALL_DIV"                   property="mallDiv"              />
    <result column="MALL_DIV_NM"                property="mallDivNm"            />
    <result column="CTGRY_DEPTH"                property="ctgryDepth"           />
    <result column="CTGRY_ID_DEPTH0"            property="ctgryIdDepth0"        />
    <result column="CTGRY_ID_DEPTH1"            property="ctgryIdDepth1"        />
    <result column="CTGRY_ID_DEPTH2"            property="ctgryIdDepth2"        />
    <result column="CTGRY_ID_DEPTH3"            property="ctgryIdDepth3"        />
    <result column="CTGRY_ID_DEPTH4"            property="ctgryIdDepth4"        />
    <result column="CTGRY_ID_DEPTH5"            property="ctgryIdDepth5"        />
    <result column="DP_BRAND_ID"                property="dpBrandId"            />
    <result column="DP_BRAND_NM"                property="dpBrandNm"              />
    <result column="CODE"                       property="code"                 />
    <result column="NAME"                       property="name"                 />
    <result column="IL_GOODS_ID"                property="ilGoodsId"            />
    <result column="IL_ITEM_CD"                 property="ilItemCd"             />
    <result column="GOODS_TP"                   property="goodsTp"              />
    <result column="GOODS_NM"                   property="goodsNm"              />
    <result column="GOODS_TP_NM"                property="goodsTpNm"            />
    <result column="UR_SUPPLIER_ID"             property="urSupplierId"         />
    <result column="SUPPLIER_NAME"              property="supplierName"         />
    <result column="RECOMMENDED_PRICE"          property="recommendedPrice"     />
    <result column="SALE_PRICE"                 property="salePrice"            />
    <result column="DISP_WEB_PC_YN"             property="dispWebPcYn"          />
    <result column="DISP_WEB_MOBILE_YN"         property="dispWebMobileYn"      />
    <result column="DISP_APP_YN"                property="dispAppYn"            />
    <result column="DISP_WEB_PC_YN_NM"          property="dispWebPcYnNm"        />
    <result column="DISP_WEB_MOBILE_YN_NM"      property="dispWebMobileYnNm"    />
    <result column="DISP_APP_YN_NM"             property="dispAppYnNm"          />
    <result column="PURCHASE_MEMBER_YN"         property="purchaseMemberYn"     />
    <result column="PURCHASE_EMPLOYEE_YN"       property="purchaseEmployeeYn"   />
    <result column="PURCHASE_NONMEMBER_YN"      property="purchaseNonmemberYn"  />
    <result column="PURCHASE_MEMBER_YN_NM"      property="purchaseMemberYnNm"   />
    <result column="PURCHASE_EMPLOYEE_YN_NM"    property="purchaseEmployeeYnNm" />
    <result column="PURCHASE_NONMEMBER_YN_NM"   property="purchaseNonmemberYnNm"/>
    <result column="SALE_STATUS"                property="saleStatus"           />
    <result column="SALE_STATUS_NAME"           property="saleStatusName"       />
    <result column="DISP_YN"                    property="dispYn"               />
    <result column="DISP_YN_NM"                 property="dispYnNm"             />
    <result column="GOODS_BASIC_CTGRY_ID"       property="goodsBasicCtgryId"    />
    <result column="GOODS_BASIC_CTGRY_FULL_NM"  property="goodsBasicCtgryFullNm"/>
    <result column="GOODS_BRAND_ID"             property="goodsBrandId"         />
    <result column="GOODS_BRAND_NM"             property="goodsBrandNm"         />
    <result column="TEXT_1_STRING"              property="text1String"          />
    <result column="TEXT_2_STRING"              property="text2String"          />
    <result column="TEXT_3_STRING"              property="text3String"          />

   </resultMap>

  <!-- 전시인벤토리그룹-->
  <resultMap type="kr.co.pulmuone.v1.display.manage.dto.vo.InventoryGrpVo" id="inventoryGrpMap">
    <result column="DP_INVENTORY_GRP_ID"        property="dpInventoryGrpId"     />
    <result column="USER_ID"                    property="userId"                   />
    <result column="INVENTORY_GRP_NM"           property="inventoryGrpNm"       />
    <result column="GRP_DESC"                   property="grpDesc"              />
    <result column="SORT"                       property="sort"                 />
    <result column="USE_YN"                     property="useYn"                />
    <result column="DEL_YN"                     property="delYn"                />
    <result column="CREATE_ID"                  property="createId"             />
    <result column="CREATE_DT"                  property="createDt"             />
    <result column="MODIFY_ID"                  property="modifyId"             />
    <result column="MODIFY_DT"                  property="modifyDt"             />

    <result column="USE_YN_NM"                  property="useYnNm"              />
  </resultMap>

  <!-- 전시인벤토리그룹구성-->
  <resultMap type="kr.co.pulmuone.v1.display.manage.dto.vo.InventoryGrpMappingVo" id="inventoryGrpMappingMap">
    <result column="DP_INVENTORY_GRP_MAPPING_ID"  property="dpInventoryGrpMappingId"  />
    <result column="DP_INVENTORY_GRP_ID"          property="dpInventoryGrpId"         />
    <result column="DP_INVENTORY_ID"              property="dpInventoryId"            />
    <result column="IL_CTGRY_ID"                  property="ilCtgryId"                />
    <result column="SORT"                         property="sort"                     />
    <result column="USE_YN"                       property="useYn"                    />
    <result column="DEL_YN"                       property="delYn"                    />
    <result column="CREATE_ID"                    property="createId"                 />
    <result column="CREATE_DT"                    property="createDt"                 />
    <result column="MODIFY_ID"                    property="modifyId"                 />
    <result column="MODIFY_DT"                    property="modifyDt"                 />

    <result column="USE_YN_NM"                    property="useYnNm"                  />
    <result column="INVENTORY_CD"                 property="inventoryCd"              />
  </resultMap>

  <!-- 브랜드리스(콤보용) -->
  <resultMap id="getCodeListResultMap" type="kr.co.pulmuone.v1.base.dto.vo.GetCodeListResultVo">
    <result column="CODE" property="code" />
    <result column="NAME" property="name" />
  </resultMap>

  <!-- 전시팝업-->
  <!--
  <resultMap type="kr.co.pulmuone.v1.display.manage.dto.vo.PopupVo" id="popupMap">
    <result column="DP_POPUP_ID"                property="dpPopupId"              />
    <result column="DP_TARGET"                  property="dpTarget"               />
    <result column="DP_RANGE_TP"                property="dpRangeTp"              />
    <result column="DP_START_DT"                property="dpStartDt"              />
    <result column="DP_END_DT"                  property="dpEndDt"                />
    <result column="POPUP_SUBJECT"              property="popupSubject"           />
    <result column="TD_STOP_YN"                 property="tdStopYn"               />
    <result column="DP_V_POSIT"                 property="dpVPosit"               />
    <result column="DP_H_POSIT"                 property="dpHPposit"              />
    <result column="POPUP_TP"                   property="popupTp"                />
    <result column="LINK_URL_PC"                property="linkUrlPc"              />
    <result column="LINK_URL_MOBILE"            property="linkUrlMobile"          />
    <result column="POPUP_DESC"                 property="popupDesc"              />
    <result column="POPUP_IMG_PATH_PC"          property="popupImgPathPc"         />
    <result column="POPUP_IMG_ORIGIN_NM_PC"     property="popupImgOriginNmPc"     />
    <result column="POPUP_IMG_PATH_MOBILE"      property="popupImgPathMobile"     />
    <result column="POPUP_IMG_ORIGIN_NM_MOBILE" property="popupImgOriginNmMobile" />
    <result column="SORT"                       property="sort"                   />
    <result column="USE_YN"                     property="useYn"                  />
    <result column="DEL_YN"                     property="delYn"                  />
    <result column="CREATE_ID"                  property="createId"               />
    <result column="CREATE_DT"                  property="createDt"               />
    <result column="MODIFY_ID"                  property="modifyId"               />
    <result column="MODIFY_DT"                  property="modifyDt"               />
  </resultMap>
  -->

  <!-- ==================================================================== -->
  <!-- 페이지-->
  <!-- ==================================================================== -->
  <!--───────────────────────────────────────────────────────────────────────
   * description    : 전시페이지 리스트조회
   * @
   * @ 수정일       수정자    수정내용
   * @ ──────────────────────────────────────────────────────────────────────
   * @ 2020.09.21   dgyoun    최초생성
   * @
  ────────────────────────────────────────────────────────────────────────-->
  <select id="selectDpPageList" resultMap="pageMap">
        /*displayManage.selectDpPageList*/
        SELECT  P.DP_PAGE_ID
              , P.PAGE_CD
              , P.PAGE_NM
              , P.DEPTH
              , P.PRNTS_PAGE_ID
              , P.DEPTH_1_PAGE_ID
              , P.DEPTH_2_PAGE_ID
              , P.DEPTH_3_PAGE_ID
              , P.DEPTH_4_PAGE_ID
              , P.DEPTH_5_PAGE_ID
              , P.SORT
              , P.USE_YN
              , P.DEL_YN
              , P.CREATE_ID
              , P.CREATE_DT
              , P.MODIFY_ID
              , P.MODIFY_DT
              , CASE  WHEN  (
                            SELECT  COUNT(1)
                            FROM    DP_PAGE P2
                          <where>
                              AND   P2.PRNTS_PAGE_ID = P.DP_PAGE_ID
                            <if test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEmpty(useAllYn) or (@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(useAllYn) and @kr.co.pulmuone.v1.comm.util.StringUtil@isNotEquals(useAllYn, "Y"))'>
                              AND   P2.USE_YN         = 'Y'
                            </if>
                              AND   P2.DEL_YN         = 'N'
                          </where>
                            ) = 0
                      THEN  'false'
                      ELSE  'true'
                END AS ISLEAF
              , CASE WHEN P.DEPTH = 1 THEN P.PAGE_NM
                     WHEN P.DEPTH = 2 THEN CONCAT(P1.PAGE_NM, ' > ', P.PAGE_NM)
                     WHEN P.DEPTH = 3 THEN CONCAT(P1.PAGE_NM, ' > ', P2.PAGE_NM, ' > ', P.PAGE_NM)
                     WHEN P.DEPTH = 4 THEN CONCAT(P1.PAGE_NM, ' > ', P2.PAGE_NM, ' > ', P3.PAGE_NM, ' > ', P.PAGE_NM)
                     WHEN P.DEPTH = 5 THEN CONCAT(P1.PAGE_NM, ' > ', P2.PAGE_NM, ' > ', P3.PAGE_NM, ' > ', P4.PAGE_NM, ' > ', P.PAGE_NM)
                     ELSE ''
                END  AS PAGE_FULL_PATH
              , CASE WHEN P.USE_YN = 'Y' THEN '예' ELSE '아니오' END AS USE_YN_NM
        FROM    DP_PAGE P
                  LEFT OUTER  JOIN  DP_PAGE P1
                                ON  P1.DP_PAGE_ID = P.DEPTH_1_PAGE_ID
                  LEFT OUTER  JOIN  DP_PAGE P2
                                ON  P2.DP_PAGE_ID = P.DEPTH_2_PAGE_ID
                  LEFT OUTER  JOIN  DP_PAGE P3
                                ON  P3.DP_PAGE_ID = P.DEPTH_3_PAGE_ID
                  LEFT OUTER  JOIN  DP_PAGE P4
                                ON  P4.DP_PAGE_ID = P.DEPTH_4_PAGE_ID
  <where>
    <choose>
      <when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(dupCheckYn) and @kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(dupCheckYn, "Y")'>
        <!-- 중복체크인 경우 -->
          AND   P.PAGE_CD = #{pageCd}
      </when>
      <otherwise>
        <!-- 중복체크인 아닌 경우 -->
        <if test='@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(pageCd)'>
          AND   P.PAGE_CD = #{pageCd}
        </if>
        <if test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEmpty(useAllYn) or (@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(useAllYn) and @kr.co.pulmuone.v1.comm.util.StringUtil@isNotEquals(useAllYn, "Y"))'>
          AND   P.USE_YN  = 'Y'
        </if>
          AND   P.PRNTS_PAGE_ID = #{dpPageId}
      </otherwise>
    </choose>
          AND   P.DEL_YN  = 'N'
  </where>
        ORDER BY P.DEPTH, P.SORT, P.PAGE_CD, P.PAGE_NM
  </select>

  <!--───────────────────────────────────────────────────────────────────────
   * description    : 페이지 Depth 조회
   * @
   * @ 수정일       수정자    수정내용
   * @ ──────────────────────────────────────────────────────────────────────
   * @ 2020.10.07   dgyoun    최초생성
   * @
  ────────────────────────────────────────────────────────────────────────-->
  <select id="selectDpPageDepth" resultType="int">
    /*displayManage.selectDpPageDepth*/
    SELECT  DEPTH
    FROM    IL_CTGRY
    WHERE   IL_CTGRY_ID = #{dpPageId}
  </select>

  <!--───────────────────────────────────────────────────────────────────────
   * description    : 전시카테고리 리스트조회 - 그룹목록 - 전시페이지관리 화면의 Tree 0 Depth, 전시컨텐츠관리 화면의 Tree
   * @
   * @ 수정일       수정자    수정내용
   * @ ──────────────────────────────────────────────────────────────────────
   * @ 2020.09.21   dgyoun    최초생성
   * @
  ────────────────────────────────────────────────────────────────────────-->
  <select id="selectDpCategoryList" resultMap="pageMap">
      /*displayManage.selectDpCategoryList*/
      SELECT  C.IL_CTGRY_ID     AS DP_PAGE_ID
            <!-- , C.MALL_DIV -->
            , C.CTGRY_NM        AS PAGE_NM
            , C.DEPTH
            , C.PRNTS_CTGRY_ID  AS PRNTS_PAGE_ID
            , C.SORT
            , CASE  WHEN  (
                          SELECT  COUNT(1)
                          FROM    IL_CTGRY C2
                          WHERE   C2.PRNTS_CTGRY_ID = C.IL_CTGRY_ID
                          <if test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEmpty(useAllYn) or (@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(useAllYn) and @kr.co.pulmuone.v1.comm.util.StringUtil@isNotEquals(useAllYn, "Y"))'>
                            AND   C2.USE_YN         = 'Y'
                          </if>
                            AND   C2.DEL_YN         = 'N'
                          ) = 0
                    THEN  'false'
                    ELSE  'true'
              END AS ISLEAF
            <!-- , C.DISP_YN -->
            , C.USE_YN
            , C.DEL_YN
            , C.CREATE_ID
            , C.CREATE_DT
            , C.MODIFY_ID
            , C.MODIFY_DT
            , CASE WHEN C.USE_YN = 'Y' THEN '예' ELSE '아니오' END AS USE_YN_NM
      FROM    IL_CTGRY C
      WHERE   C.MALL_DIV        = #{mallDiv}        <!--필수조건:몰구분-->
      <if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(depth)">
        AND   C.DEPTH           = #{depth}          <!--그룹Depth-->
      </if>
      <if test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEmpty(useAllYn) or (@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(useAllYn) and @kr.co.pulmuone.v1.comm.util.StringUtil@isNotEquals(useAllYn, "Y"))'>
        AND   C.USE_YN          = 'Y'
      </if>
        AND   C.DEL_YN          = 'N'
      <if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(dpPageId)">
        AND   C.PRNTS_CTGRY_ID  = #{dpPageId}
      </if>
      ORDER BY C.SORT ASC, C.CTGRY_NM ASC
  </select>

  <!--───────────────────────────────────────────────────────────────────────
   * description    : 전시카테고리 리스트조회 - 그룹하위 - 전시페이지관리 화면의 Tree 1 Depth 이상
   * @
   * @ 수정일       수정자    수정내용
   * @ ──────────────────────────────────────────────────────────────────────
   * @ 2020.10.07   dgyoun    최초생성
   * @
  ────────────────────────────────────────────────────────────────────────-->
  <select id="selectDpCategorySubList" resultMap="pageMap">
      /*displayManage.selectDpCategorySubList*/
      SELECT  U.RNUM
            , U.DP_PAGE_ID
            , U.MALL_DIV
            , CASE  WHEN U.DEPTH = 0 THEN CONCAT('[]', U.MALL_DIV, ']')
                    WHEN U.DEPTH = 1 THEN '1depth'
                    WHEN U.DEPTH = 2 THEN '2depth'
                    WHEN U.DEPTH = 3 THEN '3depth'
                    WHEN U.DEPTH = 4 THEN '4depth'
                    WHEN U.DEPTH = 5 THEN '5depth'
                    ELSE ''
              END   AS PAGE_CD
            , CASE  WHEN U.DEPTH = 0 THEN CONCAT('[', C1.NAME, ']', ' ', U.CTGRY_NM0)
                    WHEN U.DEPTH = 1 THEN CONCAT('[', C1.NAME, ']', ' ', U.CTGRY_NM0, ' > ', '대분류')
                    WHEN U.DEPTH = 2 THEN CONCAT('[', C1.NAME, ']', ' ', U.CTGRY_NM0, ' > ', '대분류', ' > ', '중분류 ')
                    WHEN U.DEPTH = 3 THEN CONCAT('[', C1.NAME, ']', ' ', U.CTGRY_NM0, ' > ', '대분류', ' > ', '중분류 ', ' > ' , '소분류')
                    WHEN U.DEPTH = 4 THEN CONCAT('[', C1.NAME, ']', ' ', U.CTGRY_NM0, ' > ', '대분류', ' > ', '중분류 ', ' > ' , '소분류', ' > ', '세분류')
                    WHEN U.DEPTH = 5 THEN CONCAT('[', C1.NAME, ']', ' ', U.CTGRY_NM0, ' > ', '대분류', ' > ', '중분류 ', ' > ' , '소분류', ' > ', '세분류', ' > ', '세부분류')
                    ELSE ''
              END   AS PAGE_FULL_PATH
            , U.DEPTH
            , U.PAGE_NM
            , U.PRNTS_PAGE_ID
            , U.SORT
            , CASE  WHEN  (
                          SELECT  COUNT(1)
                          FROM    IL_CTGRY C2
                          WHERE   C2.PRNTS_CTGRY_ID = U.DP_PAGE_ID
                          <if test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEmpty(useAllYn) or (@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(useAllYn) and @kr.co.pulmuone.v1.comm.util.StringUtil@isNotEquals(useAllYn, "Y"))'>
                            AND   C2.USE_YN         = 'Y'
                          </if>
                            AND   C2.DEL_YN         = 'N'
                          ) = 0
                    THEN  'false'
                    ELSE  'true'
              END AS ISLEAF
            , U.USE_YN
            , U.DEL_YN
            , U.CREATE_ID
            , U.CREATE_DT
            , U.MODIFY_ID
            , U.MODIFY_DT
            , CASE WHEN U.USE_YN = 'Y' THEN '예' ELSE '아니오' END AS USE_YN_NM
      FROM    (
              SELECT  T.RNUM
                    , T.IL_CTGRY_ID   AS DP_PAGE_ID
                    , T.MALL_DIV
                    , T.DEPTH
                    , CASE  WHEN T.DEPTH = 1 THEN '대분류'
                            WHEN T.DEPTH = 2 THEN '중분류'
                            WHEN T.DEPTH = 3 THEN '소분류'
                            WHEN T.DEPTH = 4 THEN '세분류'
                            WHEN T.DEPTH = 5 THEN '세부분류'
                            ELSE ''
                      END   AS PAGE_NM
                    , CASE  WHEN T.DEPTH = 1 THEN T.CTGRY_ID0
                            WHEN T.DEPTH = 2 THEN T.CTGRY_ID1
                            WHEN T.DEPTH = 3 THEN T.CTGRY_ID2
                            WHEN T.DEPTH = 4 THEN T.CTGRY_ID3
                            WHEN T.DEPTH = 5 THEN T.CTGRY_ID4
                            ELSE ''
                      END   AS PRNTS_PAGE_ID
                    , CASE  WHEN T.DEPTH = 1 THEN T.SORT1
                            WHEN T.DEPTH = 2 THEN T.SORT2
                            WHEN T.DEPTH = 3 THEN T.SORT3
                            WHEN T.DEPTH = 4 THEN T.SORT4
                            WHEN T.DEPTH = 5 THEN T.SORT5
                            ELSE 999
                      END   AS SORT
                    , T.CTGRY_ID0
                    , T.CTGRY_NM0
                    , T.USE_YN
                    , T.DEL_YN
                    , T.CREATE_ID
                    , T.CREATE_DT
                    , T.MODIFY_ID
                    , T.MODIFY_DT
              FROM    (
                      SELECT  A.*
                            , (CASE @VID WHEN A.CTGRY_ID0 THEN @ROWNUM:=@ROWNUM+1 ELSE @ROWNUM:=1 END) RNUM
                            , (@VID:=A.CTGRY_ID0) V
                      FROM    (
                              SELECT  C.IL_CTGRY_ID
                                    , C.MALL_DIV
                                    , C.DEPTH
                                    , P.CTGRY_ID_DEPTH0   AS CTGRY_ID0
                                    , C0.CTGRY_NM         AS CTGRY_NM0
                                    , C0.SORT             AS SORT0
                                    , P.CTGRY_ID_DEPTH1   AS CTGRY_ID1
                                    , C1.CTGRY_NM         AS CTGRY_NM1
                                    , C1.SORT             AS SORT1
                                    , P.CTGRY_ID_DEPTH2   AS CTGRY_ID2
                                    , C2.CTGRY_NM         AS CTGRY_NM2
                                    , C2.SORT             AS SORT2
                                    , P.CTGRY_ID_DEPTH3   AS CTGRY_ID3
                                    , C3.CTGRY_NM         AS CTGRY_NM3
                                    , C3.SORT             AS SORT3
                                    , P.CTGRY_ID_DEPTH4   AS CTGRY_ID4
                                    , C4.CTGRY_NM         AS CTGRY_NM4
                                    , C4.SORT             AS SORT4
                                    , P.CTGRY_ID_DEPTH5   AS CTGRY_ID5
                                    , C5.CTGRY_NM         AS CTGRY_NM5
                                    , C5.SORT             AS SORT5
                                    , C.USE_YN
                                    , C.DEL_YN
                                    , C.CREATE_ID
                                    , C.CREATE_DT
                                    , C.MODIFY_ID
                                    , C.MODIFY_DT
                              FROM    IL_CTGRY C
                                    , IL_CTGRY_PRNTS_INFO P
                                        LEFT OUTER  JOIN  IL_CTGRY C0
                                                    ON    C0.IL_CTGRY_ID = P.CTGRY_ID_DEPTH0
                                                    AND   C0.DEL_YN      = 'N'
                                        LEFT OUTER  JOIN  IL_CTGRY C1
                                                    ON    C1.IL_CTGRY_ID = P.CTGRY_ID_DEPTH1
                                                    AND   C1.DEL_YN      = 'N'
                                        LEFT OUTER  JOIN  IL_CTGRY C2
                                                    ON    C2.IL_CTGRY_ID = P.CTGRY_ID_DEPTH2
                                                    AND   C2.DEL_YN      = 'N'
                                        LEFT OUTER  JOIN  IL_CTGRY C3
                                                    ON    C3.IL_CTGRY_ID = P.CTGRY_ID_DEPTH3
                                                    AND   C3.DEL_YN      = 'N'
                                        LEFT OUTER  JOIN  IL_CTGRY C4
                                                    ON    C4.IL_CTGRY_ID = P.CTGRY_ID_DEPTH4
                                                    AND   C4.DEL_YN      = 'N'
                                        LEFT OUTER  JOIN  IL_CTGRY C5
                                                    ON    C5.IL_CTGRY_ID = P.CTGRY_ID_DEPTH5
                                                    AND   C5.DEL_YN      = 'N'
                              WHERE   C.MALL_DIV = #{mallDiv}
                              <if test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEmpty(useAllYn) or (@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(useAllYn) and @kr.co.pulmuone.v1.comm.util.StringUtil@isNotEquals(useAllYn, "Y"))'>
                                AND   C.USE_YN = 'Y'
                              </if>
                                AND   C.DEL_YN = 'N'
                              <if test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEmpty(useAllYn) or (@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(useAllYn) and @kr.co.pulmuone.v1.comm.util.StringUtil@isNotEquals(useAllYn, "Y"))'>
                                AND   CASE  WHEN C.DEPTH = 0 AND C0.USE_YN = 'Y' THEN 1
                                            WHEN C.DEPTH = 1 AND C0.USE_YN = 'Y' AND C1.USE_YN = 'Y' THEN 1
                                            WHEN C.DEPTH = 2 AND C0.USE_YN = 'Y' AND C1.USE_YN = 'Y' AND C2.USE_YN = 'Y' THEN 1
                                            WHEN C.DEPTH = 3 AND C0.USE_YN = 'Y' AND C1.USE_YN = 'Y' AND C2.USE_YN = 'Y' AND C3.USE_YN = 'Y' THEN 1
                                            WHEN C.DEPTH = 4 AND C0.USE_YN = 'Y' AND C1.USE_YN = 'Y' AND C2.USE_YN = 'Y' AND C3.USE_YN = 'Y' AND C4.USE_YN = 'Y' THEN 1
                                            WHEN C.DEPTH = 5 AND C0.USE_YN = 'Y' AND C1.USE_YN = 'Y' AND C2.USE_YN = 'Y' AND C3.USE_YN = 'Y' AND C4.USE_YN = 'Y' AND C5.USE_YN = 'Y' THEN 1
                                            ELSE 0
                                      END = 1
                              </if>
                                AND   CASE  WHEN C.DEPTH = 0 AND C0.DEL_YN = 'N' THEN 1
                                            WHEN C.DEPTH = 1 AND C0.DEL_YN = 'N' AND C1.DEL_YN = 'N' THEN 1
                                            WHEN C.DEPTH = 2 AND C0.DEL_YN = 'N' AND C1.DEL_YN = 'N' AND C2.DEL_YN = 'N' THEN 1
                                            WHEN C.DEPTH = 3 AND C0.DEL_YN = 'N' AND C1.DEL_YN = 'N' AND C2.DEL_YN = 'N' AND C3.DEL_YN = 'N' THEN 1
                                            WHEN C.DEPTH = 4 AND C0.DEL_YN = 'N' AND C1.DEL_YN = 'N' AND C2.DEL_YN = 'N' AND C3.DEL_YN = 'N' AND C4.DEL_YN = 'N' THEN 1
                                            WHEN C.DEPTH = 5 AND C0.DEL_YN = 'N' AND C1.DEL_YN = 'N' AND C2.DEL_YN = 'N' AND C3.DEL_YN = 'N' AND C4.DEL_YN = 'N' AND C5.DEL_YN = 'N' THEN 1
                                            ELSE 0
                                      END = 1
                                AND   P.IL_CTGRY_ID = C.IL_CTGRY_ID
                              ) A
                            , (
                              SELECT  @VID:='', @ROWNUM:=0
                              FROM    DUAL
                              ) B
                      ) T
              WHERE   T.DEPTH = (
                                SELECT  DEPTH + 1
                                FROM    IL_CTGRY
                                WHERE   IL_CTGRY_ID = #{dpPageId}
                                )
              ) U
                  LEFT OUTER  JOIN  (
                                    SELECT  CD.ST_COMN_CODE_ID AS CODE
                                          , DC.DIC_NM          AS NAME
                                    FROM    ST_COMN_CODE CD
                                          , GB_DIC DC
                                    WHERE   1 = 1
                                      AND   CD.ST_COMN_CODE_MST_CD  = 'MALL_DIV'
                                      AND   CD.GB_DIC_MST_ID        = DC.GB_DIC_MST_ID
                                      AND   DC.GB_LANG_ID           = '1'

                                    ) C1
                              ON    C1.CODE  = U.MALL_DIV
      WHERE   1 = 1
        AND   U.CTGRY_ID0 = CASE  WHEN (U.DEPTH) = 1 THEN #{dpPageId}
                                  WHEN (U.DEPTH) = 2 THEN (SELECT PRNTS_CTGRY_ID FROM IL_CTGRY WHERE IL_CTGRY_ID = #{dpPageId})
                                  WHEN (U.DEPTH) = 3 THEN (SELECT PRNTS_CTGRY_ID FROM IL_CTGRY WHERE IL_CTGRY_ID = (SELECT PRNTS_CTGRY_ID FROM IL_CTGRY WHERE IL_CTGRY_ID = #{dpPageId}))
                                  WHEN (U.DEPTH) = 4 THEN (SELECT PRNTS_CTGRY_ID FROM IL_CTGRY WHERE IL_CTGRY_ID = (SELECT PRNTS_CTGRY_ID FROM IL_CTGRY WHERE IL_CTGRY_ID = (SELECT PRNTS_CTGRY_ID FROM IL_CTGRY WHERE IL_CTGRY_ID = #{dpPageId})))
                                  WHEN (U.DEPTH) = 5 THEN (SELECT PRNTS_CTGRY_ID FROM IL_CTGRY WHERE IL_CTGRY_ID = (SELECT PRNTS_CTGRY_ID FROM IL_CTGRY WHERE IL_CTGRY_ID = (SELECT PRNTS_CTGRY_ID FROM IL_CTGRY WHERE IL_CTGRY_ID = (SELECT PRNTS_CTGRY_ID FROM IL_CTGRY WHERE IL_CTGRY_ID = #{dpPageId}))))
                                  ELSE 9999999999
                            END
      LIMIT 0, 1
  </select>

  <!--───────────────────────────────────────────────────────────────────────
   * description    : 페이지 상세조회 (페이지유형 : 페이지)
   * @
   * @ 수정일       수정자    수정내용
   * @ ──────────────────────────────────────────────────────────────────────
   * @ 2020.09.21   dgyoun    최초생성
   * @
  ────────────────────────────────────────────────────────────────────────-->
  <select id="selectPageInfo" resultMap="pageMap">
      /*displayManage.selectPageInfo*/
      SELECT  P.DP_PAGE_ID
            , P.PAGE_CD
            , P.PAGE_NM
            , P.DEPTH
            , P.PRNTS_PAGE_ID
            , P.DEPTH_1_PAGE_ID
            , P.DEPTH_2_PAGE_ID
            , P.DEPTH_3_PAGE_ID
            , P.DEPTH_4_PAGE_ID
            , P.DEPTH_5_PAGE_ID
            , P.SORT
            , P.USE_YN
            , P.DEL_YN
            , P.CREATE_ID
            , P.CREATE_DT
            , P.MODIFY_ID
            , P.MODIFY_DT
            , CASE WHEN P.USE_YN = 'Y' THEN '예' ELSE '아니오' END AS USE_YN_NM
            , CASE WHEN P.DEPTH = 1 THEN P.PAGE_NM
                   WHEN P.DEPTH = 2 THEN CONCAT(P1.PAGE_NM, ' > ', P.PAGE_NM)
                   WHEN P.DEPTH = 3 THEN CONCAT(P1.PAGE_NM, ' > ', P2.PAGE_NM, ' > ', P.PAGE_NM)
                   WHEN P.DEPTH = 4 THEN CONCAT(P1.PAGE_NM, ' > ', P2.PAGE_NM, ' > ', P3.PAGE_NM, ' > ', P.PAGE_NM)
                   WHEN P.DEPTH = 5 THEN CONCAT(P1.PAGE_NM, ' > ', P2.PAGE_NM, ' > ', P3.PAGE_NM, ' > ', P4.PAGE_NM, ' > ', P.PAGE_NM)
                   ELSE ''
              END  AS PAGE_FULL_PATH
      FROM    DP_PAGE P
                LEFT OUTER  JOIN  DP_PAGE P1
                              ON  P1.DP_PAGE_ID = P.DEPTH_1_PAGE_ID
                LEFT OUTER  JOIN  DP_PAGE P2
                              ON  P2.DP_PAGE_ID = P.DEPTH_2_PAGE_ID
                LEFT OUTER  JOIN  DP_PAGE P3
                              ON  P3.DP_PAGE_ID = P.DEPTH_3_PAGE_ID
                LEFT OUTER  JOIN  DP_PAGE P4
                              ON  P4.DP_PAGE_ID = P.DEPTH_4_PAGE_ID
    <where>
        AND   P.DP_PAGE_ID = #{dpPageId}
    </where>
  </select>

  <!--───────────────────────────────────────────────────────────────────────
   * description    : 페이지  수정
   * @
   * @ 수정일       수정자    수정내용
   * @ ──────────────────────────────────────────────────────────────────────
   * @ 2020.09.21   dgyoun    최초생성
   * @
  ────────────────────────────────────────────────────────────────────────-->
  <update id="putPage" parameterType="kr.co.pulmuone.v1.display.manage.dto.vo.PageVo">
      /*displayManage.putPage*/
      UPDATE  DP_PAGE
      SET     MODIFY_DT = NOW()
            , MODIFY_ID = #{modifyId}
            , PAGE_NM   = #{pageNm}
            , USE_YN    = #{useYn}
            , SORT      = #{sort}
    <where>
        AND   DP_PAGE_ID = #{dpPageId}
    </where>
  </update>

  <!--───────────────────────────────────────────────────────────────────────
   * description    : 페이지  순서수정
   * @
   * @ 수정일       수정자    수정내용
   * @ ──────────────────────────────────────────────────────────────────────
   * @ 2020.09.21   dgyoun    최초생성
   * @
  ────────────────────────────────────────────────────────────────────────-->
  <update id="putPageSort" parameterType="kr.co.pulmuone.v1.display.manage.dto.vo.PageVo">
      /*displayManage.putPageSort*/
      UPDATE  DP_PAGE
      SET     MODIFY_DT = NOW()
            , MODIFY_ID = #{modifyId}
            , SORT      = #{sort}
    <where>
        AND   DP_PAGE_ID = #{dpPageId}
    </where>
  </update>

  <!--───────────────────────────────────────────────────────────────────────
   * description    : 페이지  삭제
   * @
   * @ 수정일       수정자    수정내용
   * @ ──────────────────────────────────────────────────────────────────────
   * @ 2020.09.21   dgyoun    최초생성
   * @
  ────────────────────────────────────────────────────────────────────────-->
  <delete id="delPage" parameterType="kr.co.pulmuone.v1.display.manage.dto.vo.PageVo">
      /*displayManage.delPage*/
      UPDATE  DP_PAGE
      SET     MODIFY_DT = NOW()
            , MODIFY_ID = #{modifyId}
            , DEL_YN    = #{delYn}
    <where>
        AND   DP_PAGE_ID = #{dpPageId}
    </where>
  </delete>

  <!--───────────────────────────────────────────────────────────────────────
   * description    : 페이지  등록
   * @ DEPTH_1_PAGE_ID는 Not Null 이므로 0은 임시값
   * @
   * @ 수정일       수정자    수정내용
   * @ ──────────────────────────────────────────────────────────────────────
   * @ 2020.09.21   dgyoun    최초생성
   * @
  ────────────────────────────────────────────────────────────────────────-->
  <insert id="addPage" parameterType="kr.co.pulmuone.v1.display.manage.dto.vo.PageVo">
      /*displayManage.addPage*/
      INSERT INTO DP_PAGE (
          PAGE_CD
        , PAGE_NM
        , DEPTH
        , PRNTS_PAGE_ID
        , DEPTH_1_PAGE_ID
        , SORT
        , USE_YN
        , DEL_YN
        , CREATE_ID
        , CREATE_DT
        , MODIFY_ID
        , MODIFY_DT
      )
      VALUES (
          #{pageCd}
        , #{pageNm}
        , #{depth}
        , #{prntsPageId}
        , 0
        , #{sort}
        , #{useYn}
        , 'N'
        , #{createId}
        , NOW()
        , #{modifyId}
        , NOW()
      )
      <selectKey keyProperty="dpPageId" resultType="String" order="AFTER">
         SELECT CONCAT(LAST_INSERT_ID())
      </selectKey>
  </insert>

  <!--───────────────────────────────────────────────────────────────────────
   * description    : 페이지  등록 후처리 (추가 컬럼 작업, 업데이트 이력 없음)
   * @
   * @ 수정일       수정자    수정내용
   * @ ──────────────────────────────────────────────────────────────────────
   * @ 2020.09.21   dgyoun    최초생성
   * @
  ────────────────────────────────────────────────────────────────────────-->
  <update id="putPageAfterAdd" parameterType="kr.co.pulmuone.v1.display.manage.dto.vo.PageVo">
      /*displayManage.putPageAfterAdd*/
      WITH  ADD_PAGE AS (

        SELECT  #{dpPageId} AS ID_1
              , (SELECT PRNTS_PAGE_ID FROM DP_PAGE WHERE DP_PAGE_ID = #{dpPageId}) AS ID_2
              , (SELECT PRNTS_PAGE_ID FROM DP_PAGE WHERE DP_PAGE_ID = (SELECT PRNTS_PAGE_ID FROM DP_PAGE WHERE DP_PAGE_ID = #{dpPageId})) AS ID_3
              , (SELECT PRNTS_PAGE_ID FROM DP_PAGE WHERE DP_PAGE_ID = (SELECT PRNTS_PAGE_ID FROM DP_PAGE WHERE DP_PAGE_ID = (SELECT PRNTS_PAGE_ID FROM DP_PAGE WHERE DP_PAGE_ID = #{dpPageId}))) AS ID_4
              , (SELECT PRNTS_PAGE_ID FROM DP_PAGE WHERE DP_PAGE_ID = (SELECT PRNTS_PAGE_ID FROM DP_PAGE WHERE DP_PAGE_ID = (SELECT PRNTS_PAGE_ID FROM DP_PAGE WHERE DP_PAGE_ID = (SELECT PRNTS_PAGE_ID FROM DP_PAGE WHERE DP_PAGE_ID = #{dpPageId}))))  AS ID_5
      )
      UPDATE  DP_PAGE
      SET     DEPTH_1_PAGE_ID = (
                                SELECT  CASE WHEN #{depth} = 1 THEN ID_1
                                             WHEN #{depth} = 2 THEN ID_2
                                             WHEN #{depth} = 3 THEN ID_3
                                             WHEN #{depth} = 4 THEN ID_4
                                             WHEN #{depth} = 5 THEN ID_5
                                             ELSE 0
                                        END
                                FROM    ADD_PAGE
                                )
            , DEPTH_2_PAGE_ID = (
                                SELECT  CASE WHEN #{depth} = 1 THEN NULL
                                             WHEN #{depth} = 2 THEN ID_1
                                             WHEN #{depth} = 3 THEN ID_2
                                             WHEN #{depth} = 4 THEN ID_3
                                             WHEN #{depth} = 5 THEN ID_4
                                             ELSE NULL
                                        END
                                FROM    ADD_PAGE
                                )
            , DEPTH_3_PAGE_ID = (
                                SELECT  CASE WHEN #{depth} = 1 THEN NULL
                                             WHEN #{depth} = 2 THEN NULL
                                             WHEN #{depth} = 3 THEN ID_1
                                             WHEN #{depth} = 4 THEN ID_2
                                             WHEN #{depth} = 5 THEN ID_3
                                             ELSE NULL
                                        END
                                FROM    ADD_PAGE
                                )
            , DEPTH_4_PAGE_ID = (
                                SELECT  CASE WHEN #{depth} = 1 THEN NULL
                                             WHEN #{depth} = 2 THEN NULL
                                             WHEN #{depth} = 3 THEN NULL
                                             WHEN #{depth} = 4 THEN ID_1
                                             WHEN #{depth} = 5 THEN ID_2
                                             ELSE NULL
                                        END
                                FROM    ADD_PAGE
                                )
            , DEPTH_5_PAGE_ID = (
                                SELECT  CASE WHEN #{depth} = 1 THEN NULL
                                             WHEN #{depth} = 2 THEN NULL
                                             WHEN #{depth} = 3 THEN NULL
                                             WHEN #{depth} = 4 THEN NULL
                                             WHEN #{depth} = 5 THEN ID_1
                                             ELSE NULL
                                        END
                                FROM    ADD_PAGE
                                )
            , MODIFY_ID       = #{modifyId}
            , MODIFY_DT       = NOW()
      WHERE   DP_PAGE_ID = #{dpPageId}
  </update>

  <!-- ==================================================================== -->
  <!-- 인벤토리-->
  <!-- ==================================================================== -->
  <!--───────────────────────────────────────────────────────────────────────
   * description    : 인벤토리 리스트조회
   * @
   * @ 수정일       수정자    수정내용
   * @ ──────────────────────────────────────────────────────────────────────
   * @ 2020.09.21   dgyoun    최초생성
   * @
  ────────────────────────────────────────────────────────────────────────-->
  <select id="selectInventoryList" resultType="kr.co.pulmuone.v1.display.manage.dto.vo.InventoryVo">
      /*displayManage.selectInventoryList*/
      SELECT  I.DP_INVENTORY_ID
            , I.PAGE_TP
            , I.INVENTORY_CD
            , I.INVENTORY_CD  AS EXCEL_DISP_INVENTORY_CD
            , I.INVENTORY_NM
            , I.DP_PAGE_ID
            , I.MALL_DIV
            , I.CTGRY_DEPTH
            , I.DP_RANGE_TP
            , I.CONTS_LEVEL_1_TP
            , I.CONTS_LEVEL_2_TP
            , I.CONTS_LEVEL_3_TP
            , I.CONTS_LEVEL_1_DESC
            , I.CONTS_LEVEL_2_DESC
            , I.CONTS_LEVEL_3_DESC
            , I.SORT
            , I.USE_YN
            , I.DEL_YN
            , I.CREATE_ID
            , I.CREATE_DT
            , I.MODIFY_ID
            , I.MODIFY_DT
            , C4.NAME       AS DP_RANGE_TP_NM
            , C1.NAME       AS CONTS_LEVEL_1_TP_NM
            , C2.NAME       AS CONTS_LEVEL_2_TP_NM
            , C3.NAME       AS CONTS_LEVEL_3_TP_NM
            , CASE WHEN I.USE_YN = 'Y' THEN '예' ELSE '아니오' END AS USE_YN_NM
            , CASE WHEN I.PAGE_TP = 'PAGE_TP.CATEGORY' THEN #{pageNm}
                   WHEN I.PAGE_TP = 'PAGE_TP.PAGE'     THEN P.PAGE_NM
                   ELSE ''
              END AS PAGE_NM
            , CASE WHEN I.PAGE_TP = 'PAGE_TP.CATEGORY' THEN IFNULL(FN_CTGRY_FULL_NAME(#{dpPageId}), '')
                   WHEN I.PAGE_TP = 'PAGE_TP.PAGE'     THEN CASE WHEN P.DEPTH = 1 THEN P1.PAGE_NM
                                                                 WHEN P.DEPTH = 2 THEN CONCAT(P1.PAGE_NM, ' > ', P2.PAGE_NM)
                                                                 WHEN P.DEPTH = 3 THEN CONCAT(P1.PAGE_NM, ' > ', P2.PAGE_NM, ' > ', P3.PAGE_NM)
                                                                 WHEN P.DEPTH = 4 THEN CONCAT(P1.PAGE_NM, ' > ', P2.PAGE_NM, ' > ', P3.PAGE_NM, ' > ', P4.PAGE_NM)
                                                                 WHEN P.DEPTH = 5 THEN CONCAT(P1.PAGE_NM, ' > ', P2.PAGE_NM, ' > ', P3.PAGE_NM, ' > ', P4.PAGE_NM, ' > ', P5.PAGE_NM)
                                                                 ELSE ''
                                                            END
                   ELSE ''
              END AS PAGE_FULL_PATH
      FROM    DP_INVENTORY I
                  LEFT OUTER  JOIN  DP_PAGE P
                                ON  P.DP_PAGE_ID = I.DP_PAGE_ID
                  LEFT OUTER  JOIN  DP_PAGE P1
                                ON  P1.DP_PAGE_ID = P.DEPTH_1_PAGE_ID
                  LEFT OUTER  JOIN  DP_PAGE P2
                                ON  P2.DP_PAGE_ID = P.DEPTH_2_PAGE_ID
                  LEFT OUTER  JOIN  DP_PAGE P3
                                ON  P3.DP_PAGE_ID = P.DEPTH_3_PAGE_ID
                  LEFT OUTER  JOIN  DP_PAGE P4
                                ON  P4.DP_PAGE_ID = P.DEPTH_4_PAGE_ID
                  LEFT OUTER  JOIN  DP_PAGE P5
                                ON  P5.DP_PAGE_ID = P.DEPTH_5_PAGE_ID
                  LEFT OUTER  JOIN  (
                                    SELECT  CD.ST_COMN_CODE_ID AS CODE
                                          , DC.DIC_NM          AS NAME
                                    FROM    ST_COMN_CODE CD
                                          , GB_DIC DC
                                  <where>
                                      AND   CD.ST_COMN_CODE_MST_CD  = 'DP_CONTENTS_TP'
                                      AND   CD.GB_DIC_MST_ID        = DC.GB_DIC_MST_ID
                                      AND   DC.GB_LANG_ID           = '1'
                                  </where>
                                    ) C1
                              ON    C1.CODE  = I.CONTS_LEVEL_1_TP
                  LEFT OUTER  JOIN  (
                                    SELECT  CD.ST_COMN_CODE_ID AS CODE
                                          , DC.DIC_NM          AS NAME
                                    FROM    ST_COMN_CODE CD
                                          , GB_DIC DC
                                  <where>
                                      AND   CD.ST_COMN_CODE_MST_CD  = 'DP_CONTENTS_TP'
                                      AND   CD.GB_DIC_MST_ID        = DC.GB_DIC_MST_ID
                                      AND   DC.GB_LANG_ID           = '1'
                                  </where>
                                    ) C2
                              ON    C2.CODE  = I.CONTS_LEVEL_2_TP
                  LEFT OUTER  JOIN  (
                                    SELECT  CD.ST_COMN_CODE_ID AS CODE
                                          , DC.DIC_NM          AS NAME
                                    FROM    ST_COMN_CODE CD
                                          , GB_DIC DC
                                  <where>
                                      AND   CD.ST_COMN_CODE_MST_CD  = 'DP_CONTENTS_TP'
                                      AND   CD.GB_DIC_MST_ID        = DC.GB_DIC_MST_ID
                                      AND   DC.GB_LANG_ID           = '1'
                                  </where>
                                    ) C3
                              ON    C3.CODE  = I.CONTS_LEVEL_3_TP
                  LEFT OUTER  JOIN  (
                                    SELECT  CD.ST_COMN_CODE_ID AS CODE
                                          , DC.DIC_NM          AS NAME
                                    FROM    ST_COMN_CODE CD
                                          , GB_DIC DC
                                  <where>
                                      AND   CD.ST_COMN_CODE_MST_CD  = 'DP_RANGE_TP'
                                      AND   CD.GB_DIC_MST_ID        = DC.GB_DIC_MST_ID
                                      AND   DC.GB_LANG_ID           = '1'
                                  </where>
                                    ) C4
                              ON    C4.CODE  = I.DP_RANGE_TP
  <where>
        AND   I.PAGE_TP     = #{pageTp}
    <choose>
      <when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(pageTp, "PAGE_TP.CATEGORY")'>
        AND   I.MALL_DIV    = #{mallDiv}
        AND   I.CTGRY_DEPTH = #{depth}
        <!-- AND   I.DP_PAGE_ID  = #{dpPageId} -->
        <!-- 해당그룹체크 -->
        AND   CASE WHEN I.CTGRY_DEPTH = 1 THEN (SELECT PRNTS_CTGRY_ID FROM IL_CTGRY WHERE   IL_CTGRY_ID = I.DP_PAGE_ID)
                   WHEN I.CTGRY_DEPTH = 2 THEN (SELECT PRNTS_CTGRY_ID FROM IL_CTGRY WHERE   IL_CTGRY_ID = (SELECT PRNTS_CTGRY_ID FROM IL_CTGRY WHERE   IL_CTGRY_ID = I.DP_PAGE_ID))
                   WHEN I.CTGRY_DEPTH = 3 THEN (SELECT PRNTS_CTGRY_ID FROM IL_CTGRY WHERE   IL_CTGRY_ID = (SELECT PRNTS_CTGRY_ID FROM IL_CTGRY WHERE   IL_CTGRY_ID = (SELECT PRNTS_CTGRY_ID FROM IL_CTGRY WHERE   IL_CTGRY_ID = I.DP_PAGE_ID)))
                   WHEN I.CTGRY_DEPTH = 4 THEN (SELECT PRNTS_CTGRY_ID FROM IL_CTGRY WHERE   IL_CTGRY_ID = (SELECT PRNTS_CTGRY_ID FROM IL_CTGRY WHERE   IL_CTGRY_ID = (SELECT PRNTS_CTGRY_ID FROM IL_CTGRY WHERE   IL_CTGRY_ID = (SELECT PRNTS_CTGRY_ID FROM IL_CTGRY WHERE   IL_CTGRY_ID = I.DP_PAGE_ID))))
                   WHEN I.CTGRY_DEPTH = 5 THEN (SELECT PRNTS_CTGRY_ID FROM IL_CTGRY WHERE   IL_CTGRY_ID = (SELECT PRNTS_CTGRY_ID FROM IL_CTGRY WHERE   IL_CTGRY_ID = (SELECT PRNTS_CTGRY_ID FROM IL_CTGRY WHERE   IL_CTGRY_ID = (SELECT PRNTS_CTGRY_ID FROM IL_CTGRY WHERE   IL_CTGRY_ID = (SELECT PRNTS_CTGRY_ID FROM IL_CTGRY WHERE   IL_CTGRY_ID = I.DP_PAGE_ID)))))
                   ELSE -1
              END
              =
              CASE WHEN #{depth} = 1 THEN (SELECT PRNTS_CTGRY_ID FROM IL_CTGRY WHERE   IL_CTGRY_ID = #{dpPageId})
                   WHEN #{depth} = 2 THEN (SELECT PRNTS_CTGRY_ID FROM IL_CTGRY WHERE   IL_CTGRY_ID = (SELECT PRNTS_CTGRY_ID FROM IL_CTGRY WHERE   IL_CTGRY_ID = #{dpPageId}))
                   WHEN #{depth} = 3 THEN (SELECT PRNTS_CTGRY_ID FROM IL_CTGRY WHERE   IL_CTGRY_ID = (SELECT PRNTS_CTGRY_ID FROM IL_CTGRY WHERE   IL_CTGRY_ID = (SELECT PRNTS_CTGRY_ID FROM IL_CTGRY WHERE   IL_CTGRY_ID = #{dpPageId})))
                   WHEN #{depth} = 4 THEN (SELECT PRNTS_CTGRY_ID FROM IL_CTGRY WHERE   IL_CTGRY_ID = (SELECT PRNTS_CTGRY_ID FROM IL_CTGRY WHERE   IL_CTGRY_ID = (SELECT PRNTS_CTGRY_ID FROM IL_CTGRY WHERE   IL_CTGRY_ID = (SELECT PRNTS_CTGRY_ID FROM IL_CTGRY WHERE   IL_CTGRY_ID = #{dpPageId}))))
                   WHEN #{depth} = 5 THEN (SELECT PRNTS_CTGRY_ID FROM IL_CTGRY WHERE   IL_CTGRY_ID = (SELECT PRNTS_CTGRY_ID FROM IL_CTGRY WHERE   IL_CTGRY_ID = (SELECT PRNTS_CTGRY_ID FROM IL_CTGRY WHERE   IL_CTGRY_ID = (SELECT PRNTS_CTGRY_ID FROM IL_CTGRY WHERE   IL_CTGRY_ID = (SELECT PRNTS_CTGRY_ID FROM IL_CTGRY WHERE   IL_CTGRY_ID = #{dpPageId})))))
                   ELSE -2
              END
        <!--
        AND   I.DP_PAGE_ID  = CASE WHEN #{depth} = 1 THEN (SELECT PRNTS_CTGRY_ID FROM IL_CTGRY WHERE   IL_CTGRY_ID = #{dpPageId})
                                   WHEN #{depth} = 2 THEN (SELECT PRNTS_CTGRY_ID FROM IL_CTGRY WHERE   IL_CTGRY_ID = (SELECT PRNTS_CTGRY_ID FROM IL_CTGRY WHERE   IL_CTGRY_ID = #{dpPageId}))
                                   WHEN #{depth} = 3 THEN (SELECT PRNTS_CTGRY_ID FROM IL_CTGRY WHERE   IL_CTGRY_ID = (SELECT PRNTS_CTGRY_ID FROM IL_CTGRY WHERE   IL_CTGRY_ID = (SELECT PRNTS_CTGRY_ID FROM IL_CTGRY WHERE   IL_CTGRY_ID = #{dpPageId})))
                                   WHEN #{depth} = 4 THEN (SELECT PRNTS_CTGRY_ID FROM IL_CTGRY WHERE   IL_CTGRY_ID = (SELECT PRNTS_CTGRY_ID FROM IL_CTGRY WHERE   IL_CTGRY_ID = (SELECT PRNTS_CTGRY_ID FROM IL_CTGRY WHERE   IL_CTGRY_ID = (SELECT PRNTS_CTGRY_ID FROM IL_CTGRY WHERE   IL_CTGRY_ID = #{dpPageId}))))
                                   WHEN #{depth} = 5 THEN (SELECT PRNTS_CTGRY_ID FROM IL_CTGRY WHERE   IL_CTGRY_ID = (SELECT PRNTS_CTGRY_ID FROM IL_CTGRY WHERE   IL_CTGRY_ID = (SELECT PRNTS_CTGRY_ID FROM IL_CTGRY WHERE   IL_CTGRY_ID = (SELECT PRNTS_CTGRY_ID FROM IL_CTGRY WHERE   IL_CTGRY_ID = (SELECT PRNTS_CTGRY_ID FROM IL_CTGRY WHERE   IL_CTGRY_ID = #{dpPageId})))))
                                   ELSE -1
                              END
        -->
        <!--
        AND   'Y' = CASE WHEN #{depth} = 0 THEN (SELECT IFNULL(USE_YN, 'N') FROM IL_CTGRY WHERE IL_CTGRY_ID = #{dpPageId} AND DEL_YN = 'N')
                         WHEN #{depth} = 1 THEN (SELECT IFNULL(USE_YN, 'N') FROM IL_CTGRY WHERE IL_CTGRY_ID = (SELECT PRNTS_CTGRY_ID FROM IL_CTGRY WHERE IL_CTGRY_ID = #{dpPageId} AND DEL_YN = 'N') AND DEL_YN = 'N')
                         WHEN #{depth} = 2 THEN (SELECT IFNULL(USE_YN, 'N') FROM IL_CTGRY WHERE IL_CTGRY_ID = (SELECT PRNTS_CTGRY_ID FROM IL_CTGRY WHERE IL_CTGRY_ID = (SELECT PRNTS_CTGRY_ID FROM IL_CTGRY WHERE IL_CTGRY_ID = #{dpPageId} AND DEL_YN = 'N') AND DEL_YN = 'N') AND DEL_YN = 'N')
                         WHEN #{depth} = 3 THEN (SELECT IFNULL(USE_YN, 'N') FROM IL_CTGRY WHERE IL_CTGRY_ID = (SELECT PRNTS_CTGRY_ID FROM IL_CTGRY WHERE IL_CTGRY_ID = (SELECT PRNTS_CTGRY_ID FROM IL_CTGRY WHERE IL_CTGRY_ID = (SELECT PRNTS_CTGRY_ID FROM IL_CTGRY WHERE IL_CTGRY_ID = #{dpPageId} AND DEL_YN = 'N') AND DEL_YN = 'N') AND DEL_YN = 'N') AND DEL_YN = 'N')
                         WHEN #{depth} = 4 THEN (SELECT IFNULL(USE_YN, 'N') FROM IL_CTGRY WHERE IL_CTGRY_ID = (SELECT PRNTS_CTGRY_ID FROM IL_CTGRY WHERE IL_CTGRY_ID = (SELECT PRNTS_CTGRY_ID FROM IL_CTGRY WHERE IL_CTGRY_ID = (SELECT PRNTS_CTGRY_ID FROM IL_CTGRY WHERE IL_CTGRY_ID = (SELECT PRNTS_CTGRY_ID FROM IL_CTGRY WHERE IL_CTGRY_ID = #{dpPageId} AND DEL_YN = 'N') AND DEL_YN = 'N') AND DEL_YN = 'N') AND DEL_YN = 'N') AND DEL_YN = 'N')
                         WHEN #{depth} = 5 THEN (SELECT IFNULL(USE_YN, 'N') FROM IL_CTGRY WHERE IL_CTGRY_ID = (SELECT PRNTS_CTGRY_ID FROM IL_CTGRY WHERE IL_CTGRY_ID = (SELECT PRNTS_CTGRY_ID FROM IL_CTGRY WHERE IL_CTGRY_ID = (SELECT PRNTS_CTGRY_ID FROM IL_CTGRY WHERE IL_CTGRY_ID = (SELECT PRNTS_CTGRY_ID FROM IL_CTGRY WHERE IL_CTGRY_ID = (SELECT PRNTS_CTGRY_ID FROM IL_CTGRY WHERE IL_CTGRY_ID = #{dpPageId} AND DEL_YN = 'N') AND DEL_YN = 'N') AND DEL_YN = 'N') AND DEL_YN = 'N') AND DEL_YN = 'N') AND DEL_YN = 'N')
                         ELSE 'N'
                    END
        -->
      </when>
      <when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(pageTp, "PAGE_TP.PAGE")'>
        AND   I.DP_PAGE_ID  = #{dpPageId}
      </when>
      <otherwise>
        AND   1 = 2
      </otherwise>
    </choose>
      <if test='@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(useYn)'>
        AND   I.USE_YN      = #{useYn}
      </if>
        AND   I.DEL_YN      = 'N'
  </where>
      ORDER BY I.SORT, I.INVENTORY_CD
  </select>

  <!--───────────────────────────────────────────────────────────────────────
   * description    : 인벤토리코드리스트 조회
   * @
   * @ 수정일       수정자    수정내용
   * @ ──────────────────────────────────────────────────────────────────────
   * @ 2020.10.15   dgyoun    최초생성
   * @
  ────────────────────────────────────────────────────────────────────────-->
  <select id="selectInventoryCdList" resultType="kr.co.pulmuone.v1.display.manage.dto.vo.InventoryVo">
      /*displayManage.selectInventoryCdList*/
      SELECT  I.DP_INVENTORY_ID
            , I.PAGE_TP
            , I.INVENTORY_CD
            , I.INVENTORY_NM
            , I.DP_PAGE_ID
            , I.MALL_DIV
            , I.CTGRY_DEPTH
            , I.DP_RANGE_TP
            , I.CONTS_LEVEL_1_TP
            , I.CONTS_LEVEL_2_TP
            , I.CONTS_LEVEL_3_TP
            , I.CONTS_LEVEL_1_DESC
            , I.CONTS_LEVEL_2_DESC
            , I.CONTS_LEVEL_3_DESC
            , I.SORT
            , I.USE_YN
            , I.DEL_YN
            , I.CREATE_ID
            , I.CREATE_DT
            , I.MODIFY_ID
            , I.MODIFY_DT
      FROM    DP_INVENTORY I
  <where>
    <choose>
      <when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(inventoryCdList) and inventoryCdList.size() > 0'>
        <!-- 인벤토리 코드 존재 체크 -->
        AND   I.INVENTORY_CD IN <foreach collection="inventoryCdList" item="inventoryCd" index="index" separator="," open="(" close=")">
                                  #{inventoryCd}
                                </foreach>
        AND   I.PAGE_TP = #{pageTp}
        AND   I.USE_YN  = 'Y'
      </when>
      <otherwise>
        <!-- 인벤토리 중복 체크 -->
        AND   I.INVENTORY_CD = #{inventoryCd}
      </otherwise>
    </choose>
        AND   I.DEL_YN      = 'N'
  </where>
      ORDER BY I.SORT, I.INVENTORY_CD
  </select>

  <!--───────────────────────────────────────────────────────────────────────
   * description    : 인벤토리코드리스트 조회 - 카테고리용
   * @
   * @ 수정일       수정자    수정내용
   * @ ──────────────────────────────────────────────────────────────────────
   * @ 2020.11.12   dgyoun    최초생성
   * @
  ────────────────────────────────────────────────────────────────────────-->
  <select id="selectInventoryCdListForCategory" resultType="kr.co.pulmuone.v1.display.manage.dto.vo.InventoryVo">
      /*displayManage.selectInventoryCdListForCategory*/
      SELECT  I.DP_INVENTORY_ID
            , I.PAGE_TP
            , I.INVENTORY_CD
            , I.INVENTORY_NM
            , I.DP_PAGE_ID
            , I.MALL_DIV
            , I.CTGRY_DEPTH
            , I.DP_RANGE_TP
            , I.CONTS_LEVEL_1_TP
            , I.CONTS_LEVEL_2_TP
            , I.CONTS_LEVEL_3_TP
            , I.CONTS_LEVEL_1_DESC
            , I.CONTS_LEVEL_2_DESC
            , I.CONTS_LEVEL_3_DESC
            , I.SORT
            , I.USE_YN
            , I.DEL_YN
            , I.CREATE_ID
            , I.CREATE_DT
            , I.MODIFY_ID
            , I.MODIFY_DT
            , #{ilCtgryId}    AS IL_CTGRY_ID
      FROM    DP_INVENTORY I
    <where>
        AND   I.INVENTORY_CD  = #{inventoryCd}
        AND   I.PAGE_TP       = #{pageTp}
        AND   I.USE_YN         = 'Y'
        AND   I.DEL_YN         = 'N'
        AND   EXISTS (SELECT 1 FROM IL_CTGRY C WHERE C.IL_CTGRY_ID = #{ilCtgryId} AND C.DEPTH = I.CTGRY_DEPTH AND C.USE_YN = 'Y' AND C.DEL_YN = 'N')
    </where>
  </select>

  <!--───────────────────────────────────────────────────────────────────────
   * description    : 인벤토리 상세조회
   * @
   * @ 수정일       수정자    수정내용
   * @ ──────────────────────────────────────────────────────────────────────
   * @ 2020.09.21   dgyoun    최초생성
   * @
  ────────────────────────────────────────────────────────────────────────-->
  <select id="selectInventoryInfo" resultType="kr.co.pulmuone.v1.display.manage.dto.vo.InventoryVo">
      /*displayManage.selectInventoryInfo*/
      SELECT  I.DP_INVENTORY_ID
            , I.PAGE_TP
            , I.INVENTORY_CD
            , I.INVENTORY_NM
            , I.DP_PAGE_ID
            , I.MALL_DIV
            , I.CTGRY_DEPTH
            , I.DP_RANGE_TP
            , I.CONTS_LEVEL_1_TP
            , I.CONTS_LEVEL_2_TP
            , I.CONTS_LEVEL_3_TP
            , I.SORT
            , I.USE_YN
            , I.DEL_YN
            , I.CREATE_ID
            , I.CREATE_DT
            , I.MODIFY_ID
            , I.MODIFY_DT
            , C4.NAME       AS DP_RANGE_TP_NM
            , C1.NAME       AS CONTS_LEVEL_1_TP_NM
            , C2.NAME       AS CONTS_LEVEL_2_TP_NM
            , C3.NAME       AS CONTS_LEVEL_3_TP_NM
            , CASE WHEN I.USE_YN = 'Y' THEN '예' ELSE '아니오' END AS USE_YN_NM
      FROM    DP_INVENTORY I
                  LEFT OUTER  JOIN  (
                                    SELECT  CD.ST_COMN_CODE_ID AS CODE
                                          , DC.DIC_NM          AS NAME
                                    FROM    ST_COMN_CODE CD
                                          , GB_DIC DC
                                  <where>
                                      AND   CD.ST_COMN_CODE_MST_CD  = 'DP_CONTENTS_TP'
                                      AND   CD.GB_DIC_MST_ID        = DC.GB_DIC_MST_ID
                                      AND   DC.GB_LANG_ID           = '1'
                                  </where>
                                    ) C1
                              ON    C1.CODE  = C.CONTS_LEVEL_1_TP
                  LEFT OUTER  JOIN  (
                                    SELECT  CD.ST_COMN_CODE_ID AS CODE
                                          , DC.DIC_NM          AS NAME
                                    FROM    ST_COMN_CODE CD
                                          , GB_DIC DC
                                  <where>
                                      AND   CD.ST_COMN_CODE_MST_CD  = 'DP_CONTENTS_TP'
                                      AND   CD.GB_DIC_MST_ID        = DC.GB_DIC_MST_ID
                                      AND   DC.GB_LANG_ID           = '1'
                                  </where>
                                    ) C2
                              ON    C2.CODE  = C.CONTS_LEVEL_2_TP
                  LEFT OUTER  JOIN  (
                                    SELECT  CD.ST_COMN_CODE_ID AS CODE
                                          , DC.DIC_NM          AS NAME
                                    FROM    ST_COMN_CODE CD
                                          , GB_DIC DC
                                  <where>
                                      AND   CD.ST_COMN_CODE_MST_CD  = 'DP_CONTENTS_TP'
                                      AND   CD.GB_DIC_MST_ID        = DC.GB_DIC_MST_ID
                                      AND   DC.GB_LANG_ID           = '1'
                                  </where>
                                    ) C3
                              ON    C3.CODE  = C.CONTS_LEVEL_3_TP
                  LEFT OUTER  JOIN  (
                                    SELECT  CD.ST_COMN_CODE_ID AS CODE
                                          , DC.DIC_NM          AS NAME
                                    FROM    ST_COMN_CODE CD
                                          , GB_DIC DC
                                  <where>
                                      AND   CD.ST_COMN_CODE_MST_CD  = 'DP_RANGE_TP'
                                      AND   CD.GB_DIC_MST_ID        = DC.GB_DIC_MST_ID
                                      AND   DC.GB_LANG_ID           = '1'
                                  </where>
                                    ) C4
                              ON    C4.CODE  = C.DP_RANGE_TP
    <where>
        AND   I.DP_INVENTORY_ID = #{dpInventoryId}
    </where>
  </select>

  <!--───────────────────────────────────────────────────────────────────────
   * description    : 인벤토리  수정
   * @
   * @ 수정일       수정자    수정내용
   * @ ──────────────────────────────────────────────────────────────────────
   * @ 2020.09.21   dgyoun    최초생성
   * @
  ────────────────────────────────────────────────────────────────────────-->
  <update id="putInventory" parameterType="kr.co.pulmuone.v1.display.manage.dto.vo.InventoryVo">
      /*displayManage.putInventory*/
      UPDATE  DP_INVENTORY
      SET     MODIFY_DT     = NOW()
            , MODIFY_ID     = #{modifyId}
            , INVENTORY_NM  = #{inventoryNm}
            , USE_YN        = #{useYn}
            , DP_RANGE_TP   = #{dpRangeTp}
            , SORT          = #{sort}
    <where>
        AND   DP_INVENTORY_ID = #{dpInventoryId}
    </where>
  </update>

  <!--───────────────────────────────────────────────────────────────────────
   * description    : 인벤토리  순서수정
   * @
   * @ 수정일       수정자    수정내용
   * @ ──────────────────────────────────────────────────────────────────────
   * @ 2020.09.21   dgyoun    최초생성
   * @
  ────────────────────────────────────────────────────────────────────────-->
  <update id="putInventorySort" parameterType="kr.co.pulmuone.v1.display.manage.dto.vo.InventoryVo">
      /*displayManage.putInventorySort*/
      UPDATE  DP_INVENTORY
      SET     MODIFY_DT     = NOW()
            , MODIFY_ID     = #{modifyId}
            , SORT          = #{sort}
    <where>
        AND   DP_INVENTORY_ID = #{dpInventoryId}
    </where>
  </update>

  <!--───────────────────────────────────────────────────────────────────────
   * description    : 인벤토리  삭제
   * @
   * @ 수정일       수정자    수정내용
   * @ ──────────────────────────────────────────────────────────────────────
   * @ 2020.09.21   dgyoun    최초생성
   * @
  ────────────────────────────────────────────────────────────────────────-->
  <delete id="delInventory" parameterType="kr.co.pulmuone.v1.display.manage.dto.vo.InventoryVo">
      /*displayManage.delInventory*/
      UPDATE  DP_INVENTORY
      SET     MODIFY_DT     = NOW()
            , MODIFY_ID     = #{modifyId}
            , DEL_YN        = #{delYn}
    <where>
        AND   DP_INVENTORY_ID = #{dpInventoryId}
    </where>
  </delete>

  <!--───────────────────────────────────────────────────────────────────────
   * description    : 인벤토리  등록
   * @
   * @ 수정일       수정자    수정내용
   * @ ──────────────────────────────────────────────────────────────────────
   * @ 2020.09.21   dgyoun    최초생성
   * @
  ────────────────────────────────────────────────────────────────────────-->
  <insert id="addInventory" parameterType="kr.co.pulmuone.v1.display.manage.dto.vo.InventoryVo">
      /*displayManage.addInventory*/
      INSERT INTO DP_INVENTORY (
          PAGE_TP
        , INVENTORY_CD
        , INVENTORY_NM
        , DP_PAGE_ID
        , MALL_DIV
        , CTGRY_DEPTH
        , GRP_CTGRY_ID
        , DP_RANGE_TP
        , CONTS_LEVEL_1_TP
        , CONTS_LEVEL_2_TP
        , CONTS_LEVEL_3_TP
        , CONTS_LEVEL_1_DESC
        , CONTS_LEVEL_2_DESC
        , CONTS_LEVEL_3_DESC
        , SORT
        , USE_YN
        , DEL_YN
        , CREATE_ID
        , CREATE_DT
        , MODIFY_ID
        , MODIFY_DT
      )
      SELECT  #{pageTp}
            , #{inventoryCd}
            , #{inventoryNm}
            , #{dpPageId}
            , #{mallDiv}
            , #{ctgryDepth}
            , CASE WHEN #{ctgryDepth} = 1 THEN (SELECT PRNTS_CTGRY_ID FROM IL_CTGRY WHERE IL_CTGRY_ID = #{dpPageId})
                   WHEN #{ctgryDepth} = 2 THEN (SELECT PRNTS_CTGRY_ID FROM IL_CTGRY WHERE   IL_CTGRY_ID = (SELECT PRNTS_CTGRY_ID FROM IL_CTGRY WHERE   IL_CTGRY_ID = #{dpPageId}))
                   WHEN #{ctgryDepth} = 3 THEN (SELECT PRNTS_CTGRY_ID FROM IL_CTGRY WHERE   IL_CTGRY_ID = (SELECT PRNTS_CTGRY_ID FROM IL_CTGRY WHERE   IL_CTGRY_ID = (SELECT PRNTS_CTGRY_ID FROM IL_CTGRY WHERE   IL_CTGRY_ID = #{dpPageId})))
                   WHEN #{ctgryDepth} = 4 THEN (SELECT PRNTS_CTGRY_ID FROM IL_CTGRY WHERE   IL_CTGRY_ID = (SELECT PRNTS_CTGRY_ID FROM IL_CTGRY WHERE   IL_CTGRY_ID = (SELECT PRNTS_CTGRY_ID FROM IL_CTGRY WHERE   IL_CTGRY_ID = (SELECT PRNTS_CTGRY_ID FROM IL_CTGRY WHERE   IL_CTGRY_ID = #{dpPageId}))))
                   WHEN #{ctgryDepth} = 5 THEN (SELECT PRNTS_CTGRY_ID FROM IL_CTGRY WHERE   IL_CTGRY_ID = (SELECT PRNTS_CTGRY_ID FROM IL_CTGRY WHERE   IL_CTGRY_ID = (SELECT PRNTS_CTGRY_ID FROM IL_CTGRY WHERE   IL_CTGRY_ID = (SELECT PRNTS_CTGRY_ID FROM IL_CTGRY WHERE   IL_CTGRY_ID = (SELECT PRNTS_CTGRY_ID FROM IL_CTGRY WHERE   IL_CTGRY_ID = #{dpPageId})))))
                   ELSE 0
              END
            , #{dpRangeTp}
            , #{contsLevel1Tp}
            , #{contsLevel2Tp}
            , #{contsLevel3Tp}
            , #{contsLevel1Desc}
            , #{contsLevel2Desc}
            , #{contsLevel3Desc}
            , #{sort}
            , #{useYn}
            , 'N'
            , #{createId}
            , NOW()
            , #{modifyId}
            , NOW()
      <selectKey keyProperty="dpInventoryId" resultType="String" order="AFTER">
         SELECT CONCAT(LAST_INSERT_ID())
      </selectKey>
  </insert>


  <!-- ==================================================================== -->
  <!-- 컨텐츠-->
  <!-- ==================================================================== -->
  <!--───────────────────────────────────────────────────────────────────────
   * description    : 컨텐츠 리스트조회
   * @
   * @ 수정일       수정자    수정내용
   * @ ──────────────────────────────────────────────────────────────────────
   * @ 2020.09.21   dgyoun    최초생성
   * @
  ────────────────────────────────────────────────────────────────────────-->
  <select id="selectDpContsList" resultMap="contsMap">
      /*displayManage.selectDpContsList*/
      SELECT  C.DP_CONTS_ID
            , C.DP_INVENTORY_ID
            , C.IL_CTGRY_ID
            , C.CONTS_TP
            , C.CONTS_LEVEL
            , C.PRNTS_CONTS_ID
            , C.LEVEL_1_CONTS_ID
            , C.LEVEL_2_CONTS_ID
            , C.LEVEL_3_CONTS_ID
            , C.DP_START_DT
            , C.DP_END_DT
            , C.DP_RANGE_TP
            , C.TITLE_NM
            , C.DP_CTGRY_ID
            , C.TEXT_1
            , C.TEXT_1_COLOR
            , CONCAT(CASE WHEN IFNULL(C.TEXT_1_COLOR, '') = '' THEN '' ELSE CONCAT('[', C.TEXT_1_COLOR, '] ') END,
                     CASE WHEN IFNULL(C.TEXT_1, '') = '' THEN '' ELSE C.TEXT_1 END
              ) AS TEXT_1_STRING
            , C.TEXT_2
            , C.TEXT_2_COLOR
            , CONCAT(CASE WHEN IFNULL(C.TEXT_2_COLOR, '') = '' THEN '' ELSE CONCAT('[', C.TEXT_2_COLOR, '] ') END,
                     CASE WHEN IFNULL(C.TEXT_2, '') = '' THEN '' ELSE C.TEXT_2 END
              ) AS TEXT_2_STRING
            , C.TEXT_3
            , C.TEXT_3_COLOR
            , CONCAT(CASE WHEN IFNULL(C.TEXT_3_COLOR, '') = '' THEN '' ELSE CONCAT('[', C.TEXT_3_COLOR, '] ') END,
                     CASE WHEN IFNULL(C.TEXT_3, '') = '' THEN '' ELSE C.TEXT_3 END
              ) AS TEXT_3_STRING
            , CASE WHEN C.CONTS_TP = 'DP_CONTENTS_TP.GOODS' THEN CONCAT(IFNULL(#{hostUrl}, ''), IFNULL(#{goodsDetailUrl}, ''), C.CONTS_ID)
                   ELSE IFNULL(C.LINK_URL_PC, '')
              END  AS LINK_URL_PC
            , CASE WHEN C.CONTS_TP = 'DP_CONTENTS_TP.GOODS' THEN CONCAT(IFNULL(#{hostUrl}, ''), IFNULL(#{goodsDetailUrl}, ''), C.CONTS_ID)
                   ELSE IFNULL(C.LINK_URL_MOBILE, '')
              END  AS LINK_URL_MOBILE
            , IFNULL(NULLIF(C.HTML_PC, ''),IFNULL(C.HTML_MOBILE, ''))          AS HTML_PC
            , IFNULL(C.HTML_MOBILE, '')               AS HTML_MOBILE
            , IFNULL(NULLIF(C.IMG_PATH_PC, ''), IFNULL(C.IMG_PATH_MOBILE,''))               AS IMG_PATH_PC
            , IFNULL(NULLIF(C.IMG_ORIGIN_NM_PC,''), IFNULL(C.IMG_ORIGIN_NM_MOBILE,''))         AS IMG_ORIGIN_NM_PC
            , IFNULL(C.IMG_PATH_MOBILE, '')           AS IMG_PATH_MOBILE
            , IFNULL(C.IMG_ORIGIN_NM_MOBILE, '')      AS IMG_ORIGIN_NM_MOBILE
            , IFNULL(NULLIF(C.GIF_IMG_PATH_PC, ''), IFNULL(C.GIF_IMG_PATH_MOBILE,''))           AS GIF_IMG_PATH_PC
            , IFNULL(NULLIF(C.GIF_IMG_ORIGIN_NM_PC, ''), IFNULL(C.GIF_IMG_ORIGIN_NM_MOBILE,''))      AS GIF_IMG_ORIGIN_NM_PC
            , IFNULL(C.GIF_IMG_PATH_MOBILE, '')       AS GIF_IMG_PATH_MOBILE
            , IFNULL(C.GIF_IMG_ORIGIN_NM_MOBILE, '')  AS GIF_IMG_ORIGIN_NM_MOBILE
            , C.CONTS_ID
            , C.DP_COND_TP
            , C.DP_SORT_TP
            , C.SORT
            , C.USE_YN
            , C.DEL_YN
            , C.CREATE_ID
            , C.CREATE_DT
            , C.MODIFY_ID
            , C.MODIFY_DT
            , IC.MALL_DIV
            , IFNULL(IC.DEPTH, 0)   AS CTGRY_DEPTH
            , P.CTGRY_ID_DEPTH0
            , P.CTGRY_ID_DEPTH1
            , P.CTGRY_ID_DEPTH2
            , P.CTGRY_ID_DEPTH3
            , P.CTGRY_ID_DEPTH4
            , P.CTGRY_ID_DEPTH5
            , I.CONTS_LEVEL_1_DESC
            , I.CONTS_LEVEL_2_DESC
            , I.CONTS_LEVEL_3_DESC
            , C1.NAME     AS CONTS_TP_NM
            , C2.NAME     AS CONTS_LEVEL_NM
            , C3.NAME     AS DP_RANGE_TP_NM
            , C4.NAME     AS DP_COND_TP_NM
            , C5.NAME     AS DP_SORT_TP_NM
            , C8.NAME     AS MALL_DIV_NM
            , CASE WHEN C.USE_YN = 'Y' THEN '예' ELSE '아니오' END AS USE_YN_NM
            , CASE WHEN C.DP_START_DT  <![CDATA[>]]>  NOW() THEN '진행예정'
                   WHEN C.DP_START_DT  <![CDATA[<=]]> NOW()
                        AND
                        C.DP_END_DT    <![CDATA[>=]]> NOW() THEN '진행중'
                   WHEN C.DP_END_DT    <![CDATA[<]]>  NOW() THEN '진행종료'
                   ELSE ''
              END  STATUS_NM
            <!-- , IFNULL(FN_CTGRY_FULL_NAME(C.IL_CTGRY_ID), '') AS CTGRY_FULL_NM -->
            , IFNULL(FN_CTGRY_FULL_NAME(C.DP_CTGRY_ID), '') AS CTGRY_FULL_NM
            , CASE WHEN C.CONTS_TP = 'DP_CONTENTS_TP.BRAND'    THEN CB.DP_BRAND_NM
                   WHEN C.CONTS_TP = 'DP_CONTENTS_TP.GOODS'    THEN CG.GOODS_NM
                   ELSE ''
              END  AS CONTS_NM
            , CG.GOODS_TP
            , CASE WHEN C.CONTS_TP = 'DP_CONTENTS_TP.GOODS' THEN C6.NAME
                   ELSE ''
              END  AS GOODS_TYPE_NAME
            , IT.UR_SUPPLIER_ID
            , IFNULL(UC.COMP_NM, '')          AS SUPPLIER_NAME
            , IFNULL(GP.RECOMMENDED_PRICE, 0) AS RECOMMENDED_PRICE
            , IFNULL(GP.SALE_PRICE, 0)        AS SALE_PRICE
            , CG.DISP_WEB_PC_YN
            , CG.DISP_WEB_MOBILE_YN
            , CG.DISP_APP_YN
            , CASE WHEN CG.DISP_WEB_PC_YN     = 'Y' THEN 'PC'  ELSE '' END AS  DISP_WEB_PC_YN_NM
            , CASE WHEN CG.DISP_WEB_MOBILE_YN = 'Y' THEN 'M'   ELSE '' END AS  DISP_WEB_MOBILE_YN_NM
            , CASE WHEN CG.DISP_APP_YN        = 'Y' THEN 'APP' ELSE '' END AS  DISP_APP_YN_NM
            , CG.PURCHASE_MEMBER_YN
            , CG.PURCHASE_EMPLOYEE_YN
            , CG.PURCHASE_NONMEMBER_YN
            , CASE WHEN CG.PURCHASE_MEMBER_YN    = 'Y' THEN '일반'  ELSE '' END  AS  PURCHASE_MEMBER_YN_NM
            , CASE WHEN CG.PURCHASE_EMPLOYEE_YN  = 'Y' THEN '임직원' ELSE '' END AS  PURCHASE_EMPLOYEE_YN_NM
            , CASE WHEN CG.PURCHASE_NONMEMBER_YN = 'Y' THEN '비회원' ELSE '' END AS  PURCHASE_NONMEMBER_YN_NM
            , GC.IL_CTGRY_ID                                 AS GOODS_BASIC_CTGRY_ID
            , IFNULL(FN_CTGRY_FULL_NAME(GC.IL_CTGRY_ID), '') AS GOODS_BASIC_CTGRY_FULL_NM
            , CG.SALE_STATUS
            , C7.NAME                   AS SALE_STATUS_NAME
            , CG.DISP_YN
            , CASE WHEN CG.DISP_YN = 'Y' THEN '전시' ELSE '미전시' END  AS DISP_YN_NM
            , IT.DP_BRAND_ID            AS GOODS_BRAND_ID
            , IFNULL(GB.DP_BRAND_NM, '')   AS GOODS_BRAND_NM
      FROM    DP_CONTS C
                  JOIN  DP_INVENTORY I
                  ON    I.DP_INVENTORY_ID = C.DP_INVENTORY_ID
                  LEFT OUTER  JOIN  IL_CTGRY_PRNTS_INFO P
                              ON    P.IL_CTGRY_ID = C.DP_CTGRY_ID
                  LEFT OUTER  JOIN  IL_CTGRY IC
                              ON    IC.IL_CTGRY_ID = C.DP_CTGRY_ID
                  LEFT OUTER  JOIN  (
                                    SELECT  CD.ST_COMN_CODE_ID AS CODE
                                          , DC.DIC_NM          AS NAME
                                    FROM    ST_COMN_CODE CD
                                          , GB_DIC DC
                                    WHERE   CD.ST_COMN_CODE_MST_CD  = 'DP_CONTENTS_TP'
                                      AND   CD.GB_DIC_MST_ID        = DC.GB_DIC_MST_ID
                                      AND   DC.GB_LANG_ID           = '1'
                                    ) C1
                              ON    C1.CODE  = C.CONTS_TP
                  LEFT OUTER  JOIN  (
                                    SELECT  CD.ST_COMN_CODE_ID AS CODE
                                          , DC.DIC_NM          AS NAME
                                    FROM    ST_COMN_CODE CD
                                          , GB_DIC DC
                                    WHERE   CD.ST_COMN_CODE_MST_CD  = 'CONTS_LEVEL'
                                      AND   CD.GB_DIC_MST_ID        = DC.GB_DIC_MST_ID
                                      AND   DC.GB_LANG_ID           = '1'
                                    ) C2
                              ON    C2.CODE  = C.CONTS_LEVEL
                  LEFT OUTER  JOIN  (
                                    SELECT  CD.ST_COMN_CODE_ID AS CODE
                                          , DC.DIC_NM          AS NAME
                                    FROM    ST_COMN_CODE CD
                                          , GB_DIC DC
                                    WHERE   CD.ST_COMN_CODE_MST_CD  = 'DP_RANGE_TP'
                                      AND   CD.GB_DIC_MST_ID        = DC.GB_DIC_MST_ID
                                      AND   DC.GB_LANG_ID           = '1'
                                    ) C3
                              ON    C3.CODE  = C.DP_RANGE_TP
                  LEFT OUTER  JOIN  (
                                    SELECT  CD.ST_COMN_CODE_ID AS CODE
                                          , DC.DIC_NM          AS NAME
                                    FROM    ST_COMN_CODE CD
                                          , GB_DIC DC
                                    WHERE   CD.ST_COMN_CODE_MST_CD  = 'DP_COND_TP'
                                      AND   CD.GB_DIC_MST_ID        = DC.GB_DIC_MST_ID
                                      AND   DC.GB_LANG_ID           = '1'
                                    ) C4
                              ON    C4.CODE  = C.DP_COND_TP
                  LEFT OUTER  JOIN  (
                                    SELECT  CD.ST_COMN_CODE_ID AS CODE
                                          , DC.DIC_NM          AS NAME
                                    FROM    ST_COMN_CODE CD
                                          , GB_DIC DC
                                    WHERE   CD.ST_COMN_CODE_MST_CD  = 'DP_SORT_TP'
                                      AND   CD.GB_DIC_MST_ID        = DC.GB_DIC_MST_ID
                                      AND   DC.GB_LANG_ID           = '1'
                                    ) C5
                              ON    C5.CODE  = C.DP_SORT_TP
                 LEFT OUTER   JOIN  DP_BRAND CB
                              ON    C.CONTS_TP      = 'DP_CONTENTS_TP.BRAND'
                              AND   CB.DP_BRAND_ID  = C.CONTS_ID
                 LEFT OUTER   JOIN  IL_GOODS CG
                              ON    C.CONTS_TP      = 'DP_CONTENTS_TP.GOODS'
                              AND   CG.IL_GOODS_ID  = C.CONTS_ID
                 LEFT OUTER   JOIN  (
                                    SELECT  CD.ST_COMN_CODE_ID AS CODE
                                          , DC.DIC_NM          AS NAME
                                    FROM    ST_COMN_CODE CD
                                          , GB_DIC DC
                                    WHERE   CD.ST_COMN_CODE_MST_CD  = 'GOODS_TYPE'
                                      AND   CD.GB_DIC_MST_ID        = DC.GB_DIC_MST_ID
                                      AND   DC.GB_LANG_ID           = '1'
                                    ) C6
                              ON    C6.CODE  = CG.GOODS_TP
                 LEFT OUTER   JOIN  IL_ITEM IT
                              ON    IT.IL_ITEM_CD = CG.IL_ITEM_CD
                 LEFT OUTER   JOIN  UR_SUPPLIER S
                              ON    S.UR_SUPPLIER_ID = IT.UR_SUPPLIER_ID
                 LEFT OUTER   JOIN  UR_COMPANY UC
                              ON    UC.UR_COMPANY_ID = S.UR_COMPANY_ID
                 LEFT OUTER   JOIN  IL_GOODS_PRICE GP
                              ON    GP.IL_GOODS_ID = CG.IL_GOODS_ID
                              AND   NOW() BETWEEN GP.PRICE_START_DT AND GP.PRICE_END_DT
                              AND   GP.USE_YN = 'Y'
                 LEFT OUTER   JOIN  IL_GOODS_CTGRY GC
                              ON    GC.IL_GOODS_ID = CG.IL_GOODS_ID
                              AND   GC.MALL_DIV = 'MALL_DIV.PULMUONE'
                              AND   GC.BASIC_YN = 'Y'
                 LEFT OUTER   JOIN  (
                                    SELECT  CD.ST_COMN_CODE_ID AS CODE
                                          , DC.DIC_NM          AS NAME
                                    FROM    ST_COMN_CODE CD
                                          , GB_DIC DC
                                    WHERE   CD.ST_COMN_CODE_MST_CD  = 'SALE_STATUS'
                                      AND   CD.GB_DIC_MST_ID        = DC.GB_DIC_MST_ID
                                      AND   DC.GB_LANG_ID           = '1'
                                    ) C7
                              ON    C7.CODE  = CG.SALE_STATUS
                 LEFT OUTER   JOIN  DP_BRAND GB
                              ON    GB.DP_BRAND_ID  = IT.DP_BRAND_ID
                 LEFT OUTER   JOIN  (
                                    SELECT  CD.ST_COMN_CODE_ID AS CODE
                                          , DC.DIC_NM          AS NAME
                                    FROM    ST_COMN_CODE CD
                                          , GB_DIC DC
                                    WHERE   CD.ST_COMN_CODE_MST_CD  = 'MALL_DIV'
                                      AND   CD.GB_DIC_MST_ID        = DC.GB_DIC_MST_ID
                                      AND   DC.GB_LANG_ID           = '1'
                                    ) C8
                              ON    C8.CODE  = IC.MALL_DIV
    <where>
        AND   C.DP_INVENTORY_ID = #{dpInventoryId}
      <if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(ilCtgryId)">
        AND   C.IL_CTGRY_ID     = #{ilCtgryId}
      </if>
        AND   C.CONTS_LEVEL     = #{contsLevel}
        AND   C.PRNTS_CONTS_ID  = #{prntsContsId}
        AND   (
                (
                C.DP_START_DT <![CDATA[>]]>  (CASE WHEN IFNULL(#{dpStartDt}, '') = '' THEN C.DP_START_DT ELSE STR_TO_DATE(#{dpStartDt}, '%Y%m%d%H%i%s') END)
                AND
                C.DP_START_DT <![CDATA[<=]]> (CASE WHEN IFNULL(#{dpEndDt}  , '') = '' THEN C.DP_END_DT   ELSE STR_TO_DATE(#{dpEndDt}  , '%Y%m%d%H%i%s') END)
                )
                OR
                (
                C.DP_START_DT <![CDATA[<=]]> (CASE WHEN IFNULL(#{dpStartDt}, '') = '' THEN C.DP_START_DT ELSE STR_TO_DATE(#{dpStartDt}, '%Y%m%d%H%i%s') END)
                AND
                C.DP_END_DT   <![CDATA[>=]]> (CASE WHEN IFNULL(#{dpStartDt}, '') = '' THEN C.DP_END_DT   ELSE STR_TO_DATE(#{dpStartDt}, '%Y%m%d%H%i%s') END)
                )
                OR
                (
                C.DP_START_DT <![CDATA[<=]]> (CASE WHEN IFNULL(#{dpEndDt}, '') = '' THEN C.DP_START_DT ELSE STR_TO_DATE(#{dpEndDt}, '%Y%m%d%H%i%s') END)
                AND
                C.DP_END_DT   <![CDATA[>=]]> (CASE WHEN IFNULL(#{dpEndDt}, '') = '' THEN C.DP_END_DT   ELSE STR_TO_DATE(#{dpEndDt}, '%Y%m%d%H%i%s') END)
                )
                OR
                (
                C.DP_END_DT   <![CDATA[>=]]> (CASE WHEN IFNULL(#{dpStartDt}, '') = '' THEN C.DP_START_DT ELSE STR_TO_DATE(#{dpStartDt}, '%Y%m%d%H%i%s') END)
                AND
                C.DP_END_DT   <![CDATA[<]]>  (CASE WHEN IFNULL(#{dpEndDt}  , '') = '' THEN C.DP_END_DT   ELSE STR_TO_DATE(#{dpEndDt}  , '%Y%m%d%H%i%s') END)
                )
              )
      <if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(status)">
        AND   CASE WHEN #{status} = 'A' THEN C.DP_START_DT <![CDATA[>]]>  NOW()
                   WHEN #{status} = 'B' THEN C.DP_START_DT <![CDATA[<=]]> NOW() AND C.DP_END_DT <![CDATA[>=]]> NOW()
                   WHEN #{status} = 'C' THEN C.DP_END_DT   <![CDATA[<]]>  NOW()
                   ELSE TRUE
              END
      </if>
      <if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(dpRangeTp)">
        AND   C.DP_RANGE_TP  IN (#{dpRangeTp})
      </if>
      <if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(useYn)">
        AND   C.USE_YN       = #{useYn}
      </if>
        AND   C.DEL_YN       = 'N'
      <if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(dpCondTp)">
        AND   C.DP_COND_TP   = #{dpCondTp}
      </if>
      <if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(dpSortTp)">
        AND   C.DP_SORT_TP   = #{dpSortTp}
      </if>
    </where>
      ORDER BY C.SORT, C.TITLE_NM
  </select>

  <!--───────────────────────────────────────────────────────────────────────
   * description    : 컨텐츠 상세조회
   * @
   * @ 수정일       수정자    수정내용
   * @ ──────────────────────────────────────────────────────────────────────
   * @ 2020.09.21   dgyoun    최초생성
   * @
  ────────────────────────────────────────────────────────────────────────-->
  <select id="selectDpContsInfo" resultMap="contsMap">
      /*displayManage.selectDpContsInfo*/
      SELECT  C.DP_CONTS_ID
            , C.DP_INVENTORY_ID
            , C.IL_CTGRY_ID
            , C.CONTS_TP
            , C.CONTS_LEVEL
            , C.PRNTS_CONTS_ID
            , C.LEVEL_1_CONTS_ID
            , C.LEVEL_2_CONTS_ID
            , C.LEVEL_3_CONTS_ID
            , C.DP_START_DT
            , C.DP_END_DT
            , C.DP_RANGE_TP
            , C.TITLE_NM
            , C.DP_CTGRY_ID
            , C.TEXT_1
            , C.TEXT_1_COLOR
            , CONCAT(CASE WHEN IFNULL(C.TEXT_1_COLOR, '') = '' THEN '' ELSE CONCAT('[', C.TEXT_1_COLOR, '] ') END,
                     CASE WHEN IFNULL(C.TEXT_1, '') = '' THEN '' ELSE C.TEXT_1 END
              ) AS TEXT_1_STRING
            , C.TEXT_2
            , C.TEXT_2_COLOR
            , CONCAT(CASE WHEN IFNULL(C.TEXT_2_COLOR, '') = '' THEN '' ELSE CONCAT('[', C.TEXT_2_COLOR, '] ') END,
                     CASE WHEN IFNULL(C.TEXT_2, '') = '' THEN '' ELSE C.TEXT_2 END
              ) AS TEXT_2_STRING
            , C.TEXT_3
            , C.TEXT_3_COLOR
            , CONCAT(CASE WHEN IFNULL(C.TEXT_3_COLOR, '') = '' THEN '' ELSE CONCAT('[', C.TEXT_3_COLOR, '] ') END,
                     CASE WHEN IFNULL(C.TEXT_3, '') = '' THEN '' ELSE C.TEXT_3 END
              ) AS TEXT_3_STRING
            , CASE WHEN C.CONTS_TP = 'DP_CONTENTS_TP.GOODS' THEN CONCAT(IFNULL(#{hostUrl}, ''), IFNULL(#{goodsDetailUrl}, ''), C.CONTS_ID)
                   ELSE IFNULL(C.LINK_URL_PC, '')
              END  AS LINK_URL_PC
            , CASE WHEN C.CONTS_TP = 'DP_CONTENTS_TP.GOODS' THEN CONCAT(IFNULL(#{hostUrl}, ''), IFNULL(#{goodsDetailUrl}, ''), C.CONTS_ID)
                   ELSE IFNULL(C.LINK_URL_MOBILE, '')
              END  AS LINK_URL_MOBILE
            , IFNULL(C.HTML_PC, '')                   AS HTML_PC
            , IFNULL(C.HTML_MOBILE, '')               AS HTML_MOBILE
            , IFNULL(C.IMG_PATH_PC, '')               AS IMG_PATH_PC
            , IFNULL(C.IMG_ORIGIN_NM_PC, '')          AS IMG_ORIGIN_NM_PC
            , IFNULL(C.IMG_PATH_MOBILE, '')           AS IMG_PATH_MOBILE
            , IFNULL(C.IMG_ORIGIN_NM_MOBILE, '')      AS IMG_ORIGIN_NM_MOBILE
            , IFNULL(C.GIF_IMG_PATH_PC, '')           AS GIF_IMG_PATH_PC
            , IFNULL(C.GIF_IMG_ORIGIN_NM_PC, '')      AS GIF_IMG_ORIGIN_NM_PC
            , IFNULL(C.GIF_IMG_PATH_MOBILE, '')       AS GIF_IMG_PATH_MOBILE
            , IFNULL(C.GIF_IMG_ORIGIN_NM_MOBILE, '')  AS GIF_IMG_ORIGIN_NM_MOBILE
            , C.CONTS_ID
            , C.DP_COND_TP
            , C.DP_SORT_TP
            , C.SORT
            , C.USE_YN
            , C.DEL_YN
            , C.CREATE_ID
            , C.CREATE_DT
            , C.MODIFY_ID
            , C.MODIFY_DT
            , IC.MALL_DIV
            , IFNULL(IC.DEPTH, 0)   AS CTGRY_DEPTH
            , P.CTGRY_ID_DEPTH0
            , P.CTGRY_ID_DEPTH1
            , P.CTGRY_ID_DEPTH2
            , P.CTGRY_ID_DEPTH3
            , P.CTGRY_ID_DEPTH4
            , P.CTGRY_ID_DEPTH5
            , I.CONTS_LEVEL_1_DESC
            , I.CONTS_LEVEL_2_DESC
            , I.CONTS_LEVEL_3_DESC
            , C1.NAME     AS CONTS_TP_NM
            , C2.NAME     AS CONTS_LEVEL_NM
            , C3.NAME     AS DP_RANGE_TP_NM
            , C4.NAME     AS DP_COND_TP_NM
            , C5.NAME     AS DP_SORT_TP_NM
            , C8.NAME     AS MALL_DIV_NM
            , CASE WHEN C.USE_YN = 'Y' THEN '예' ELSE '아니오' END AS USE_YN_NM
            , CASE WHEN C.DP_START_DT  <![CDATA[>]]>  NOW() THEN '진행예정'
                   WHEN C.DP_START_DT  <![CDATA[<=]]> NOW()
                        AND
                        C.DP_END_DT    <![CDATA[>=]]> NOW() THEN '진행중'
                   WHEN C.DP_END_DT    <![CDATA[<]]>  NOW() THEN '진행종료'
                   ELSE ''
              END  STATUS_NM
            <!-- , IFNULL(FN_CTGRY_FULL_NAME(C.IL_CTGRY_ID), '') AS CTGRY_FULL_NM -->
            , IFNULL(FN_CTGRY_FULL_NAME(C.DP_CTGRY_ID), '') AS CTGRY_FULL_NM
            , CASE WHEN C.CONTS_TP = 'DP_CONTENTS_TP.BRAND'    THEN CB.DP_BRAND_NM
                   WHEN C.CONTS_TP = 'DP_CONTENTS_TP.GOODS'    THEN CG.GOODS_NM
                   ELSE ''
              END  AS CONTS_NM
            , CG.GOODS_TP
            , CASE WHEN C.CONTS_TP = 'DP_CONTENTS_TP.GOODS' THEN C6.NAME
                   ELSE ''
              END  AS GOODS_TYPE_NAME
            , IT.UR_SUPPLIER_ID
            , IFNULL(UC.COMP_NM, '')          AS SUPPLIER_NAME
            , IFNULL(GP.RECOMMENDED_PRICE, 0) AS RECOMMENDED_PRICE
            , IFNULL(GP.SALE_PRICE, 0)        AS SALE_PRICE
            , CG.DISP_WEB_PC_YN
            , CG.DISP_WEB_MOBILE_YN
            , CG.DISP_APP_YN
            , CASE WHEN CG.DISP_WEB_PC_YN     = 'Y' THEN 'PC'  ELSE '' END AS  DISP_WEB_PC_YN_NM
            , CASE WHEN CG.DISP_WEB_MOBILE_YN = 'Y' THEN 'M'   ELSE '' END AS  DISP_WEB_MOBILE_YN_NM
            , CASE WHEN CG.DISP_APP_YN        = 'Y' THEN 'APP' ELSE '' END AS  DISP_APP_YN_NM
            , CG.PURCHASE_MEMBER_YN
            , CG.PURCHASE_EMPLOYEE_YN
            , CG.PURCHASE_NONMEMBER_YN
            , CASE WHEN CG.PURCHASE_MEMBER_YN    = 'Y' THEN '일반'  ELSE '' END  AS  PURCHASE_MEMBER_YN_NM
            , CASE WHEN CG.PURCHASE_EMPLOYEE_YN  = 'Y' THEN '임직원' ELSE '' END AS  PURCHASE_EMPLOYEE_YN_NM
            , CASE WHEN CG.PURCHASE_NONMEMBER_YN = 'Y' THEN '비회원' ELSE '' END AS  PURCHASE_NONMEMBER_YN_NM
            , GC.IL_CTGRY_ID                                 AS GOODS_BASIC_CTGRY_ID
            , IFNULL(FN_CTGRY_FULL_NAME(GC.IL_CTGRY_ID), '') AS GOODS_BASIC_CTGRY_FULL_NM
            , CG.SALE_STATUS
            , C7.NAME                   AS SALE_STATUS_NAME
            , CG.DISP_YN
            , CASE WHEN CG.DISP_YN = 'Y' THEN '전시' ELSE '미전시' END  AS DISP_YN_NM
            , IT.DP_BRAND_ID            AS GOODS_BRAND_ID
            , IFNULL(GB.DP_BRAND_NM, '')   AS GOODS_BRAND_NM
      FROM    DP_CONTS C
                  JOIN  DP_INVENTORY I
                  ON    I.DP_INVENTORY_ID = C.DP_INVENTORY_ID
                  LEFT OUTER  JOIN  IL_CTGRY_PRNTS_INFO P
                              ON    P.IL_CTGRY_ID = C.DP_CTGRY_ID
                  LEFT OUTER  JOIN  IL_CTGRY IC
                              ON    IC.IL_CTGRY_ID = C.DP_CTGRY_ID
                  LEFT OUTER  JOIN  (
                                    SELECT  CD.ST_COMN_CODE_ID AS CODE
                                          , DC.DIC_NM          AS NAME
                                    FROM    ST_COMN_CODE CD
                                          , GB_DIC DC
                                    WHERE   CD.ST_COMN_CODE_MST_CD  = 'DP_CONTENTS_TP'
                                      AND   CD.GB_DIC_MST_ID        = DC.GB_DIC_MST_ID
                                      AND   DC.GB_LANG_ID           = '1'
                                    ) C1
                              ON    C1.CODE  = C.CONTS_TP
                  LEFT OUTER  JOIN  (
                                    SELECT  CD.ST_COMN_CODE_ID AS CODE
                                          , DC.DIC_NM          AS NAME
                                    FROM    ST_COMN_CODE CD
                                          , GB_DIC DC
                                    WHERE   CD.ST_COMN_CODE_MST_CD  = 'CONTS_LEVEL'
                                      AND   CD.GB_DIC_MST_ID        = DC.GB_DIC_MST_ID
                                      AND   DC.GB_LANG_ID           = '1'
                                    ) C2
                              ON    C2.CODE  = C.CONTS_LEVEL
                  LEFT OUTER  JOIN  (
                                    SELECT  CD.ST_COMN_CODE_ID AS CODE
                                          , DC.DIC_NM          AS NAME
                                    FROM    ST_COMN_CODE CD
                                          , GB_DIC DC
                                    WHERE   CD.ST_COMN_CODE_MST_CD  = 'DP_RANGE_TP'
                                      AND   CD.GB_DIC_MST_ID        = DC.GB_DIC_MST_ID
                                      AND   DC.GB_LANG_ID           = '1'
                                    ) C3
                              ON    C3.CODE  = C.DP_RANGE_TP
                  LEFT OUTER  JOIN  (
                                    SELECT  CD.ST_COMN_CODE_ID AS CODE
                                          , DC.DIC_NM          AS NAME
                                    FROM    ST_COMN_CODE CD
                                          , GB_DIC DC
                                    WHERE   CD.ST_COMN_CODE_MST_CD  = 'DP_COND_TP'
                                      AND   CD.GB_DIC_MST_ID        = DC.GB_DIC_MST_ID
                                      AND   DC.GB_LANG_ID           = '1'
                                    ) C4
                              ON    C4.CODE  = C.DP_COND_TP
                  LEFT OUTER  JOIN  (
                                    SELECT  CD.ST_COMN_CODE_ID AS CODE
                                          , DC.DIC_NM          AS NAME
                                    FROM    ST_COMN_CODE CD
                                          , GB_DIC DC
                                    WHERE   CD.ST_COMN_CODE_MST_CD  = 'DP_SORT_TP'
                                      AND   CD.GB_DIC_MST_ID        = DC.GB_DIC_MST_ID
                                      AND   DC.GB_LANG_ID           = '1'
                                    ) C5
                              ON    C5.CODE  = C.DP_SORT_TP
                 LEFT OUTER   JOIN  DP_BRAND CB
                              ON    C.CONTS_TP      = 'DP_CONTENTS_TP.BRAND'
                              AND   CB.DP_BRAND_ID  = C.CONTS_ID
                 LEFT OUTER   JOIN  IL_GOODS CG
                              ON    C.CONTS_TP      = 'DP_CONTENTS_TP.GOODS'
                              AND   CG.IL_GOODS_ID  = C.CONTS_ID
                 LEFT OUTER   JOIN  (
                                    SELECT  CD.ST_COMN_CODE_ID AS CODE
                                          , DC.DIC_NM          AS NAME
                                    FROM    ST_COMN_CODE CD
                                          , GB_DIC DC
                                    WHERE   CD.ST_COMN_CODE_MST_CD  = 'GOODS_TYPE'
                                      AND   CD.GB_DIC_MST_ID        = DC.GB_DIC_MST_ID
                                      AND   DC.GB_LANG_ID           = '1'
                                    ) C6
                              ON    C6.CODE  = CG.GOODS_TP
                 LEFT OUTER   JOIN  IL_ITEM IT
                              ON    IT.IL_ITEM_CD = CG.IL_ITEM_CD
                 LEFT OUTER   JOIN  UR_SUPPLIER S
                              ON    S.UR_SUPPLIER_ID = IT.UR_SUPPLIER_ID
                 LEFT OUTER   JOIN  UR_COMPANY UC
                              ON    UC.UR_COMPANY_ID = S.UR_COMPANY_ID
                 LEFT OUTER   JOIN  IL_GOODS_PRICE GP
                              ON    GP.IL_GOODS_ID = CG.IL_GOODS_ID
                              AND   NOW() BETWEEN GP.PRICE_START_DT AND GP.PRICE_END_DT
                              AND   GP.USE_YN = 'Y'
                 LEFT OUTER   JOIN  IL_GOODS_CTGRY GC
                              ON    GC.IL_GOODS_ID = CG.IL_GOODS_ID
                              AND   GC.MALL_DIV = 'MALL_DIV.PULMUONE'
                              AND   GC.BASIC_YN = 'Y'
                 LEFT OUTER   JOIN  (
                                    SELECT  CD.ST_COMN_CODE_ID AS CODE
                                          , DC.DIC_NM          AS NAME
                                    FROM    ST_COMN_CODE CD
                                          , GB_DIC DC
                                    WHERE   CD.ST_COMN_CODE_MST_CD  = 'SALE_STATUS'
                                      AND   CD.GB_DIC_MST_ID        = DC.GB_DIC_MST_ID
                                      AND   DC.GB_LANG_ID           = '1'
                                    ) C7
                              ON    C7.CODE  = CG.SALE_STATUS
                 LEFT OUTER   JOIN  DP_BRAND GB
                              ON    GB.DP_BRAND_ID  = IT.DP_BRAND_ID
                 LEFT OUTER   JOIN  (
                                    SELECT  CD.ST_COMN_CODE_ID AS CODE
                                          , DC.DIC_NM          AS NAME
                                    FROM    ST_COMN_CODE CD
                                          , GB_DIC DC
                                    WHERE   CD.ST_COMN_CODE_MST_CD  = 'MALL_DIV'
                                      AND   CD.GB_DIC_MST_ID        = DC.GB_DIC_MST_ID
                                      AND   DC.GB_LANG_ID           = '1'
                                    ) C8
                              ON    C8.CODE  = IC.MALL_DIV
    <where>
        AND   C.DP_CONTS_ID = #{dpContsId}
    </where>
  </select>


  <!--───────────────────────────────────────────────────────────────────────
   * description    : 컨텐츠  수정
   * @
   * @ 수정일       수정자    수정내용
   * @ ──────────────────────────────────────────────────────────────────────
   * @ 2020.09.21   dgyoun    최초생성
   * @
  ────────────────────────────────────────────────────────────────────────-->
<!-- TODO : 변경대상 및 isNotEmpty 적용 검토-->
  <update id="putConts" parameterType="kr.co.pulmuone.v1.display.manage.dto.vo.ContsVo">
      /*displayManage.putConts*/
      UPDATE  DP_CONTS
      SET     MODIFY_DT     = NOW()
            , MODIFY_ID     = #{modifyId}
<!--             , DP_INVENTORY_ID           = #{dpInventoryId} -->
            , IL_CTGRY_ID               = #{ilCtgryId}
            , CONTS_TP                  = #{contsTp}
            , CONTS_LEVEL               = #{contsLevel}
            , PRNTS_CONTS_ID            = #{prntsContsId}
            , LEVEL_1_CONTS_ID          = #{level1ContsId}
            , LEVEL_2_CONTS_ID          = #{level2ContsId}
            , LEVEL_3_CONTS_ID          = #{level3ContsId}
            , DP_START_DT               = #{dpStartDt}
            , DP_END_DT                 = #{dpEndDt}
            , DP_RANGE_TP               = #{dpRangeTp}
            , TITLE_NM                  = #{titleNm}
            , DP_CTGRY_ID               = #{dpCtgryId}
            , TEXT_1                    = #{text1}
            , TEXT_1_COLOR              = #{text1Color}
            , TEXT_2                    = #{text2}
            , TEXT_2_COLOR              = #{text2Color}
            , TEXT_3                    = #{text3}
            , TEXT_3_COLOR              = #{text3Color}
            , LINK_URL_PC               = #{linkUrlPc}
            , LINK_URL_MOBILE           = #{linkUrlMobile}
            , HTML_PC                   = #{htmlPc}
            , HTML_MOBILE               = #{htmlMobile}
            , IMG_PATH_PC               = #{imgPathPc}
            , IMG_ORIGIN_NM_PC          = #{imgOriginNmPc}
            , IMG_PATH_MOBILE           = #{imgPathMobile}
            , IMG_ORIGIN_NM_MOBILE      = #{imgOriginNmMobile}
            , GIF_IMG_PATH_PC           = #{gifImgPathPc}
            , GIF_IMG_ORIGIN_NM_PC      = #{gifImgOriginNmPc}
            , GIF_IMG_PATH_MOBILE       = #{gifImgPathMobile}
            , GIF_IMG_ORIGIN_NM_MOBILE  = #{gifImgOriginNmMobile}
            , CONTS_ID                  = #{contsId}
            , DP_COND_TP                = #{dpCondTp}
            , DP_SORT_TP                = #{dpSortTp}
            , SORT                      = #{sort}
            , USE_YN                    = #{useYn}
            , DEL_YN                    = #{delYn}
    <where>
        AND   DP_CONTS_ID   = #{dpContsId}
    </where>
  </update>

  <!--───────────────────────────────────────────────────────────────────────
   * description    : 컨텐츠  수정 - 상품용
   * @
   * @ 수정일       수정자    수정내용
   * @ ──────────────────────────────────────────────────────────────────────
   * @ 2020.11.11   dgyoun    최초생성
   * @
  ────────────────────────────────────────────────────────────────────────-->
<!-- TODO : 변경대상 및 isNotEmpty 적용 검토-->
  <update id="putContsForGoods" parameterType="kr.co.pulmuone.v1.display.manage.dto.vo.ContsVo">
      /*displayManage.putContsForGoods*/
      UPDATE  DP_CONTS
      SET     MODIFY_DT     = NOW()
            , MODIFY_ID     = #{modifyId}
            , DP_START_DT               = #{dpStartDt}
            , DP_END_DT                 = #{dpEndDt}
            , DP_RANGE_TP               = #{dpRangeTp}
            , TITLE_NM                  = #{titleNm}
            , TEXT_1                    = #{text1}
            , TEXT_1_COLOR              = #{text1Color}
            , TEXT_2                    = #{text2}
            , TEXT_2_COLOR              = #{text2Color}
            , TEXT_3                    = #{text3}
            , TEXT_3_COLOR              = #{text3Color}
            , SORT                      = #{sort}
    <where>
        AND   DP_CONTS_ID   = #{dpContsId}
    </where>
  </update>


  <!--───────────────────────────────────────────────────────────────────────
   * description    : 컨텐츠  순서수정
   * @
   * @ 수정일       수정자    수정내용
   * @ ──────────────────────────────────────────────────────────────────────
   * @ 2020.09.21   dgyoun    최초생성
   * @
  ────────────────────────────────────────────────────────────────────────-->
  <update id="putContsSort" parameterType="kr.co.pulmuone.v1.display.manage.dto.vo.ContsVo">
      /*displayManage.putContsSort*/
      UPDATE  DP_CONTS
      SET     MODIFY_DT     = NOW()
            , MODIFY_ID     = #{modifyId}
            , SORT          = #{sort}
    <where>
        AND   DP_CONTS_ID   = #{dpContsId}
    </where>
  </update>


  <!--───────────────────────────────────────────────────────────────────────
   * description    : 컨텐츠  삭제
   * @
   * @ 수정일       수정자    수정내용
   * @ ──────────────────────────────────────────────────────────────────────
   * @ 2020.09.21   dgyoun    최초생성
   * @
  ────────────────────────────────────────────────────────────────────────-->
  <delete id="delConts" parameterType="kr.co.pulmuone.v1.display.manage.dto.vo.ContsVo">
      /*displayManage.delConts*/
      UPDATE  DP_CONTS
      SET     MODIFY_DT     = NOW()
            , MODIFY_ID     = #{modifyId}
            , DEL_YN        = #{delYn}
    <where>
        AND   DP_CONTS_ID   = #{dpContsId}
    </where>
  </delete>

  <!--───────────────────────────────────────────────────────────────────────
   * description    : 상품컨텐츠 중복체크 (상품과 기간 기준으로 중복 체크)
   * @
   * @ 수정일       수정자    수정내용
   * @ ──────────────────────────────────────────────────────────────────────
   * @ 2020.11.10   dgyoun    최초생성
   * @
  ────────────────────────────────────────────────────────────────────────-->
  <select id="selectDpGoodsContsDupList" resultMap="contsMap">
      /*displayManage.selectDpGoodsContsDupList*/
      SELECT  C.DP_CONTS_ID
            , C.DP_INVENTORY_ID
            , C.CONTS_TP
            , C.CONTS_LEVEL
            , C.PRNTS_CONTS_ID
            , C.LEVEL_1_CONTS_ID
            , C.LEVEL_2_CONTS_ID
            , C.LEVEL_3_CONTS_ID
            , C.DP_START_DT
            , C.DP_END_DT
            , C.CONTS_ID          AS IL_GOODS_ID
            , G.GOODS_NM          AS GOODS_NM
      FROM    DP_CONTS C
            , IL_GOODS G
      WHERE   1 = 1
        AND   C.DP_INVENTORY_ID = #{dpInventoryId}
        AND   C.CONTS_TP        = #{contsTp}
        AND   C.PRNTS_CONTS_ID  = #{prntsContsId}
        AND   (
                (
                C.DP_START_DT <![CDATA[<=]]> (CASE WHEN IFNULL(#{dpStartDt}, '') = '' THEN C.DP_START_DT ELSE STR_TO_DATE(#{dpStartDt}, '%Y%m%d%H%i%s') END)
                AND
                C.DP_END_DT   <![CDATA[>=]]> (CASE WHEN IFNULL(#{dpStartDt}, '') = '' THEN C.DP_END_DT   ELSE STR_TO_DATE(#{dpStartDt}, '%Y%m%d%H%i%s') END)
                )
                OR
                (
                C.DP_START_DT <![CDATA[<=]]> (CASE WHEN IFNULL(#{dpEndDt}, '') = '' THEN C.DP_START_DT ELSE STR_TO_DATE(#{dpEndDt}, '%Y%m%d%H%i%s') END)
                AND
                C.DP_END_DT   <![CDATA[>=]]> (CASE WHEN IFNULL(#{dpEndDt}, '') = '' THEN C.DP_END_DT   ELSE STR_TO_DATE(#{dpEndDt}, '%Y%m%d%H%i%s') END)
                )
              )
        AND   C.CONTS_ID        = #{contsId}
        AND   G.IL_GOODS_ID     = C.CONTS_ID
        AND   C.USE_YN          = 'Y'
        AND   C.DEL_YN          = 'N'
  </select>

  <!--───────────────────────────────────────────────────────────────────────
   * description    : 컨텐츠  등록
   * @
   * @ 수정일       수정자    수정내용
   * @ ──────────────────────────────────────────────────────────────────────
   * @ 2020.09.21   dgyoun    최초생성
   * @
  ────────────────────────────────────────────────────────────────────────-->
  <insert id="addConts" parameterType="kr.co.pulmuone.v1.display.manage.dto.vo.ContsVo">
      /*displayManage.addConts*/
      INSERT INTO DP_CONTS (
            DP_INVENTORY_ID
          , IL_CTGRY_ID
          , CONTS_TP
          , CONTS_LEVEL
          , PRNTS_CONTS_ID
          , LEVEL_1_CONTS_ID
          , LEVEL_2_CONTS_ID
          , LEVEL_3_CONTS_ID
          , DP_START_DT
          , DP_END_DT
          , DP_RANGE_TP
          , TITLE_NM
          , DP_CTGRY_ID
          , TEXT_1
          , TEXT_1_COLOR
          , TEXT_2
          , TEXT_2_COLOR
          , TEXT_3
          , TEXT_3_COLOR
          , LINK_URL_PC
          , LINK_URL_MOBILE
          , HTML_PC
          , HTML_MOBILE
          , IMG_PATH_PC
          , IMG_ORIGIN_NM_PC
          , IMG_PATH_MOBILE
          , IMG_ORIGIN_NM_MOBILE
          , GIF_IMG_PATH_PC
          , GIF_IMG_ORIGIN_NM_PC
          , GIF_IMG_PATH_MOBILE
          , GIF_IMG_ORIGIN_NM_MOBILE
          , CONTS_ID
          , DP_COND_TP
          , DP_SORT_TP
          , SORT
          , USE_YN
          , DEL_YN
          , CREATE_ID
          , CREATE_DT
          , MODIFY_ID
          , MODIFY_DT
      )
      VALUES (
            #{dpInventoryId}
          , #{ilCtgryId}
          , #{contsTp}
          , #{contsLevel}
          , #{prntsContsId}
          , #{level1ContsId}
          , #{level2ContsId}
          , #{level3ContsId}
          , #{dpStartDt}
          , #{dpEndDt}
          , #{dpRangeTp}
          , #{titleNm}
          , #{dpCtgryId}
          , #{text1}
          , #{text1Color}
          , #{text2}
          , #{text2Color}
          , #{text3}
          , #{text3Color}
          , #{linkUrlPc}
          , #{linkUrlMobile}
          , #{htmlPc}
          , #{htmlMobile}
          , #{imgPathPc}
          , #{imgOriginNmPc}
          , #{imgPathMobile}
          , #{imgOriginNmMobile}
          , #{gifImgPathPc}
          , #{gifImgOriginNmPc}
          , #{gifImgPathMobile}
          , #{gifImgOriginNmMobile}
          , #{contsId}
          , #{dpCondTp}
          , #{dpSortTp}
          , #{sort}
          , #{useYn}
          , #{delYn}
          , #{createId}
          , NOW()
          , #{modifyId}
          , NOW()
      )
      <selectKey keyProperty="dpContsId" resultType="String" order="AFTER">
         SELECT CONCAT(LAST_INSERT_ID())
      </selectKey>
  </insert>

  <!--───────────────────────────────────────────────────────────────────────
   * description    : 컨텐츠  수정
   * @
   * @ 수정일       수정자    수정내용
   * @ ──────────────────────────────────────────────────────────────────────
   * @ 2020.09.21   dgyoun    최초생성
   * @
  ────────────────────────────────────────────────────────────────────────-->
  <!--───────────────────────────────────────────────────────────────────────
   * description    : 컨텐츠 등록 후처리 (추가 컬럼 작업, 업데이트 이력 없음)
   * @
   * @ 수정일       수정자    수정내용
   * @ ──────────────────────────────────────────────────────────────────────
   * @ 2020.10.28   dgyoun    최초생성
   * @
  ────────────────────────────────────────────────────────────────────────-->
  <update id="putContsAfterAdd" parameterType="kr.co.pulmuone.v1.display.manage.dto.vo.ContsVo">
      /*displayManage.putContsAfterAdd*/
      UPDATE  DP_CONTS
      SET
            <if test='contsLevel == 1'>
              LEVEL_1_CONTS_ID  = #{level1ContsId}
            </if>
            <if test='contsLevel == 2'>
              LEVEL_2_CONTS_ID  = #{level2ContsId}
            </if>
            <if test='contsLevel == 3'>
              LEVEL_3_CONTS_ID  = #{level3ContsId}
            </if>
    <where>
        AND   DP_CONTS_ID   = #{dpContsId}
    </where>
  </update>

  <!--───────────────────────────────────────────────────────────────────────
   * description    : 브랜드 리스트 (콤보용)
   * @
   * @ 수정일       수정자    수정내용
   * @ ──────────────────────────────────────────────────────────────────────
   * @ 2020.10.26   dgyoun    최초생성
   * @
  ────────────────────────────────────────────────────────────────────────-->
  <select id="selectBrandList" resultMap="getCodeListResultMap">
      /*displayManage.selectBrandList*/
      SELECT  CONCAT(B.DP_BRAND_ID) AS CODE
            , B.DP_BRAND_NM         AS NAME
      FROM    DP_BRAND B
    <where>
      <if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(dpBrandId)">
        AND   B.DP_BRAND_ID = #{dpBrandId}
      </if>
      <if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(brandNm)">
        AND   B.DP_BRAND_NM LIKE CONCAT('%', #{brandNm}, '%')
      </if>
        AND   B.USE_YN = #{useYn}
    </where>
      ORDER BY B.DP_BRAND_NM ASC
  </select>


  <!--───────────────────────────────────────────────────────────────────────
   * description    : 상품목록조회-키워드조회
   * @
   * @ 수정일       수정자    수정내용
   * @ ──────────────────────────────────────────────────────────────────────
   * @ 2020.11.05   dgyoun    최초생성
   * @
  ────────────────────────────────────────────────────────────────────────-->
  <select id="selectGoodsListByKeyword" resultMap="contsMap">
        /*displayManage.selectGoodsListByKeyword*/
        SELECT  99                              AS SORT
              , T1.IL_GOODS_ID
              , T1.IL_ITEM_CD
              , T1.GOODS_NM
              , T1.GOODS_TP
              , C2.NAME                         AS GOODS_TP_NM
              , T1.UR_SUPPLIER_ID
              , T1.COMP_NM                      AS SUPPLIER_NM
              , T1.DP_BRAND_ID
              , T1.DP_BRAND_NM
              , T1.ERP_ITEM_BARCODE
              , T1.ITEM_BARCODE
              , T1.RECOMMENDED_PRICE
              , T1.SALE_PRICE
              , T1.IL_CTGRY_ID
              , T1.CTGRY_FULL_NM
              , T1.DISP_WEB_PC_YN
              , T1.DISP_WEB_MOBILE_YN
              , T1.DISP_APP_YN
              , T1.DISP_WEB_PC_YN_NM
              , T1.DISP_WEB_MOBILE_YN_NM
              , T1.DISP_APP_YN_NM
              , T1.PURCHASE_MEMBER_YN
              , T1.PURCHASE_EMPLOYEE_YN
              , T1.PURCHASE_NONMEMBER_YN
              , T1.PURCHASE_MEMBER_YN_NM
              , T1.PURCHASE_EMPLOYEE_YN_NM
              , T1.PURCHASE_NONMEMBER_YN_NM
              , T1.SALE_STATUS
              , C1.NAME                         AS SALE_STATUS_NAME
              , T1.DISP_YN
              , CASE WHEN T1.DISP_YN = 'Y' THEN '전시' ELSE '미전시' END  AS DISP_YN_NM
        FROM    (
                SELECT  G.IL_GOODS_ID
                      , G.IL_ITEM_CD
                      , G.GOODS_NM
                      , G.GOODS_TP
                      , I.UR_SUPPLIER_ID
                      , UC.COMP_NM
                      , I.DP_BRAND_ID
                      , B.DP_BRAND_NM
                      , I.ERP_ITEM_BARCODE
                      , I.ITEM_BARCODE
                      , GP.RECOMMENDED_PRICE
                      , GP.SALE_PRICE
                      , GC.IL_CTGRY_ID
                      , IFNULL(FN_CTGRY_FULL_NAME(GC.IL_CTGRY_ID), '') AS CTGRY_FULL_NM
                      , G.DISP_WEB_PC_YN
                      , G.DISP_WEB_MOBILE_YN
                      , G.DISP_APP_YN
                      , CASE WHEN G.DISP_WEB_PC_YN = 'Y'     THEN 'PC'  ELSE '' END AS  DISP_WEB_PC_YN_NM
                      , CASE WHEN G.DISP_WEB_MOBILE_YN = 'Y' THEN 'M'   ELSE '' END AS  DISP_WEB_MOBILE_YN_NM
                      , CASE WHEN G.DISP_APP_YN = 'Y'        THEN 'APP' ELSE '' END AS  DISP_APP_YN_NM
                      , G.PURCHASE_MEMBER_YN
                      , G.PURCHASE_EMPLOYEE_YN
                      , G.PURCHASE_NONMEMBER_YN
                      , CASE WHEN G.PURCHASE_MEMBER_YN = 'Y'    THEN '일반'   ELSE '' END AS  PURCHASE_MEMBER_YN_NM
                      , CASE WHEN G.PURCHASE_EMPLOYEE_YN = 'Y'  THEN '임직원' ELSE '' END AS  PURCHASE_EMPLOYEE_YN_NM
                      , CASE WHEN G.PURCHASE_NONMEMBER_YN = 'Y' THEN '비회원' ELSE '' END AS  PURCHASE_NONMEMBER_YN_NM
                      , G.SALE_STATUS   /*공통.SALE_STATUS*/
                      , G.DISP_YN
                FROM    IL_GOODS G
                          LEFT OUTER  JOIN  IL_GOODS_PRICE GP
                                        ON  GP.IL_GOODS_ID = G.IL_GOODS_ID
                                       AND  NOW() BETWEEN GP.PRICE_START_DT AND GP.PRICE_END_DT
                                       AND  GP.USE_YN = 'Y'
                          LEFT OUTER  JOIN  IL_GOODS_CTGRY GC
                                        ON  GC.IL_GOODS_ID = G.IL_GOODS_ID
                                       AND  GC.MALL_DIV = 'MALL_DIV.PULMUONE'
                                       AND  GC.BASIC_YN = 'Y'
                      , IL_ITEM I
                          LEFT OUTER  JOIN  DP_BRAND B
                                        ON  B.DP_BRAND_ID = I.DP_BRAND_ID
                          LEFT OUTER  JOIN  UR_SUPPLIER S
                                        ON  S.UR_SUPPLIER_ID = I.UR_SUPPLIER_ID
                          LEFT OUTER  JOIN  UR_COMPANY UC
                                        ON  UC.UR_COMPANY_ID = S.UR_COMPANY_ID
            <where>
                  AND   I.IL_ITEM_CD = G.IL_ITEM_CD
              <choose>
                <when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(searchCondition, "GOODS_CODE")'>
                  AND   G.IL_GOODS_ID IN        <foreach collection="findKeywordList" item="goodsId" index="index" separator="," open="(" close=")">
                                                  #{goodsId}
                                                </foreach>
                </when>
                <when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(searchCondition, "ITEM_CODE")'>
                  AND   I.IL_ITEM_CD IN         <foreach collection="findKeywordList" item="itemCode" index="index" separator="," open="(" close=")">
                                                    #{itemCode}
                                                </foreach>
                </when>
                <when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(searchCondition, "ITEM_BARCODE")'>
                  AND   (
                        I.ERP_ITEM_BARCODE  IN  <foreach collection="findKeywordList" item="erpItemBarcode" index="index" separator="," open="(" close=")">
                                                  #{erpItemBarcode}
                                                </foreach>
                        OR
                        I.ITEM_BARCODE IN       <foreach collection="findKeywordList" item="itemBarcode" index="index" separator="," open="(" close=")">
                                                  #{itemBarcode}
                                                </foreach>
                        )
                </when>
              </choose>
            </where>
                ) T1
                  LEFT OUTER  JOIN  (
                                    SELECT  CD.ST_COMN_CODE_ID AS CODE
                                          , DC.DIC_NM          AS NAME
                                    FROM    ST_COMN_CODE CD
                                            , GB_DIC DC
                                  <where>
                                      AND   CD.ST_COMN_CODE_MST_CD  = 'SALE_STATUS'
                                      AND   CD.GB_DIC_MST_ID        = DC.GB_DIC_MST_ID
                                      AND   DC.GB_LANG_ID           = '1'
                                  </where>
                                    ) C1
                                ON  C1.CODE  = T1.SALE_STATUS
                  LEFT OUTER  JOIN  (
                                    SELECT  CD.ST_COMN_CODE_ID AS CODE
                                          , DC.DIC_NM          AS NAME
                                    FROM    ST_COMN_CODE CD
                                            , GB_DIC DC
                                  <where>
                                      AND   CD.ST_COMN_CODE_MST_CD  = 'GOODS_TYPE'
                                      AND   CD.GB_DIC_MST_ID        = DC.GB_DIC_MST_ID
                                      AND   DC.GB_LANG_ID           = '1'
                                  </where>
                                    ) C2
                                ON  C2.CODE  = T1.GOODS_TP
        <choose>
          <when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(searchCondition, "GOODS_CODE")'>
            ORDER BY FIELD (T1.IL_GOODS_ID        <foreach collection="findKeywordList" item="goodsId" index="index" separator="," open="," close=")">
                                                    #{goodsId}
                                                  </foreach>
          </when>
          <when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(searchCondition, "ITEM_CODE")'>
            ORDER BY FIELD (T1.IL_ITEM_CD         <foreach collection="findKeywordList" item="itemCode" index="index" separator="," open="," close=")">
                                                    #{itemCode}
                                                  </foreach>
          </when>
          <when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(searchCondition, "ITEM_BARCODE")'>
            ORDER BY FIELD (T1.ERP_ITEM_BARCODE   <foreach collection="findKeywordList" item="erpItemBarcode" index="index" separator="," open="," close=")">
                                                    #{erpItemBarcode}
                                                  </foreach>
          </when>
        </choose>
  </select>

  <!-- ==================================================================== -->
  <!-- 인벤토리그룹-->
  <!-- ==================================================================== -->
  <!--───────────────────────────────────────────────────────────────────────
   * description    : 인벤토리그룹 리스트조회 (개인화된 인벤토로리 그룹)
   * @
   * @ 수정일       수정자    수정내용
   * @ ──────────────────────────────────────────────────────────────────────
   * @ 2020.11.11   dgyoun    최초생성
   * @
  ────────────────────────────────────────────────────────────────────────-->
  <select id="selectDpInventoryGroupList" resultMap="pageMap">
      /*displayManage.selectDpInventoryGroupList*/
      SELECT  G.DP_INVENTORY_GRP_ID AS DP_PAGE_ID
            , G.INVENTORY_GRP_NM    As PAGE_NM
            , G.GROUP_DESC
            , G.SORT
            , G.USE_YN
            , G.DEL_YN
            , G.CREATE_ID
            , G.CREATE_DT
            , G.MODIFY_ID
            , G.MODIFY_DT
            , 'false'       AS ISLEAF
      FROM    DP_INVENTORY_GRP G
    <where>
      <if test='@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(useYn)'>
        AND   G.USE_YN  = #{useYn}
      </if>
        AND   G.DEL_YN  = 'N'
        AND   G.USER_ID = #{userId}
    </where>
      ORDER BY G.USE_YN DESC, G.SORT ASC, G.INVENTORY_GRP_NM ASC
  </select>

  <!--───────────────────────────────────────────────────────────────────────
   * description    : 인벤토리그룹 상세조회
   * @
   * @ 수정일       수정자    수정내용
   * @ ──────────────────────────────────────────────────────────────────────
   * @ 2020.11.11   dgyoun    최초생성
   * @
  ────────────────────────────────────────────────────────────────────────-->
  <select id="selectDpInventoryGroupInfo" resultMap="pageMap">
      /*displayManage.selectDpInventoryGroupInfo*/
      SELECT  G.DP_INVENTORY_GRP_ID AS DP_PAGE_ID
            , G.INVENTORY_GRP_NM    As PAGE_NM
            , G.GROUP_DESC
            , G.SORT
            , G.USE_YN
            , G.DEL_YN
            , G.CREATE_ID
            , G.CREATE_DT
            , G.MODIFY_ID
            , G.MODIFY_DT
            , 'false'       AS ISLEAF
      FROM    DP_INVENTORY_GRP G
    <where>
        AND   G.DP_INVENTORY_GRP_ID = #{dpInventoryGrpId}
    </where>
  </select>

  <!--───────────────────────────────────────────────────────────────────────
   * description    : 인벤토리그룹 인벤토리 리스트조회 (개인화된 인벤토로리 그룹)
   * @
   * @ 수정일       수정자    수정내용
   * @ ──────────────────────────────────────────────────────────────────────
   * @ 2020.11.11   dgyoun    최초생성
   * @
  ────────────────────────────────────────────────────────────────────────-->
  <select id="selectDpGroupInventoryList" resultType="kr.co.pulmuone.v1.display.manage.dto.vo.InventoryVo">
      /*displayManage.selectDpGroupInventoryList*/
      SELECT  I.DP_INVENTORY_ID
            , I.PAGE_TP
            , I.INVENTORY_CD
            , I.IL_CTGRY_ID
            , CONCAT( I.INVENTORY_CD
                    , CASE WHEN IFNULL(I.IL_CTGRY_ID, '') = ''
                           THEN I.INVENTORY_CD
                           ELSE CONCAT(':', I.IL_CTGRY_ID)
                      END
                    ) AS EXCEL_DISP_INVENTORY_CD
            , I.INVENTORY_NM
            , I.DP_PAGE_ID
            , I.MALL_DIV
            , I.CTGRY_DEPTH
            , I.DP_RANGE_TP
            , I.CONTS_LEVEL_1_TP
            , I.CONTS_LEVEL_2_TP
            , I.CONTS_LEVEL_3_TP
            , I.CONTS_LEVEL_1_DESC
            , I.CONTS_LEVEL_2_DESC
            , I.CONTS_LEVEL_3_DESC
            , I.SORT      AS I_SORT
            , I.GM_SORT   AS SORT
            , I.USE_YN
            , I.DEL_YN
            , I.CREATE_ID
            , I.CREATE_DT
            , I.MODIFY_ID
            , I.MODIFY_DT
            , I.DP_INVENTORY_GRP_MAPPING_ID
            , I.DP_INVENTORY_GRP_ID
            , C4.NAME       AS DP_RANGE_TP_NM
            , C1.NAME       AS CONTS_LEVEL_1_TP_NM
            , C2.NAME       AS CONTS_LEVEL_2_TP_NM
            , C3.NAME       AS CONTS_LEVEL_3_TP_NM
            , CASE WHEN I.USE_YN = 'Y' THEN '예' ELSE '아니오' END AS USE_YN_NM
            , I.PAGE_NM
            , I.PAGE_FULL_PATH
      FROM    (
              SELECT  II.*
                    , CASE WHEN II.PAGE_TP = 'PAGE_TP.CATEGORY' THEN C.CTGRY_NM
                           WHEN II.PAGE_TP = 'PAGE_TP.PAGE'     THEN P.PAGE_NM
                           ELSE ''
                      END AS PAGE_NM
                    , CASE WHEN II.PAGE_TP = 'PAGE_TP.CATEGORY' THEN IFNULL(FN_CTGRY_FULL_NAME(GM.IL_CTGRY_ID), '')
                           WHEN II.PAGE_TP = 'PAGE_TP.PAGE'     THEN CASE WHEN P.DEPTH = 1 THEN P1.PAGE_NM
                                                                          WHEN P.DEPTH = 2 THEN CONCAT(P1.PAGE_NM, ' > ', P2.PAGE_NM)
                                                                          WHEN P.DEPTH = 3 THEN CONCAT(P1.PAGE_NM, ' > ', P2.PAGE_NM, ' > ', P3.PAGE_NM)
                                                                          WHEN P.DEPTH = 4 THEN CONCAT(P1.PAGE_NM, ' > ', P2.PAGE_NM, ' > ', P3.PAGE_NM, ' > ', P4.PAGE_NM)
                                                                          WHEN P.DEPTH = 5 THEN CONCAT(P1.PAGE_NM, ' > ', P2.PAGE_NM, ' > ', P3.PAGE_NM, ' > ', P4.PAGE_NM, ' > ', P5.PAGE_NM)
                                                                          ELSE ''
                                                                     END
                           ELSE ''
                      END AS PAGE_FULL_PATH
                    , GM.DP_INVENTORY_GRP_MAPPING_ID
                    , GM.DP_INVENTORY_GRP_ID
                    , GM.SORT AS GM_SORT
                    , GM.IL_CTGRY_ID
                    , C.USE_YN AS CTGRY_USE_YN
                    , C.DEL_YN AS CTGRY_DEL_YN
              FROM    DP_INVENTORY_GRP_MAPPING GM
                          LEFT OUTER  JOIN  IL_CTGRY C
                                        ON  C.IL_CTGRY_ID = GM.IL_CTGRY_ID
                    , DP_INVENTORY  II
                          LEFT OUTER  JOIN  DP_PAGE P
                                        ON  P.DP_PAGE_ID = II.DP_PAGE_ID
                          LEFT OUTER  JOIN  DP_PAGE P1
                                        ON  P1.DP_PAGE_ID = P.DEPTH_1_PAGE_ID
                          LEFT OUTER  JOIN  DP_PAGE P2
                                        ON  P2.DP_PAGE_ID = P.DEPTH_2_PAGE_ID
                          LEFT OUTER  JOIN  DP_PAGE P3
                                        ON  P3.DP_PAGE_ID = P.DEPTH_3_PAGE_ID
                          LEFT OUTER  JOIN  DP_PAGE P4
                                        ON  P4.DP_PAGE_ID = P.DEPTH_4_PAGE_ID
                          LEFT OUTER  JOIN  DP_PAGE P5
                                        ON  P5.DP_PAGE_ID = P.DEPTH_5_PAGE_ID
              WHERE   GM.DP_INVENTORY_GRP_ID = #{dpInventoryGrpId}
              <if test='@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(useYn)'>
                AND   GM.USE_YN = #{useYn}
              </if>
                AND   GM.DEL_YN = 'N'
                AND   II.DP_INVENTORY_ID = GM.DP_INVENTORY_ID
                AND   II.USE_YN = 'Y'
                AND   GM.DEL_YN = 'N'
              ) I
                  LEFT OUTER  JOIN  (
                                    SELECT  CD.ST_COMN_CODE_ID AS CODE
                                          , DC.DIC_NM          AS NAME
                                    FROM    ST_COMN_CODE CD
                                          , GB_DIC DC
                                  <where>
                                      AND   CD.ST_COMN_CODE_MST_CD  = 'DP_CONTENTS_TP'
                                      AND   CD.GB_DIC_MST_ID        = DC.GB_DIC_MST_ID
                                      AND   DC.GB_LANG_ID           = '1'
                                  </where>
                                    ) C1
                              ON    C1.CODE  = I.CONTS_LEVEL_1_TP
                  LEFT OUTER  JOIN  (
                                    SELECT  CD.ST_COMN_CODE_ID AS CODE
                                          , DC.DIC_NM          AS NAME
                                    FROM    ST_COMN_CODE CD
                                          , GB_DIC DC
                                  <where>
                                      AND   CD.ST_COMN_CODE_MST_CD  = 'DP_CONTENTS_TP'
                                      AND   CD.GB_DIC_MST_ID        = DC.GB_DIC_MST_ID
                                      AND   DC.GB_LANG_ID           = '1'
                                  </where>
                                    ) C2
                              ON    C2.CODE  = I.CONTS_LEVEL_2_TP
                  LEFT OUTER  JOIN  (
                                    SELECT  CD.ST_COMN_CODE_ID AS CODE
                                          , DC.DIC_NM          AS NAME
                                    FROM    ST_COMN_CODE CD
                                          , GB_DIC DC
                                  <where>
                                      AND   CD.ST_COMN_CODE_MST_CD  = 'DP_CONTENTS_TP'
                                      AND   CD.GB_DIC_MST_ID        = DC.GB_DIC_MST_ID
                                      AND   DC.GB_LANG_ID           = '1'
                                  </where>
                                    ) C3
                              ON    C3.CODE  = I.CONTS_LEVEL_3_TP
                  LEFT OUTER  JOIN  (
                                    SELECT  CD.ST_COMN_CODE_ID AS CODE
                                          , DC.DIC_NM          AS NAME
                                    FROM    ST_COMN_CODE CD
                                          , GB_DIC DC
                                  <where>
                                      AND   CD.ST_COMN_CODE_MST_CD  = 'DP_RANGE_TP'
                                      AND   CD.GB_DIC_MST_ID        = DC.GB_DIC_MST_ID
                                      AND   DC.GB_LANG_ID           = '1'
                                  </where>
                                    ) C4
                              ON    C4.CODE  = I.DP_RANGE_TP
    <where>
        AND   (
                (I.PAGE_TP = 'PAGE_TP.CATEGORY'  AND I.CTGRY_USE_YN  = 'Y' AND I.CTGRY_DEL_YN = 'N')
                OR
                (I.PAGE_TP != 'PAGE_TP.CATEGORY' AND 1 = 1)
              )
    </where>
      ORDER BY I.GM_SORT, I.INVENTORY_CD
  </select>

  <!--───────────────────────────────────────────────────────────────────────
   * description    : 인벤토리그룹구성 리스트조회 (개인화된 인벤토로리 그룹)
   * @
   * @ 수정일       수정자    수정내용
   * @ ──────────────────────────────────────────────────────────────────────
   * @ 2020.11.12   dgyoun    최초생성
   * @
  ────────────────────────────────────────────────────────────────────────-->
  <select id="selectDpGroupInventoryMappingList" resultType="kr.co.pulmuone.v1.display.manage.dto.vo.InventoryVo">
      /*displayManage.selectDpGroupInventoryMappingList*/
      SELECT  M.DP_INVENTORY_GRP_MAPPING_ID
            , M.DP_INVENTORY_GRP_ID
            , M.DP_INVENTORY_ID
            , M.IL_CTGRY_ID
            , M.SORT
            , M.USE_YN
            , M.DEL_YN
            , M.CREATE_ID
            , M.CREATE_DT
            , M.MODIFY_ID
            , M.MODIFY_DT
            , I.INVENTORY_CD
            , I.PAGE_TP
      FROM    DP_INVENTORY_GRP G
            , DP_INVENTORY_GRP_MAPPING M
                LEFT OUTER  JOIN  IL_CTGRY C
                            ON    C.IL_CTGRY_ID = M.IL_CTGRY_ID
            , DP_INVENTORY I
    <where>
        AND   G.DP_INVENTORY_GRP_ID = #{dpInventoryGrpId}
        <!-- AND   G.USE_YN  = 'Y' -->
        <!-- AND   G.DEL_YN  = 'N' -->
        AND   M.DP_INVENTORY_GRP_ID = G.DP_INVENTORY_GRP_ID
        AND   M.USE_YN  = 'Y'
        AND   M.DEL_YN  = 'N'
        AND   I.DP_INVENTORY_ID     = M.DP_INVENTORY_ID
        AND   I.USE_YN  = 'Y'
        AND   I.DEL_YN  = 'N'
        AND   (
                (I.PAGE_TP = 'PAGE_TP.CATEGORY'  AND C.USE_YN  = 'Y' AND C.DEL_YN = 'N')
                OR
                (I.PAGE_TP != 'PAGE_TP.CATEGORY' AND 1 = 1)
              )
    </where>
      ORDER BY I.INVENTORY_CD
  </select>

  <!--───────────────────────────────────────────────────────────────────────
   * description    : 인벤토리그룹 등록
   * @
   * @ 수정일       수정자    수정내용
   * @ ──────────────────────────────────────────────────────────────────────
   * @ 2020.11.12   dgyoun    최초생성
   * @
  ────────────────────────────────────────────────────────────────────────-->
  <insert id="addInventoryGroup" parameterType="kr.co.pulmuone.v1.display.manage.dto.vo.InventoryVo">
    /*displayManage.addInventoryGroup*/
    INSERT INTO DP_INVENTORY_GRP (
        USER_ID
      , INVENTORY_GRP_NM
      , GROUP_DESC
      , SORT
      , USE_YN
      , DEL_YN
      , CREATE_ID
      , CREATE_DT
      , MODIFY_ID
      , MODIFY_DT
    )
    VALUES (
        #{createId}
      , #{inventoryGrpNm}
      , #{groupDesc}
      , #{sort}
      , #{useYn}
      , #{delYn}
      , #{createId}
      , NOW()
      , #{modifyId}
      , NOW()
    )
    <selectKey keyProperty="dpInventoryGrpId" resultType="String" order="AFTER">
      SELECT CONCAT(LAST_INSERT_ID())
    </selectKey>
  </insert>

  <!--───────────────────────────────────────────────────────────────────────
   * description    : 인벤토리그룹 사용여부/삭제여부 변경
   * @
   * @ 수정일       수정자    수정내용
   * @ ──────────────────────────────────────────────────────────────────────
   * @ 2020.11.13   dgyoun    최초생성
   * @
  ────────────────────────────────────────────────────────────────────────-->
  <update id="putInventoryGroupUseDelYn" parameterType="kr.co.pulmuone.v1.display.manage.dto.vo.InventoryGrpMappingVo">
    /*displayManage.putInventoryGroupUseDelYn*/
    UPDATE  DP_INVENTORY_GRP
    SET     MODIFY_DT = NOW()
          , MODIFY_ID = #{modifyId}
        <if test='@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(useYn)'>
          , USE_YN    = #{useYn}
        </if>
        <if test='@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(delYn)'>
          , DEL_YN    = #{delYn}
        </if>
    WHERE   DP_INVENTORY_GRP_ID = #{dpInventoryGrpId}
    <if test='@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(delYn)'>
      AND   DEL_YN    != 'Y'
    </if>
  </update>

  <!--───────────────────────────────────────────────────────────────────────
   * description    : 인벤토리그룹  수정
   * @
   * @ 수정일       수정자    수정내용
   * @ ──────────────────────────────────────────────────────────────────────
   * @ 2020.11.12   dgyoun    최초생성
   * @
  ────────────────────────────────────────────────────────────────────────-->
  <update id="putInventoryGroup" parameterType="kr.co.pulmuone.v1.display.manage.dto.vo.InventoryGrpVo">
    /*displayManage.putInventoryGroup*/
    UPDATE  DP_INVENTORY_GRP
    SET     MODIFY_DT         = NOW()
          , MODIFY_ID         = #{modifyId}
          , INVENTORY_GRP_NM  = #{inventoryGrpNm}
          , USE_YN            = #{useYn}
          , GROUP_DESC        = #{groupDesc}
          , SORT              = #{sort}
    WHERE   DP_INVENTORY_GRP_ID = #{dpInventoryGrpId}
  </update>

  <!--───────────────────────────────────────────────────────────────────────
   * description    : 카테고리 리스트조회
   * @
   * @ 수정일       수정자    수정내용
   * @ ──────────────────────────────────────────────────────────────────────
   * @ 2020.11.12   dgyoun    최초생성
   * @
  ────────────────────────────────────────────────────────────────────────-->
  <select id="selectCtgryList" resultType="kr.co.pulmuone.v1.display.manage.dto.vo.InventoryVo">
    /*displayManage.selectCtgryList*/
    /*작업중*/
    SELECT  C.IL_CTGRY_ID
    FROM    IL_CTGRY C
    WHERE   C.MALL_DIV = #{mallDiv}
      AND   C.DEPTH    = #{depth}
      AND   C.USE_YN   = 'Y'
      AND   C.DEL_YN   = 'N'
    ORDER BY C.IL_CTGRY_ID
  </select>



  <!--───────────────────────────────────────────────────────────────────────
   * description    : 인벤토리그룹구성 등록
   * @
   * @ 수정일       수정자    수정내용
   * @ ──────────────────────────────────────────────────────────────────────
   * @ 2020.11.12   dgyoun    최초생성
   * @
  ────────────────────────────────────────────────────────────────────────-->
  <insert id="addInventoryGroupMapping" parameterType="kr.co.pulmuone.v1.display.manage.dto.vo.InventoryVo">
    /*displayManage.addInventoryGroupMapping*/
    INSERT INTO DP_INVENTORY_GRP_MAPPING (
        DP_INVENTORY_GRP_ID
      , DP_INVENTORY_ID
      , IL_CTGRY_ID
      , SORT
      , USE_YN
      , DEL_YN
      , CREATE_ID
      , CREATE_DT
      , MODIFY_ID
      , MODIFY_DT
    )
    VALUES (
        #{dpInventoryGrpId}
      , #{dpInventoryId}
      , #{ilCtgryId}
      , #{sort}
      , #{useYn}
      , #{delYn}
      , #{createId}
      , NOW()
      , #{modifyId}
      , NOW()
    )
  </insert>

  <!--───────────────────────────────────────────────────────────────────────
   * description    : 인벤토리그룹구성 사용여부/삭제여부 변경
   * @
   * @ 수정일       수정자    수정내용
   * @ ──────────────────────────────────────────────────────────────────────
   * @ 2020.11.12   dgyoun    최초생성
   * @
  ────────────────────────────────────────────────────────────────────────-->
  <update id="putInventoryGroupInventoryUseDelYn" parameterType="kr.co.pulmuone.v1.display.manage.dto.vo.InventoryVo">
    /*displayManage.putInventoryGroupInventoryUseDelYn*/
    UPDATE  DP_INVENTORY_GRP_MAPPING
    SET     MODIFY_DT = NOW()
          , MODIFY_ID = #{modifyId}
        <if test='@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(useYn)'>
          , USE_YN    = #{useYn}
        </if>
        <if test='@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(delYn)'>
          , DEL_YN    = #{delYn}
        </if>
    WHERE   DP_INVENTORY_GRP_ID = #{dpInventoryGrpId}
    <if test='@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(delYn)'>
      AND   DEL_YN    != 'Y'
    </if>
  </update>


  <!--───────────────────────────────────────────────────────────────────────
   * description    : 인벤토리그룹  순서수정
   * @
   * @ 수정일       수정자    수정내용
   * @ ──────────────────────────────────────────────────────────────────────
   * @ 2020.11.13   dgyoun    최초생성
   * @
  ────────────────────────────────────────────────────────────────────────-->
  <update id="putInventoryGroupSort" parameterType="kr.co.pulmuone.v1.display.manage.dto.vo.InventoryVo">
      /*displayManage.putInventoryGroupSort*/
      UPDATE  DP_INVENTORY_GRP
      SET     MODIFY_DT     = NOW()
            , MODIFY_ID     = #{modifyId}
            , SORT          = #{sort}
            <!-- , INVENTORY_NM  = #{inventoryNm} -->
            <!-- , USE_YN        = #{useYn} -->
            <!-- , DP_RANGE_TP   = #{dpRangeTp} -->
    <where>
        AND   DP_INVENTORY_GRP_ID = #{dpInventoryGrpId}
    </where>
  </update>



  <!-- #################################################################### -->
  <!-- 전체건수 -->
  <!-- #################################################################### -->
  <select id="selectTotalCount" resultType="int">
    /* displayManage.selectTotalCount */
    SELECT FOUND_ROWS()
  </select>


</mapper>