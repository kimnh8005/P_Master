apply plugin: 'org.springframework.boot'
apply plugin: 'war'

ext {

    isLocal = (!project.hasProperty('profile') || !profile)

    profile = isLocal ? "${DEFAULT_PROFILE}" : profile

    println "[ INFO ]  Active profile : " + profile

    DEV_BOS_MODULE_NAME = "BOS"
    DEV_BOS_DOCKER_IMAGE_NAME = "pulmuone-bos"
    DEV_BOS_DOCKER_IMAGE_TAG = "${BUILD_VERSION}"
    DEV_BOS_DOCKER_IMAGE_EXPOSE_PORT = "8280"

    QA_BOS_MODULE_NAME = "BOS"
    QA_BOS_DOCKER_IMAGE_NAME = "pulmuone-bos"
    QA_BOS_DOCKER_IMAGE_TAG = "${BUILD_VERSION}"
    QA_BOS_DOCKER_IMAGE_EXPOSE_PORT = "8280"

    VER_BOS_MODULE_NAME = "BOS"
    VER_BOS_DOCKER_IMAGE_NAME = "pulmuone-bos"
    VER_BOS_DOCKER_IMAGE_TAG = "${BUILD_VERSION}"
    VER_BOS_DOCKER_IMAGE_EXPOSE_PORT = "8280"

    PROD_BOS_MODULE_NAME = "BOS"
    PROD_BOS_DOCKER_IMAGE_NAME = "pulmuone-bos"
    PROD_BOS_DOCKER_IMAGE_TAG = "${BUILD_VERSION}"
    PROD_BOS_DOCKER_IMAGE_EXPOSE_PORT = "8280"

    // profile 별 넥서스 Snapshot Repository, 도커 레지스트리 계정 정보 지정
    switch (profile) {

        case "${DEFAULT_PROFILE}":

            ext.BOS_NEXUS_SNAPSHOT_REPOSITORY_PROTOCOL = "${NEXUS_SNAPSHOT_REPOSITORY_PROTOCOL}"
            ext.BOS_NEXUS_SNAPSHOT_REPOSITORY_URL = "${NEXUS_SNAPSHOT_REPOSITORY_URL}"
            ext.BOS_NEXUS_SNAPSHOT_REPOSITORY_USERNAME = "${NEXUS_SNAPSHOT_REPOSITORY_USERNAME}"
            ext.BOS_NEXUS_SNAPSHOT_REPOSITORY_PASSWORD = "${NEXUS_SNAPSHOT_REPOSITORY_PASSWORD}"

            ext.BOS_DOCKER_REGISTRY_PROTOCOL = "${DEV_DOCKER_REGISTRY_PROTOCOL}"
            ext.BOS_DOCKER_REGISTRY_URL = "${DEV_DOCKER_REGISTRY_URL}"
            ext.BOS_DOCKER_REGISTRY_USERNAME = "${DEV_DOCKER_REGISTRY_USERNAME}"
            ext.BOS_DOCKER_REGISTRY_PASSWORD = "${DEV_DOCKER_REGISTRY_PASSWORD}"

            ext.BOS_MODULE_NAME = "${DEV_BOS_MODULE_NAME}"
            ext.BOS_DOCKER_IMAGE_NAME = "${DEV_BOS_DOCKER_IMAGE_NAME}"
            ext.BOS_DOCKER_IMAGE_TAG = "${DEV_BOS_DOCKER_IMAGE_TAG}"
            ext.BOS_DOCKER_IMAGE_EXPOSE_PORT = "${DEV_BOS_DOCKER_IMAGE_EXPOSE_PORT}"

            break;

        case "${DEV_PROFILE}":

            ext.BOS_NEXUS_SNAPSHOT_REPOSITORY_PROTOCOL = "${NEXUS_SNAPSHOT_REPOSITORY_PROTOCOL}"
            ext.BOS_NEXUS_SNAPSHOT_REPOSITORY_URL = "${NEXUS_SNAPSHOT_REPOSITORY_URL}"
            ext.BOS_NEXUS_SNAPSHOT_REPOSITORY_USERNAME = "${NEXUS_SNAPSHOT_REPOSITORY_USERNAME}"
            ext.BOS_NEXUS_SNAPSHOT_REPOSITORY_PASSWORD = "${NEXUS_SNAPSHOT_REPOSITORY_PASSWORD}"

            ext.BOS_DOCKER_REGISTRY_PROTOCOL = "${DEV_DOCKER_REGISTRY_PROTOCOL}"
            ext.BOS_DOCKER_REGISTRY_URL = "${DEV_DOCKER_REGISTRY_URL}"
            ext.BOS_DOCKER_REGISTRY_USERNAME = "${DEV_DOCKER_REGISTRY_USERNAME}"
            ext.BOS_DOCKER_REGISTRY_PASSWORD = "${DEV_DOCKER_REGISTRY_PASSWORD}"

            ext.BOS_MODULE_NAME = "${DEV_BOS_MODULE_NAME}"
            ext.BOS_DOCKER_IMAGE_NAME = "${DEV_BOS_DOCKER_IMAGE_NAME}"
            ext.BOS_DOCKER_IMAGE_TAG = "${DEV_BOS_DOCKER_IMAGE_TAG}"
            ext.BOS_DOCKER_IMAGE_EXPOSE_PORT = "${DEV_BOS_DOCKER_IMAGE_EXPOSE_PORT}"

            break;

        case "${QA_PROFILE}":

            ext.BOS_NEXUS_SNAPSHOT_REPOSITORY_PROTOCOL = "${NEXUS_SNAPSHOT_REPOSITORY_PROTOCOL}"
            ext.BOS_NEXUS_SNAPSHOT_REPOSITORY_URL = "${NEXUS_SNAPSHOT_REPOSITORY_URL}"
            ext.BOS_NEXUS_SNAPSHOT_REPOSITORY_USERNAME = "${NEXUS_SNAPSHOT_REPOSITORY_USERNAME}"
            ext.BOS_NEXUS_SNAPSHOT_REPOSITORY_PASSWORD = "${NEXUS_SNAPSHOT_REPOSITORY_PASSWORD}"

            ext.BOS_DOCKER_REGISTRY_PROTOCOL = "${QA_DOCKER_REGISTRY_PROTOCOL}"
            ext.BOS_DOCKER_REGISTRY_URL = "${QA_DOCKER_REGISTRY_URL}"
            ext.BOS_DOCKER_REGISTRY_USERNAME = "${QA_DOCKER_REGISTRY_USERNAME}"
            ext.BOS_DOCKER_REGISTRY_PASSWORD = "${QA_DOCKER_REGISTRY_PASSWORD}"

            ext.BOS_MODULE_NAME = "${QA_BOS_MODULE_NAME}"
            ext.BOS_DOCKER_IMAGE_NAME = "${QA_BOS_DOCKER_IMAGE_NAME}"
            ext.BOS_DOCKER_IMAGE_TAG = "${QA_BOS_DOCKER_IMAGE_TAG}"
            ext.BOS_DOCKER_IMAGE_EXPOSE_PORT = "${QA_BOS_DOCKER_IMAGE_EXPOSE_PORT}"

            break;

        case "${VER_PROFILE}":

            ext.BOS_NEXUS_SNAPSHOT_REPOSITORY_PROTOCOL = "${NEXUS_SNAPSHOT_REPOSITORY_PROTOCOL}"
            ext.BOS_NEXUS_SNAPSHOT_REPOSITORY_URL = "${NEXUS_SNAPSHOT_REPOSITORY_URL}"
            ext.BOS_NEXUS_SNAPSHOT_REPOSITORY_USERNAME = "${NEXUS_SNAPSHOT_REPOSITORY_USERNAME}"
            ext.BOS_NEXUS_SNAPSHOT_REPOSITORY_PASSWORD = "${NEXUS_SNAPSHOT_REPOSITORY_PASSWORD}"

            ext.BOS_DOCKER_REGISTRY_PROTOCOL = "${VER_DOCKER_REGISTRY_PROTOCOL}"
            ext.BOS_DOCKER_REGISTRY_URL = "${VER_DOCKER_REGISTRY_URL}"
            ext.BOS_DOCKER_REGISTRY_USERNAME = "${VER_DOCKER_REGISTRY_USERNAME}"
            ext.BOS_DOCKER_REGISTRY_PASSWORD = "${VER_DOCKER_REGISTRY_PASSWORD}"

            ext.BOS_MODULE_NAME = "${VER_BOS_MODULE_NAME}"
            ext.BOS_DOCKER_IMAGE_NAME = "${VER_BOS_DOCKER_IMAGE_NAME}"
            ext.BOS_DOCKER_IMAGE_TAG = "${VER_BOS_DOCKER_IMAGE_TAG}"
            ext.BOS_DOCKER_IMAGE_EXPOSE_PORT = "${VER_BOS_DOCKER_IMAGE_EXPOSE_PORT}"

            break;

        case "${PROD_PROFILE}":

            ext.BOS_NEXUS_SNAPSHOT_REPOSITORY_PROTOCOL = "${NEXUS_SNAPSHOT_REPOSITORY_PROTOCOL}"
            ext.BOS_NEXUS_SNAPSHOT_REPOSITORY_URL = "${NEXUS_SNAPSHOT_REPOSITORY_URL}"
            ext.BOS_NEXUS_SNAPSHOT_REPOSITORY_USERNAME = "${NEXUS_SNAPSHOT_REPOSITORY_USERNAME}"
            ext.BOS_NEXUS_SNAPSHOT_REPOSITORY_PASSWORD = "${NEXUS_SNAPSHOT_REPOSITORY_PASSWORD}"

            ext.BOS_DOCKER_REGISTRY_PROTOCOL = "${PROD_DOCKER_REGISTRY_PROTOCOL}"
            ext.BOS_DOCKER_REGISTRY_URL = "${PROD_DOCKER_REGISTRY_URL}"
            ext.BOS_DOCKER_REGISTRY_USERNAME = "${PROD_DOCKER_REGISTRY_USERNAME}"
            ext.BOS_DOCKER_REGISTRY_PASSWORD = "${PROD_DOCKER_REGISTRY_PASSWORD}"

            ext.BOS_MODULE_NAME = "${PROD_BOS_MODULE_NAME}"
            ext.BOS_DOCKER_IMAGE_NAME = "${PROD_BOS_DOCKER_IMAGE_NAME}"
            ext.BOS_DOCKER_IMAGE_TAG = "${PROD_BOS_DOCKER_IMAGE_TAG}"
            ext.BOS_DOCKER_IMAGE_EXPOSE_PORT = "${PROD_BOS_DOCKER_IMAGE_EXPOSE_PORT}"

            break;

    }   // end of switch
}

group = 'kr.co.pulmuone.bos'
version = "${BUILD_VERSION}" + "-${BOS_MODULE_NAME}-SNAPSHOT"

bootWar {   // "${archiveBaseName}"-"${archiveVersion}".war 형식으로 Build
    archiveBaseName = "pulmuone-${BOS_MODULE_NAME}-${profile}"
    archiveVersion = version
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = group
            artifactId = "${tasks.bootWar.getArchiveBaseName().get()}"
            version = version
            artifact("build/libs/${tasks.bootWar.outputs.files.singleFile.name}")
                    { extension 'war' }
        }
    }

    repositories {
        maven {
            name 'nexus-snapshot-repository'
            url "${BOS_NEXUS_SNAPSHOT_REPOSITORY_PROTOCOL}://${BOS_NEXUS_SNAPSHOT_REPOSITORY_URL}"
            credentials {
                username "${BOS_NEXUS_SNAPSHOT_REPOSITORY_USERNAME}"
                password "${BOS_NEXUS_SNAPSHOT_REPOSITORY_PASSWORD}"
            }
        }
    }
}

dependencies {

    if (isLocal) {   // local 전용 의존성 추가

        // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-devtools
        implementation group: 'org.springframework.boot', name: 'spring-boot-devtools'

    }

    implementation fileTree(dir: 'src/main/webapp/WEB-INF', include: ['**/*.jar'])

    // https://mvnrepository.com/artifact/javax.servlet/jstl
    implementation group: 'javax.servlet', name: 'jstl', version: '1.2'
    implementation group: 'org.apache.tomcat', name: 'tomcat-jasper', version: '9.0.31'

}

task buildDockerImage(type: Exec, group: 'dockerBuild') {

    description = 'war 파일 빌드 후 BOS 도커 이미지 빌드'

    def commandStr = getDockerImageBuildCommand(
            "${BOS_MODULE_NAME}", "${BOS_DOCKER_REGISTRY_URL}",
            "${BOS_DOCKER_IMAGE_NAME}", "${profile}",
            "${tasks.bootWar.outputs.files.singleFile.name}", "${BOS_DOCKER_IMAGE_EXPOSE_PORT}"
    )

    commandLine commandStr

}

task tagDockerImage(type: Exec, group: 'dockerBuild') {

    description = '빌드된 BOS 도커 이미지에 고유 태그값 추가 지정'

    def commandStr = getDockerTagCommand(
            "${BOS_DOCKER_REGISTRY_URL}", "${BOS_DOCKER_IMAGE_NAME}",
            "${profile}", "${BOS_DOCKER_IMAGE_TAG}"
    )

    commandLine commandStr

}

task dockerContainerRegistryLogIn(type: Exec, group: 'dockerBuild') {

    description = 'BOS 도커 레지스트리 로그인'

    def commandStr = getDockerContainerRegistryLogInCommand(
            "${BOS_DOCKER_REGISTRY_USERNAME}", "${BOS_DOCKER_REGISTRY_PASSWORD}",
            "${BOS_DOCKER_REGISTRY_PROTOCOL}", "${BOS_DOCKER_REGISTRY_URL}"
    )

    commandLine commandStr

}

task pushDockerImage(type: Exec, group: 'dockerBuild') {

    description = '빌드된 BOS 도커 이미지를 도커 레지스트리로 push'

    def commandStr = getDockerPushCommand(
            "${BOS_DOCKER_REGISTRY_URL}", "${BOS_DOCKER_IMAGE_NAME}", "${profile}", ""
    )

    commandLine commandStr

}

task pushDockerTagImage(type: Exec, group: 'dockerBuild') {

    description = '빌드된 BOS 도커 태그 이미지를 도커 레지스트리로 push'

    def commandStr = getDockerPushCommand(
            "${BOS_DOCKER_REGISTRY_URL}", "${BOS_DOCKER_IMAGE_NAME}", "${profile}", "${BOS_DOCKER_IMAGE_TAG}"
    )

    commandLine commandStr

}

task dockerContainerRegistryLogOut(type: Exec, group: 'dockerBuild') {

    description = 'BOS 도커 레지스트리 로그아웃'

    def commandStr = getDockerContainerRegistryLogOutCommand(
            "${BOS_DOCKER_REGISTRY_PROTOCOL}", "${BOS_DOCKER_REGISTRY_URL}"
    )

    commandLine commandStr

}

task deleteDockerImage(type: Exec, group: 'dockerBuild') {

    description = 'BOS 도커 이미지 push 후 CI 서버에서 빌드된 이미지 삭제'

    def commandStr = getDockerImageDeleteCommand(
            "${BOS_DOCKER_REGISTRY_URL}", "${BOS_DOCKER_IMAGE_NAME}", "${profile}", "${BOS_DOCKER_IMAGE_TAG}"
    )

    commandLine commandStr

}

task dockerBuild(group: 'dockerBuild') {

    description = 'BOS 도커 이미지 빌드 / 태그 지정 / 레지스트리 로그인 / 이미지 push / 빌드된 이미지 삭제 / 레지스트리 로그아웃'

    doFirst {
        println "[ INFO ]  ${BOS_MODULE_NAME} 모듈 도커 빌드 시작 => Active profile : " + profile
    }

    dependsOn 'copyWhatapAgent'
    dependsOn 'buildDockerImage'
    dependsOn 'tagDockerImage'
    dependsOn 'dockerContainerRegistryLogIn'
    dependsOn 'pushDockerTagImage'
    dependsOn 'pushDockerImage'
    dependsOn 'deleteDockerImage'
    dependsOn 'dockerContainerRegistryLogOut'

    tasks.findByName('buildDockerImage').mustRunAfter 'copyWhatapAgent'
    tasks.findByName('tagDockerImage').mustRunAfter 'buildDockerImage'
    tasks.findByName('dockerContainerRegistryLogIn').mustRunAfter 'tagDockerImage'
    tasks.findByName('pushDockerTagImage').mustRunAfter 'dockerContainerRegistryLogIn'
    tasks.findByName('pushDockerImage').mustRunAfter 'pushDockerTagImage'
    tasks.findByName('deleteDockerImage').mustRunAfter 'pushDockerImage'
    tasks.findByName('dockerContainerRegistryLogOut').mustRunAfter 'deleteDockerImage'

}
