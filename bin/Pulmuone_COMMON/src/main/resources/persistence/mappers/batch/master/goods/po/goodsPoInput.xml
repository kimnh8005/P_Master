<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.pulmuone.v1.comm.mappers.batch.master.goods.po.BatchGoodsPoInputMapper">

   <!--───────────────────────────────────────────────────────────────────────
	 * description 		: 발주 IF 리스트 조회
	 * @
	 * @ 수정일			수정자          수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2021.03.02		원종한
	 * @
	────────────────────────────────────────────────────────────────────────-->
	<select id="getPoIFList" resultType="kr.co.pulmuone.v1.batch.goods.po.dto.ErpIfPurchaseOrdLineRequestDto">
	/* goodsItemPoList.getPoIFList */
		SELECT
			T.*
			, #{oriSysSeq} AS ORI_SYS_SEQ
			, 'N' AS ITF_FLG
			, LPAD(@r := @r+1, 5, '0') AS ORD_NO_DTL
			, (IFNULL(T.PO_USER_QTY, 0) + IFNULL(T.PO_SYSTEM_QTY, 0)) AS PO_IF_QTY
			, T.BASE_DT AS BASE_DT
			, CASE
					WHEN T.ORG_CD = '802' THEN 'PFF' /* 풀샵 용인 */
					WHEN T.ORG_CD = '803' THEN 'CJWMS' /* 풀샵 백암 */
					WHEN T.ORG_CD = 'O10' THEN 'OGH' /* 올가 용인 */
					ELSE ''
				END AS CRP_CD
			, CASE
					WHEN T.SUPPLIER_CD = 'PF' AND T.PO_TP = 'PO_TYPE.PRODUCTION' THEN 'SIPU'
					WHEN T.SUPPLIER_CD = 'PF' AND T.PO_TP = 'PO_TYPE.MOVING' THEN 'SIMO'
					WHEN T.SUPPLIER_CD = 'OG' AND (T.ERP_PO_TYPE = '센터(R2)' OR T.ERP_PO_TP = 'ERP_PO_TP.R2')  THEN 'OGPUR2'
					WHEN T.SUPPLIER_CD = 'OG' AND (T.ERP_PO_TYPE = '센터(R1)' OR T.ERP_PO_TP = 'ERP_PO_TP.R1') THEN 'OGPUR1'
					ELSE ''
				END AS ORD_GUB
			, CASE WHEN T.SUPPLIER_CD = 'OG' THEN 'NO_쇼핑몰' ELSE '일반주문' END AS ORD_TYP
			, T.IL_ITEM_CD AS ITM_NO
			, T.ITEM_NM AS ITM_NAM
			, CASE
					WHEN T.SUPPLIER_CD = 'PF' AND T.PO_TP = 'PO_TYPE.MOVING' THEN 0
					ELSE (T.PO_USER_QTY + T.PO_SYSTEM_QTY)
				END AS ORD_CNT
			, CASE
					WHEN T.SUPPLIER_CD = 'PF' AND T.PO_TP = 'PO_TYPE.MOVING' THEN (T.PO_USER_QTY + T.PO_SYSTEM_QTY)
					ELSE 0
				END AS REQ_CNT
			, CASE
					WHEN T.PO_TP = 'PO_TYPE.PRODUCTION' THEN DATE_FORMAT(DATE_ADD(CURDATE(), INTERVAL T.PO_REQ DAY), '%Y%m%d000000')
					WHEN T.PO_TP = 'PO_TYPE.MOVING' THEN DATE_FORMAT(DATE_ADD(CURDATE(), INTERVAL T.MOVE_REQ DAY), '%Y%m%d000000')
					ELSE DATE_FORMAT(CURDATE(), '%Y%m%d000000')
				END AS REQ_DAT
			, CASE
					WHEN T.PO_TP = 'PO_TYPE.PRODUCTION' THEN DATE_FORMAT(DATE_ADD(CURDATE(), INTERVAL T.PO_REQ DAY), '%Y%m%d000000')
					WHEN T.PO_TP = 'PO_TYPE.MOVING' THEN DATE_FORMAT(DATE_ADD(CURDATE(), INTERVAL T.MOVE_REQ DAY), '%Y%m%d000000')
					ELSE DATE_FORMAT(CURDATE(), '%Y%m%d000000')
				END AS PO_REQ_DAT
			, DATE_FORMAT(DATE_ADD(CURDATE(), INTERVAL T.MOVE_REQ DAY), '%Y%m%d000000') AS MOVE_REQ_DAT
			, DATE_FORMAT(DATE_ADD(CURDATE(), INTERVAL (T.MOVE_REQ+1) DAY), '%Y%m%d000000') AS MOVE_PRM_DAT
			, T.ORG_CD AS ORG_CD
		    , CASE
					WHEN T.ORG_CD = '802' THEN (SELECT PS_VAL FROM PS_CONFIG WHERE PS_KEY = 'PO_PF_YONGIN_shiToOrgId')
					WHEN T.ORG_CD = '803' THEN (SELECT PS_VAL FROM PS_CONFIG WHERE PS_KEY = 'PO_PF_BAEKAM_shiToOrgId')
					WHEN T.ORG_CD = 'O10' THEN (SELECT PS_VAL FROM PS_CONFIG WHERE PS_KEY = 'PO_OG_shiToOrgId')
					ELSE ''
				END AS SHI_TO_ORG_ID
			, CASE
					WHEN T.SUPPLIER_CD = 'PF' AND T.ERP_PO_TP = 'ERP_PO_TP.PD1' THEN (SELECT PS_VAL FROM PS_CONFIG WHERE PS_KEY = 'PO_PF_PD1_purGubCd')
					WHEN T.SUPPLIER_CD = 'PF' AND T.ERP_PO_TP = 'ERP_PO_TP.PD2' THEN (SELECT PS_VAL FROM PS_CONFIG WHERE PS_KEY = 'PO_PF_PD2_purGubCd')
					WHEN T.SUPPLIER_CD = 'PF' AND T.ERP_PO_TP = 'ERP_PO_TP.YJ' THEN (SELECT PS_VAL FROM PS_CONFIG WHERE PS_KEY = 'PO_PF_YangJi_purGubCd')
					WHEN T.SUPPLIER_CD = 'PF' AND T.ERP_PO_TP = 'ERP_PO_TP.PF' THEN '19'
					ELSE ''
				END AS PUR_GUB_CD
			, CASE
					WHEN T.SUPPLIER_CD = 'PF' AND T.ERP_PO_TP = 'ERP_PO_TP.PD1' THEN (SELECT PS_VAL FROM PS_CONFIG WHERE PS_KEY = 'PO_PF_PD1_dlvGubCd')
					WHEN T.SUPPLIER_CD = 'PF' AND T.ERP_PO_TP = 'ERP_PO_TP.PD2' THEN (SELECT PS_VAL FROM PS_CONFIG WHERE PS_KEY = 'PO_PF_PD2_dlvGubCd')
					ELSE ''
				END AS DLV_GUB_CD
			, CASE WHEN T.ORG_CD = '803' THEN T.ORG_CD ELSE '' END AS SUB_INV_CD      /* 백암물류 전송시 필수값 : 창고코드 */
            , CASE WHEN T.ORG_CD = '803' THEN 'CJ물류창고' ELSE '' END AS SUB_INV_NAM   /* 백암물류 전송시 필수값 : 입고처명 */
            /* 올가 R1 발주시 필요한 추가 데이터 */
            , CASE WHEN T.SUPPLIER_CD = 'OG' THEN '40' ELSE '' END AS ORD_PO_TYP
			, CASE WHEN T.SUPPLIER_CD = 'OG' THEN '쇼핑몰' ELSE '' END AS ORD_SRC
			, CASE WHEN T.SUPPLIER_CD = 'OG' THEN 'Y' ELSE '' END AS VDT_STA
			, CASE WHEN T.SUPPLIER_CD = 'OG' THEN '100' ELSE '' END AS DIV_CD
			, CASE WHEN T.SUPPLIER_CD = 'OG' THEN 'ORGA' ELSE '' END AS ORD_CLO_GRP_CD
			, CASE WHEN T.SUPPLIER_CD = 'OG' THEN '7870' ELSE '' END AS REC_ORG_ID
			, CASE
					WHEN T.SUPPLIER_CD = 'OG' AND (T.ERP_PO_TYPE = '센터(R1)' OR T.ERP_PO_TP = 'ERP_PO_TP.R1') THEN 'N'
					WHEN T.SUPPLIER_CD = 'OG' AND (T.ERP_PO_TYPE = '센터(R2)' OR T.ERP_PO_TP = 'ERP_PO_TP.R2') THEN 'N'
					ELSE '' END AS DRP_FLG
			, CASE WHEN T.SUPPLIER_CD = 'OG' AND (T.ERP_PO_TYPE = '센터(R2)' OR T.ERP_PO_TP = 'ERP_PO_TP.R2') THEN 'Y' ELSE '' END AS ITF_FLG_ERP
			, DATE_FORMAT(CURDATE(), '%Y%m%d000000') AS ORD_DAT
			, T.ORD_CNT_UOM AS ORD_CNT_UOM
			, CASE WHEN T.SUPPLIER_CD = 'OG' THEN 0 ELSE '' END AS SEL_PRC
			, 0 AS LIN_TYP_ID
			, CASE WHEN T.SUPPLIER_CD = 'OG' THEN 'N' ELSE '' END AS ORD_MRG_FLG
			, CASE WHEN T.SUPPLIER_CD = 'OG' THEN 'N' ELSE '' END AS PMT_LIN_FLG
			, CASE WHEN T.SUPPLIER_CD = 'OG' THEN 'ORDER' ELSE '' END AS LIN_CAT_CD
			, CASE WHEN T.SUPPLIER_CD = 'OG' THEN 'N' ELSE '' END AS CCL_PRC_FLG
			, CASE WHEN T.SUPPLIER_CD = 'OG' THEN 'NO' ELSE '' END AS CTX
			, CASE
					WHEN T.PO_TP = 'PO_TYPE.PRODUCTION' THEN
						CASE
							WHEN T.ORG_CD = '803' THEN DATE_FORMAT(DATE_ADD(CURDATE(), INTERVAL T.MOVE_REQ DAY), '%Y%m%d000000')			/* 백암물류의 경우 요청일을 이동일로 설정한다. */
							ELSE DATE_FORMAT(DATE_ADD(CURDATE(), INTERVAL T.PO_REQ DAY), '%Y%m%d000000') END
					WHEN T.PO_TP = 'PO_TYPE.MOVING' THEN DATE_FORMAT(DATE_ADD(CURDATE(), INTERVAL T.MOVE_REQ DAY), '%Y%m%d000000')
					ELSE DATE_FORMAT(CURDATE(), '%Y%m%d000000')
				END AS PRM_DAT
			, DATE_FORMAT(DATE_ADD(CURDATE(), INTERVAL (T.PO_REQ - 1) DAY), '%Y%m%d000000') AS DVL_REQ_DAT
			, 'Y' AS CLS_STA
			, T.TMP_VAL
		FROM (
			SELECT TT.*
				   /* 용인물류의 경우 발주저장여부에 따라 달라진다. */
				 , CASE WHEN TT.ORG_CD = '802' OR TT.ORG_CD = 'O10' THEN
							/* 전일마감재고 + D0입고예정수량 + 발주입력수량 -(D0출고+D1출고+D2출고)-[(D0폐기-D0출고)+(D1폐기-D1출고] >= 0 인 경우 추가발주수량 = 0 */
						 	CASE WHEN (TT.STOCK_CLOSED + STOCK_SCHEDULED_D0 + TT.PO_USER_QTY) - (TT.OUTBOUND_0 + TT.OUTBOUND_1 + TT.OUTBOUND_2)
									- GREATEST(((TT.STOCK_DISCARD_D0 - TT.OUTBOUND_0) + GREATEST((TT.STOCK_DISCARD_D1 - TT.OUTBOUND_1),0)), 0) <![CDATA[ >= ]]> 0 THEN 0
						 	    ELSE
									/* 식품 */
									CASE WHEN TT.SUPPLIER_CD = 'PF' THEN
											/* 유통기간이 30일 초과인 경우 추가발주수량을 박스 입수량에 맞춘다. */
											CASE WHEN TT.DISTRIBUTION_PERIOD <![CDATA[ > ]]> 30 THEN
													CEIL(
													    ABS(
													        (STOCK_CLOSED + STOCK_SCHEDULED_D0 + TT.PO_USER_QTY)
															- (TT.OUTBOUND_0 + TT.OUTBOUND_1 + TT.OUTBOUND_2)
															- GREATEST(((TT.STOCK_DISCARD_D0 - TT.OUTBOUND_0) + GREATEST((TT.STOCK_DISCARD_D1 - TT.OUTBOUND_1),0)), 0)
															) / TT.PCS_PER_BOX) * TT.PCS_PER_BOX
											    ELSE	/* 유통기간이 30일 이하인 경우 */
														/* 추가발주수량 = -1 x [(전일마감재고 + D0입고예정수량 + 발주입력수량) - (D0출고+D1출고+D2출고) - {(D0폐기-D0출고)+(D1폐기-D1출고)}]*/
											        ABS(
											            (STOCK_CLOSED + STOCK_SCHEDULED_D0 + TT.PO_USER_QTY)
											                - (TT.OUTBOUND_0 + TT.OUTBOUND_1 + TT.OUTBOUND_2)
											                - GREATEST(((TT.STOCK_DISCARD_D0 - TT.OUTBOUND_0) + GREATEST((TT.STOCK_DISCARD_D1 - TT.OUTBOUND_1),0)), 0)
											            )
											    END
									    ELSE
									        /* 올가의 경우 낱개수량만 */
									        ABS(
									            (STOCK_CLOSED + STOCK_SCHEDULED_D0 + TT.PO_USER_QTY)
									                - (TT.OUTBOUND_0 + TT.OUTBOUND_1 + TT.OUTBOUND_2)
									                - GREATEST(((TT.STOCK_DISCARD_D0 - TT.OUTBOUND_0) + GREATEST((TT.STOCK_DISCARD_D1 - TT.OUTBOUND_1),0)), 0)
									            )
									    END
						 	    END
				     ELSE 0								/* 백암물류의 경우 추가발주수량 0 */
				     END AS PO_SYSTEM_QTY
			FROM (
				SELECT
					IP.IL_PO_ID
					, IP.IL_ITEM_WAREHOUSE_ID
					, IP.STOCK_SCHEDULED_DT
					, DATE_FORMAT(IP.BASE_DT, '%Y%m%d000000') AS BASE_DT
					, IFNULL(IP.PO_USER_QTY, 0) AS PO_USER_QTY
					, IP.DISTRIBUTION_PERIOD
					, IFNULL(IP.PCS_PER_BOX, 1) AS PCS_PER_BOX
					, US.SUPPLIER_CD
					, IPT.PO_TP
					, IPT.ERP_PO_TP
					, IPT.TEMPLATE_YN
					, IPT.PO_PER_ITEM_YN
					, II.IL_ITEM_CD
					, II.ITEM_NM
					, II.ERP_PO_TYPE
					, IFNULL(II.OMS, 'EA') AS ORD_CNT_UOM
					, CASE
							WHEN T1.ORG_CD IS NOT NULL THEN T1.ORG_CD
							WHEN T2.ORG_CD IS NOT NULL THEN T2.ORG_CD
							WHEN T3.ORG_CD IS NOT NULL THEN T3.ORG_CD
							ELSE ''
						END AS ORG_CD
					, CASE
							WHEN DAYOFWEEK(CURDATE()) = 1 THEN IFNULL(IPT.PO_REQ_SUN, 2)
							WHEN DAYOFWEEK(CURDATE()) = 2 THEN IFNULL(IPT.PO_REQ_MON, 2)
							WHEN DAYOFWEEK(CURDATE()) = 3 THEN IFNULL(IPT.PO_REQ_TUE, 2)
							WHEN DAYOFWEEK(CURDATE()) = 4 THEN IFNULL(IPT.PO_REQ_WED, 2)
							WHEN DAYOFWEEK(CURDATE()) = 5 THEN IFNULL(IPT.PO_REQ_THU, 2)
							WHEN DAYOFWEEK(CURDATE()) = 6 THEN IFNULL(IPT.PO_REQ_FRI, 4)
							WHEN DAYOFWEEK(CURDATE()) = 7 THEN IFNULL(IPT.PO_REQ_SAT, 2)
							ELSE 2
						END AS PO_REQ
					, CASE
							WHEN DAYOFWEEK(CURDATE()) = 1 THEN IFNULL(IPT.MOVE_REQ_SUN, 1)
							WHEN DAYOFWEEK(CURDATE()) = 2 THEN IFNULL(IPT.MOVE_REQ_MON, 1)
							WHEN DAYOFWEEK(CURDATE()) = 3 THEN IFNULL(IPT.MOVE_REQ_TUE, 1)
							WHEN DAYOFWEEK(CURDATE()) = 4 THEN IFNULL(IPT.MOVE_REQ_WED, 1)
							WHEN DAYOFWEEK(CURDATE()) = 5 THEN IFNULL(IPT.MOVE_REQ_THU, 1)
							WHEN DAYOFWEEK(CURDATE()) = 6 THEN IFNULL(IPT.MOVE_REQ_FRI, 3)
							WHEN DAYOFWEEK(CURDATE()) = 7 THEN IFNULL(IPT.MOVE_REQ_SAT, 1)
							ELSE 1
						END AS MOVE_REQ
					, CASE WHEN II.STORAGE_METHOD_TP = 'ERP_STORAGE_TYPE.FROZEN' THEN '1'		/*	보관방법 : 냉동 - 1 */
						   WHEN II.STORAGE_METHOD_TP = 'ERP_STORAGE_TYPE.COOL' THEN '8'			/*	보관방법 : 냉장 - 8 */
						   ELSE '2' END TMP_VAL        											/* 상온, 실온, 기타 : 2 */
					, GREATEST(IFNULL((
										SELECT SUM(STOCK_QTY)
										FROM IL_ITEM_ERP_STOCK
										WHERE IL_ITEM_WAREHOUSE_ID = IIW.IL_ITEM_WAREHOUSE_ID
										AND STOCK_TP = 'ERP_STOCK_TP.ORDER'
										AND BASE_DT BETWEEN DATE_ADD(CURDATE(), INTERVAL 2 DAY) AND DATE_ADD(CURDATE(), INTERVAL 4 DAY)
					), 0), 0) AS PO_SYSTEM_ORDER                        /* 추기주문수량 (D-2 ~ D-4 출고주문) */
					, IFNULL((
								SELECT IFNULL(MAX(IF(STOCK_TP = 'ERP_STOCK_TP.CLOSED', STOCK_QTY, 0)), 0)
										+ IFNULL(MAX(IF(STOCK_TP = 'ERP_STOCK_TP.CLOSED_ADJ', STOCK_QTY, 0)), 0) AS STOCK_CLOSED
								FROM IL_ITEM_ERP_STOCK
								WHERE IL_ITEM_WAREHOUSE_ID = IIW.IL_ITEM_WAREHOUSE_ID
								AND STOCK_TP IN ('ERP_STOCK_TP.CLOSED', 'ERP_STOCK_TP.CLOSED_ADJ')
								AND BASE_DT = IP.BASE_DT
								GROUP BY IL_ITEM_WAREHOUSE_ID
					), 0) AS STOCK_CLOSED /* 전일마감재고 */
					, IFNULL((
								SELECT SUM(PO_IF_QTY)
								FROM IL_PO
								WHERE IL_ITEM_WAREHOUSE_ID = IIW.IL_ITEM_WAREHOUSE_ID
								AND PO_IF_YN = 'Y'
								AND STOCK_SCHEDULED_DT = IP.BASE_DT
							), 0) +
							IFNULL((
									SELECT STOCK_QTY
									FROM IL_ITEM_ERP_STOCK
									WHERE IL_ITEM_WAREHOUSE_ID = IIW.IL_ITEM_WAREHOUSE_ID
									AND STOCK_TP = 'ERP_STOCK_TP.SCHEDULED_ADJ'
									AND BASE_DT = IP.BASE_DT
									ORDER BY CREATE_DT DESC
									LIMIT 1
							), 0) AS STOCK_SCHEDULED_D0 /* 당일입고예정수량 */
					, IFNULL((
								SELECT IF(ST.SUM_STOCK_QTY <![CDATA[ > ]]> 0, ST.SUM_STOCK_QTY, 0)
								FROM (
										SELECT SUM(STOCK_QTY) AS SUM_STOCK_QTY
										FROM IL_ITEM_ERP_STOCK
										WHERE IL_ITEM_WAREHOUSE_ID = IIW.IL_ITEM_WAREHOUSE_ID
										AND STOCK_TP = 'ERP_STOCK_TP.ORDER'
										AND BASE_DT = IP.BASE_DT
									) ST
					), 0) AS OUTBOUND_0 /* D0 출고예정수량 */
					, IFNULL((
								SELECT IF(ST.SUM_STOCK_QTY <![CDATA[ > ]]> 0, ST.SUM_STOCK_QTY, 0)
								FROM (
										SELECT SUM(STOCK_QTY) AS SUM_STOCK_QTY
										FROM IL_ITEM_ERP_STOCK
										WHERE IL_ITEM_WAREHOUSE_ID = IIW.IL_ITEM_WAREHOUSE_ID
										AND STOCK_TP = 'ERP_STOCK_TP.ORDER'
										AND BASE_DT = DATE_ADD(IP.BASE_DT, INTERVAL 1 DAY)
								) ST
					), 0) AS OUTBOUND_1 /* D1 출고예정수량 */
					, IFNULL((
								SELECT IF(ST.SUM_STOCK_QTY <![CDATA[ > ]]> 0, ST.SUM_STOCK_QTY, 0)
								FROM (
										SELECT SUM(STOCK_QTY) AS SUM_STOCK_QTY
										FROM IL_ITEM_ERP_STOCK
										WHERE IL_ITEM_WAREHOUSE_ID = IIW.IL_ITEM_WAREHOUSE_ID
										AND STOCK_TP = 'ERP_STOCK_TP.ORDER'
										AND BASE_DT = DATE_ADD(IP.BASE_DT, INTERVAL 2 DAY)
								) ST
					), 0) AS OUTBOUND_2 /* D2 출고예정수량 */
					, IFNULL((
								SELECT SUM(STOCK_QTY)
								FROM IL_ITEM_ERP_STOCK
								WHERE IL_ITEM_WAREHOUSE_ID = IIW.IL_ITEM_WAREHOUSE_ID
								AND STOCK_TP = 'ERP_STOCK_TP.DISCARD'
								AND BASE_DT = IP.BASE_DT
								AND SCHEDULE_DT <![CDATA[ <= ]]> IP.BASE_DT
					), 0) AS STOCK_DISCARD_D0 /* D0 폐기예정수량 */
					, IFNULL((
								SELECT SUM(STOCK_QTY)
								FROM IL_ITEM_ERP_STOCK
								WHERE IL_ITEM_WAREHOUSE_ID = IIW.IL_ITEM_WAREHOUSE_ID
								AND STOCK_TP = 'ERP_STOCK_TP.DISCARD'
								AND BASE_DT = IP.BASE_DT
								AND SCHEDULE_DT = DATE_ADD(IP.BASE_DT, INTERVAL 1 DAY)
					), 0) AS STOCK_DISCARD_D1 /* D1 폐기예정수량 */
				FROM
					IL_PO IP
					INNER JOIN IL_ITEM_WAREHOUSE IIW
						ON IIW.IL_ITEM_WAREHOUSE_ID = IP.IL_ITEM_WAREHOUSE_ID
					INNER JOIN IL_ITEM II
						ON II.IL_ITEM_CD = IIW.IL_ITEM_CD
					INNER JOIN UR_SUPPLIER_WAREHOUSE USW
						ON USW.UR_SUPPLIER_WAREHOUSE_ID = IIW.UR_SUPPLIER_WAREHOUSE_ID
					INNER JOIN UR_SUPPLIER US
						ON US.UR_SUPPLIER_ID = USW.UR_SUPPLIER_ID
					INNER JOIN UR_WAREHOUSE UW
						ON UW.UR_WAREHOUSE_ID = USW.UR_WAREHOUSE_ID
					INNER JOIN IL_PO_TP IPT
						ON IPT.IL_PO_TP_ID = IIW.IL_PO_TP_ID
						AND ((IPT.TEMPLATE_YN = 'Y' AND IPT.PO_PER_ITEM_YN = 'N') OR IPT.TEMPLATE_YN = 'N')
						AND (
							CASE
								WHEN DAYOFWEEK(CURDATE()) = 1 THEN IPT.PO_SUN_YN
								WHEN DAYOFWEEK(CURDATE()) = 2 THEN IPT.PO_MON_YN
								WHEN DAYOFWEEK(CURDATE()) = 3 THEN IPT.PO_TUE_YN
								WHEN DAYOFWEEK(CURDATE()) = 4 THEN IPT.PO_WED_YN
								WHEN DAYOFWEEK(CURDATE()) = 5 THEN IPT.PO_THU_YN
								WHEN DAYOFWEEK(CURDATE()) = 6 THEN IPT.PO_FRI_YN
								WHEN DAYOFWEEK(CURDATE()) = 7 THEN IPT.PO_SAT_YN
								ELSE 'N'
							END ) = 'Y'
				LEFT JOIN (
							SELECT
								ATTR1 AS UR_SUPPLIER_ID
								, ATTR2 AS UR_WAREHOUSE_ID
								, ST_COMN_CODE_CD AS ORG_CD
							FROM ST_COMN_CODE
							WHERE
								ST_COMN_CODE_MST_CD = 'ERP_STOCK_WAREHOUSE_ID'
							) T1
						ON T1.UR_SUPPLIER_ID = US.UR_SUPPLIER_ID
						AND T1.UR_WAREHOUSE_ID = UW.UR_WAREHOUSE_ID
				LEFT JOIN (
							SELECT
								PS_VAL AS UR_WAREHOUSE_ID
								, '803' AS ORG_CD
							FROM PS_CONFIG
							WHERE
								PS_KEY = 'WAREHOUSE_BAEKAM_ID'
							) T2
						ON T2.UR_WAREHOUSE_ID = UW.UR_WAREHOUSE_ID
				LEFT JOIN (
							SELECT
								PS_VAL AS UR_WAREHOUSE_ID
								, '802' AS ORG_CD
							FROM PS_CONFIG
							WHERE
								PS_KEY = 'WAREHOUSE_YONGIN_ID'
							) T3
						ON T3.UR_WAREHOUSE_ID = UW.UR_WAREHOUSE_ID
				WHERE
					IP.BASE_DT = CURDATE()
				AND IP.PO_IF_YN = 'N'
		<choose>
			<when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(poBatchTp, "PO_BATCH_TP.YONGIN_PF_1440")'>
				AND US.SUPPLIER_CD = 'PF' /* 공급업체 : 풀샵 */
				AND UW.UR_WAREHOUSE_ID = T3.UR_WAREHOUSE_ID /* 출고처 : 용인 */
				AND IPT.PO_BATCH_YONGIN_TP = 'PO_BATCH_TP.YONGIN_PF_1440'
			</when>
			<when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(poBatchTp, "PO_BATCH_TP.YONGIN_PF_1840")'>
				AND US.SUPPLIER_CD = 'PF' /* 공급업체 : 풀샵 */
				AND UW.UR_WAREHOUSE_ID = T3.UR_WAREHOUSE_ID /* 출고처 : 용인 */
				AND IPT.PO_BATCH_YONGIN_TP = 'PO_BATCH_TP.YONGIN_PF_1840'
			</when>
			<when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(poBatchTp, "PO_BATCH_TP.YONGIN_OG_R1")'>
				AND US.SUPPLIER_CD = 'OG' /* 공급업체 : 올가 */
				AND UW.UR_WAREHOUSE_ID = T3.UR_WAREHOUSE_ID /* 출고처 : 용인 */
				AND IPT.PO_BATCH_YONGIN_TP = 'PO_BATCH_TP.YONGIN_OG_R1'		/* R1 발주 */
			</when>
			<when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(poBatchTp, "PO_BATCH_TP.YONGIN_OG_R2")'>
				AND US.SUPPLIER_CD = 'OG' /* 공급업체 : 올가 */
				AND UW.UR_WAREHOUSE_ID = T3.UR_WAREHOUSE_ID /* 출고처 : 용인 */
				AND (
					IPT.PO_BATCH_YONGIN_TP = 'PO_BATCH_TP.YONGIN_OG_R2'
					OR (IPT.TEMPLATE_YN = 'N' AND IPT.PO_PER_ITEM_YN = 'Y') /* 품목별 상이(R2) */
				)
			</when>
			<when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(poBatchTp, "PO_BATCH_TP.BAEKAM_PF_1440")'>
				AND US.SUPPLIER_CD = 'PF' /* 공급업체 : 풀샵 */
				AND UW.UR_WAREHOUSE_ID = T2.UR_WAREHOUSE_ID /* 출고처 : 백암 */
				AND IPT.PO_BATCH_BAEKAM_TP = 'PO_BATCH_TP.BAEKAM_PF_1440'
			</when>
			<when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(poBatchTp, "PO_BATCH_TP.BAEKAM_PF_1840")'>
				AND US.SUPPLIER_CD = 'PF' /* 공급업체 : 풀샵 */
				AND UW.UR_WAREHOUSE_ID = T2.UR_WAREHOUSE_ID /* 출고처 : 백암 */
				AND IPT.PO_BATCH_BAEKAM_TP = 'PO_BATCH_TP.BAEKAM_PF_1840'
			</when>
			<otherwise>
				AND 1=2
			</otherwise>
		</choose>
			) TT
		) T
		, (SELECT @r:=0) RN
		<if test='@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEquals(getPoAllYn, "Y")'>
			WHERE
				(IFNULL(T.PO_USER_QTY, 0) + IFNULL(T.PO_SYSTEM_QTY, 0)) <![CDATA[ > ]]> 0
		</if>
	</select>

	<update id="putItemPoIFResult">
		/* goodsPoInput.putItemPoIFResult */
		UPDATE
			IL_PO
		SET
			  PO_IF_YN = #{poIfYn}
			, PO_IF_DT = NOW()
			, PO_BATCH_TP = #{poBatchTp}
			, PO_SYSTEM_QTY = #{poSystemQty}
			, PO_IF_QTY = #{poIfQty}
		WHERE
			IL_PO_ID = #{ilPoId}
    </update>

	<!-- 올가 R1, R2발주시 필요 키값.(ORI_SYS_REQ) -->
	<select id="getPoSeq" resultType="String">
		/*	goodsPoInput.getPoSeq  */
		select LPAD(FN_GET_SEQ('PO_SEQ'),6,0) AS PO_SEQ
	</select>

	<!-- 올가 이동발주시 필요 키값.(ORI_SYS_REQ) -->
	<select id="getMoSeq" resultType="String">
		/*	goodsPoInput.getPoSeq  */
		select LPAD(FN_GET_SEQ('PO_SEQ'),6,0) AS PO_SEQ
	</select>

   <!--───────────────────────────────────────────────────────────────────────
	 * description 		: 발주 IF용 주문 기초 데이터
	 * @
	 * @ 수정일			수정자          수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2021.03.29		원종한
	 * @
	────────────────────────────────────────────────────────────────────────-->
	<insert id="addGoodsPoOrderCalculate">
	/* goodsPoInput.addGoodsPoOrderCalculate */
		INSERT INTO
			IL_PO_ORDER_CAL
		(
			IL_ITEM_WAREHOUSE_ID
			, BASE_DT
			, OUTBOUND_1WEEK_TOTAL
			, OUTBOUND_2WEEK_TOTAL
			, OUTBOUND_3WEEK_TOTAL
			, OUTBOUND_60DAYS_TOTAL
			, NOT_EVT_ORDER_CNT
			, NOT_EVT_DT_CNT
			, EVT_ORDER_CNT
			, EVT_DT_CNT
			, EVENT_YN
		)
		SELECT
			T.IL_ITEM_WAREHOUSE_ID AS IL_ITEM_WAREHOUSE_ID
			, #{baseDt} AS BASE_DT
			, T.OUTBOUND_1WEEK_TOTAL AS OUTBOUND_1WEEK_TOTAL
			, T.OUTBOUND_2WEEK_TOTAL AS OUTBOUND_2WEEK_TOTAL
			, T.OUTBOUND_3WEEK_TOTAL AS OUTBOUND_3WEEK_TOTAL
			, T.OUTBOUND_60DAYS_TOTAL AS OUTBOUND_60DAYS_TOTAL
			, T.NOT_EVT_ORDER_CNT AS NOT_EVT_ORDER_CNT
			, T.NOT_EVT_DT_CNT AS NOT_EVT_DT_CNT
			, T.EVT_ORDER_CNT AS EVT_ORDER_CNT
			, T.EVT_DT_CNT AS EVT_DT_CNT
			, T.EVENT_YN AS EVENT_YN
		FROM (
			SELECT
				IIW.IL_ITEM_WAREHOUSE_ID AS IL_ITEM_WAREHOUSE_ID
				, CASE
					WHEN OOD.OUTBOUND_1WEEK_TOTAL IS NULL THEN 0
					WHEN OOD.OUTBOUND_1WEEK_TOTAL <![CDATA[ < ]]> 0 THEN 0
					ELSE OOD.OUTBOUND_1WEEK_TOTAL
				END AS OUTBOUND_1WEEK_TOTAL
				, CASE
					WHEN OOD.OUTBOUND_2WEEK_TOTAL IS NULL THEN 0
					WHEN OOD.OUTBOUND_2WEEK_TOTAL <![CDATA[ < ]]> 0 THEN 0
					ELSE OOD.OUTBOUND_2WEEK_TOTAL
				END AS OUTBOUND_2WEEK_TOTAL
				, CASE
					WHEN OOD.OUTBOUND_3WEEK_TOTAL IS NULL THEN 0
					WHEN OOD.OUTBOUND_3WEEK_TOTAL <![CDATA[ < ]]> 0 THEN 0
					ELSE OOD.OUTBOUND_3WEEK_TOTAL
				END AS OUTBOUND_3WEEK_TOTAL
				, CASE
					WHEN OOD.OUTBOUND_60DAYS_TOTAL IS NULL THEN 0
					WHEN OOD.OUTBOUND_60DAYS_TOTAL <![CDATA[ < ]]> 0 THEN 0
					ELSE OOD.OUTBOUND_60DAYS_TOTAL
				END AS OUTBOUND_60DAYS_TOTAL
				, CASE
					WHEN OOD_NOT_EVT.ORDER_CNT IS NULL THEN 0
					WHEN OOD_NOT_EVT.ORDER_CNT <![CDATA[ < ]]> 0 THEN 0
					ELSE OOD_NOT_EVT.ORDER_CNT
				END AS NOT_EVT_ORDER_CNT
				, CASE
					WHEN OOD_EVT.ORDER_CNT IS NULL THEN 0
					WHEN OOD_EVT.ORDER_CNT <![CDATA[ < ]]> 0 THEN 0
					ELSE OOD_EVT.ORDER_CNT
				END AS EVT_ORDER_CNT
				, IFNULL(OOD_NOT_EVT.NONE_DISC_DT_CNT, 0) AS NOT_EVT_DT_CNT
				, IFNULL(OOD_EVT.DISC_DT_CNT, 0) AS EVT_DT_CNT
				, IF(EVENT_YN.EVENT_YN = 'Y', 'Y', 'N') AS EVENT_YN
			FROM
				IL_ITEM_WAREHOUSE IIW
				LEFT JOIN (
					SELECT
						IIW.IL_ITEM_WAREHOUSE_ID
						, OOD.IL_ITEM_CD
						, OOD.UR_WAREHOUSE_ID
						, SUM(
							IF(DATE_FORMAT(OOD.DI_DT, '%Y-%m-%d') BETWEEN WEEK_DAY.FIRST_DAY_OF_WEEK AND WEEK_DAY.LAST_DAY_OF_WEEK
								, OOD.ORDER_CNT, 0
							)
						) AS OUTBOUND_1WEEK_TOTAL
						, SUM(
							IF(DATE_FORMAT(OOD.DI_DT, '%Y-%m-%d') BETWEEN WEEK2_DAY.FIRST_DAY_OF_WEEK AND WEEK2_DAY.LAST_DAY_OF_WEEK
								, OOD.ORDER_CNT, 0
							)
						) AS OUTBOUND_2WEEK_TOTAL
						, SUM(
							IF(DATE_FORMAT(OOD.DI_DT, '%Y-%m-%d') BETWEEN WEEK3_DAY.FIRST_DAY_OF_WEEK AND WEEK3_DAY.LAST_DAY_OF_WEEK
								, OOD.ORDER_CNT, 0
							)
						) AS OUTBOUND_3WEEK_TOTAL
						, SUM(OOD.ORDER_CNT) AS OUTBOUND_60DAYS_TOTAL
					FROM
						OD_ORDER_DETL OOD
						INNER JOIN OD_ORDER OO
							ON OO.OD_ORDER_ID = OOD.OD_ORDER_ID
							AND OO.ORDER_YN = 'Y'
						INNER JOIN UR_WAREHOUSE UW
							ON UW.UR_WAREHOUSE_ID = OOD.UR_WAREHOUSE_ID
							AND UW.STOCK_ORDER_YN = 'Y'
						INNER JOIN UR_SUPPLIER US
							ON US.UR_SUPPLIER_ID = OOD.UR_SUPPLIER_ID
							AND US.SUPPLIER_CD IN ('PF', 'OG')
						INNER JOIN UR_SUPPLIER_WAREHOUSE USW
							ON USW.UR_SUPPLIER_ID = US.UR_SUPPLIER_ID
							AND USW.UR_WAREHOUSE_ID = UW.UR_WAREHOUSE_ID
						INNER JOIN IL_ITEM_WAREHOUSE IIW
							ON IIW.IL_ITEM_CD = OOD.IL_ITEM_CD
							AND IIW.UR_SUPPLIER_WAREHOUSE_ID = USW.UR_SUPPLIER_WAREHOUSE_ID
						INNER JOIN IL_ITEM II
							ON II.IL_ITEM_CD = IIW.IL_ITEM_CD
							AND II.EXTINCTION_YN = 'N'
						JOIN (
							SELECT
								DATE_ADD(CURDATE(), INTERVAL -WEEKDAY(CURDATE())-7 DAY) FIRST_DAY_OF_WEEK,
								DATE_ADD(DATE_ADD(CURDATE(), INTERVAL  -WEEKDAY(CURDATE())-7 DAY), INTERVAL 6 DAY) LAST_DAY_OF_WEEK
						) AS WEEK_DAY
						JOIN (
							SELECT
								DATE_ADD(CURDATE(), INTERVAL -WEEKDAY(CURDATE())-14 DAY) FIRST_DAY_OF_WEEK,
								DATE_ADD(DATE_ADD(CURDATE(), INTERVAL  -WEEKDAY(CURDATE())-14 DAY), INTERVAL 6 DAY) LAST_DAY_OF_WEEK
						) AS WEEK2_DAY
						JOIN (
							SELECT
								DATE_ADD(CURDATE(), INTERVAL -WEEKDAY(CURDATE())-21 DAY) FIRST_DAY_OF_WEEK,
								DATE_ADD(DATE_ADD(CURDATE(), INTERVAL  -WEEKDAY(CURDATE())-21 DAY), INTERVAL 6 DAY) LAST_DAY_OF_WEEK
						) AS WEEK3_DAY
					WHERE
						DATE_FORMAT(OOD.DI_DT, '%Y-%m-%d') BETWEEN DATE_ADD(CURDATE(), INTERVAL -61 DAY) AND DATE_ADD(CURDATE(), INTERVAL -1 DAY)
					GROUP BY
						IIW.IL_ITEM_WAREHOUSE_ID
				) AS OOD
					ON OOD.IL_ITEM_WAREHOUSE_ID = IIW.IL_ITEM_WAREHOUSE_ID
				LEFT JOIN (
					SELECT
						GE.IL_ITEM_WAREHOUSE_ID
						, SUM(OOD.ORDER_CNT - OOD.CANCEL_CNT) AS ORDER_CNT
						, GE.NONE_DISC_DT
						, GE.NONE_DISC_DT_CNT
					FROM
						OD_ORDER_DETL OOD
						INNER JOIN OD_ORDER OO
							ON OO.OD_ORDER_ID = OOD.OD_ORDER_ID
							AND OO.ORDER_YN = 'Y'
							AND (
								OO.OM_SELLERS_ID = 0 /* 통합몰 판매처 */
								OR OO.SELLERS_GROUP_CD = 'SELLERS_GROUP.VENDOR' /* 벤더 판매처 */
							)
						INNER JOIN (
							SELECT
								TT.IL_ITEM_WAREHOUSE_ID
								, TT.IL_GOODS_ID
								, IFNULL(TT.NONE_DISC_DT, '') AS NONE_DISC_DT
								, IF(TT.NONE_DISC_DT, LENGTH(TT.NONE_DISC_DT) - LENGTH(REPLACE(TT.NONE_DISC_DT, ',', '')) + 1, 0) AS NONE_DISC_DT_CNT
							FROM (
								SELECT
									IIW.IL_ITEM_WAREHOUSE_ID AS IL_ITEM_WAREHOUSE_ID
									, IG.IL_GOODS_ID AS IL_GOODS_ID
									, (
										SELECT
											GROUP_CONCAT(T.DT)
										FROM (
											SELECT
												CT.DT
											FROM
												CALENDAR_TABLE CT
											WHERE
												CT.DT <![CDATA[ < ]]> #{baseDt}
												AND CT.DT NOT IN (
													SELECT
														CT.DT
													FROM
														IL_GOODS_DISCOUNT IGD
														INNER JOIN CALENDAR_TABLE CT
															ON CT.DT BETWEEN DATE_FORMAT(IGD.DISCOUNT_START_DT, '%Y-%m-%d') AND DATE_FORMAT(IGD.DISCOUNT_END_DT, '%Y-%m-%d')
															AND CT.DT <![CDATA[ < ]]> #{baseDt}
													WHERE
														IGD.IL_GOODS_ID = IG.IL_GOODS_ID
														AND IGD.USE_YN = 'Y'
														AND IGD.DISCOUNT_TP IN ('GOODS_DISCOUNT_TP.PRIORITY', 'GOODS_DISCOUNT_TP.ERP_EVENT','GOODS_DISCOUNT_TP.IMMEDIATE')
														AND IGD.DISCOUNT_START_DT <![CDATA[ < ]]> #{baseDt}
													GROUP BY CT.DT
												)
											ORDER BY CT.DT DESC
											LIMIT 30
										) T
									) AS NONE_DISC_DT
								FROM
									IL_ITEM_WAREHOUSE IIW
									INNER JOIN UR_SUPPLIER_WAREHOUSE USW
										ON USW.UR_SUPPLIER_WAREHOUSE_ID = IIW.UR_SUPPLIER_WAREHOUSE_ID
									INNER JOIN UR_SUPPLIER US
										ON US.UR_SUPPLIER_ID = USW.UR_SUPPLIER_ID
									INNER JOIN UR_WAREHOUSE UW
										ON UW.UR_WAREHOUSE_ID = USW.UR_WAREHOUSE_ID
										AND UW.STOCK_ORDER_YN = 'Y'
									INNER JOIN IL_GOODS IG
										ON IG.IL_ITEM_CD = IIW.IL_ITEM_CD
										AND USW.UR_WAREHOUSE_ID = IG.UR_WAREHOUSE_ID
										AND IG.GOODS_TP IN ('GOODS_TYPE.NORMAL', 'GOODS_TYPE.ADDITIONAL')
							) TT
						) GE
							ON GE.IL_GOODS_ID = OOD.IL_GOODS_ID
							AND FIND_IN_SET(DATE_FORMAT(OOD.CREATE_DT, '%Y-%m-%d'), GE.NONE_DISC_DT)
					GROUP BY
						GE.IL_ITEM_WAREHOUSE_ID
				) AS OOD_NOT_EVT
					ON OOD_NOT_EVT.IL_ITEM_WAREHOUSE_ID = IIW.IL_ITEM_WAREHOUSE_ID
				LEFT JOIN (
					SELECT
						GE.IL_ITEM_WAREHOUSE_ID
						, SUM(OOD.ORDER_CNT - OOD.CANCEL_CNT) AS ORDER_CNT
						, GE.DISC_DT
						, GE.DISC_DT_CNT
					FROM
						OD_ORDER_DETL OOD
						INNER JOIN OD_ORDER OO
							ON OO.OD_ORDER_ID = OOD.OD_ORDER_ID
							AND OO.ORDER_YN = 'Y'
							AND (
								OO.OM_SELLERS_ID = 0 /* 통합몰 판매처 */
								OR OO.SELLERS_GROUP_CD = 'SELLERS_GROUP.VENDOR' /* 벤더 판매처 */
							)
/*
						INNER JOIN (
							SELECT
								OD_ORDER_DETL_ID
							FROM
								OD_ORDER_DETL_DISCOUNT
							WHERE
								DISCOUNT_TP IN ('GOODS_DISCOUNT_TP.PRIORITY', 'GOODS_DISCOUNT_TP.ERP_EVENT','GOODS_DISCOUNT_TP.IMMEDIATE', 'GOODS_DISCOUNT_TP.PACKAGE')
								AND DISCOUNT_PRICE > 0
							GROUP BY
								OD_ORDER_DETL_ID
						) OODD
							ON OODD.OD_ORDER_DETL_ID = OOD.OD_ORDER_DETL_ID
*/
						INNER JOIN (
							SELECT
								TT.IL_ITEM_WAREHOUSE_ID
								, TT.IL_GOODS_ID
								, IFNULL(TT.DISC_DT, '') AS DISC_DT
								, IF(TT.DISC_DT, LENGTH(TT.DISC_DT) - LENGTH(REPLACE(TT.DISC_DT, ',', '')) + 1, 0) AS DISC_DT_CNT
							FROM (
								SELECT
									IIW.IL_ITEM_WAREHOUSE_ID AS IL_ITEM_WAREHOUSE_ID
									, IG.IL_GOODS_ID AS IL_GOODS_ID
									, (
										SELECT
											GROUP_CONCAT(T.DT)
										FROM (
											SELECT
												T.DT
											FROM (
												SELECT
													CT.DT
												FROM
													IL_GOODS_DISCOUNT IGD
													INNER JOIN CALENDAR_TABLE CT
														ON CT.DT BETWEEN DATE_FORMAT(IGD.DISCOUNT_START_DT, '%Y-%m-%d') AND DATE_FORMAT(IGD.DISCOUNT_END_DT, '%Y-%m-%d')
														AND CT.DT <![CDATA[ < ]]> #{baseDt}
												WHERE
													IGD.IL_GOODS_ID = IG.IL_GOODS_ID
													AND IGD.IL_GOODS_ID = IG.IL_GOODS_ID
													AND IGD.USE_YN = 'Y'
													AND IGD.DISCOUNT_TP IN ('GOODS_DISCOUNT_TP.PRIORITY', 'GOODS_DISCOUNT_TP.ERP_EVENT','GOODS_DISCOUNT_TP.IMMEDIATE')
													AND IGD.DISCOUNT_START_DT <![CDATA[ < ]]> #{baseDt}
												GROUP BY CT.DT
											) T
											ORDER BY T.DT DESC
											LIMIT 30
										) T
									) AS DISC_DT
								FROM
									IL_ITEM_WAREHOUSE IIW
									INNER JOIN UR_SUPPLIER_WAREHOUSE USW
										ON USW.UR_SUPPLIER_WAREHOUSE_ID = IIW.UR_SUPPLIER_WAREHOUSE_ID
									INNER JOIN UR_SUPPLIER US
										ON US.UR_SUPPLIER_ID = USW.UR_SUPPLIER_ID
									INNER JOIN UR_WAREHOUSE UW
										ON UW.UR_WAREHOUSE_ID = USW.UR_WAREHOUSE_ID
										AND UW.STOCK_ORDER_YN = 'Y'
									INNER JOIN IL_GOODS IG
										ON IG.IL_ITEM_CD = IIW.IL_ITEM_CD
										AND USW.UR_WAREHOUSE_ID = IG.UR_WAREHOUSE_ID
										AND IG.GOODS_TP IN ('GOODS_TYPE.NORMAL', 'GOODS_TYPE.ADDITIONAL')
							) TT
						) GE
							ON GE.IL_GOODS_ID = OOD.IL_GOODS_ID
							AND FIND_IN_SET(DATE_FORMAT(OOD.CREATE_DT, '%Y-%m-%d'), GE.DISC_DT)
					GROUP BY
						GE.IL_ITEM_WAREHOUSE_ID
				) AS OOD_EVT
					ON OOD_EVT.IL_ITEM_WAREHOUSE_ID = IIW.IL_ITEM_WAREHOUSE_ID
				LEFT JOIN (
					SELECT
						TT.IL_ITEM_WAREHOUSE_ID
						, MAX(TT.EVENT_YN) AS EVENT_YN
					FROM (
						SELECT
							IIW.IL_ITEM_WAREHOUSE_ID AS IL_ITEM_WAREHOUSE_ID
							, IG.IL_GOODS_ID AS IL_GOODS_ID
							, IF(GD.IL_GOODS_DISCOUNT_ID IS NOT NULL, 'Y', 'N') AS EVENT_YN
						FROM
							IL_ITEM_WAREHOUSE IIW
							INNER JOIN UR_SUPPLIER_WAREHOUSE USW
								ON USW.UR_SUPPLIER_WAREHOUSE_ID = IIW.UR_SUPPLIER_WAREHOUSE_ID
							INNER JOIN UR_SUPPLIER US
								ON US.UR_SUPPLIER_ID = USW.UR_SUPPLIER_ID
							INNER JOIN UR_WAREHOUSE UW
								ON UW.UR_WAREHOUSE_ID = USW.UR_WAREHOUSE_ID
								AND UW.STOCK_ORDER_YN = 'Y'
							INNER JOIN IL_GOODS IG
								ON IG.IL_ITEM_CD = IIW.IL_ITEM_CD
								AND USW.UR_WAREHOUSE_ID = IG.UR_WAREHOUSE_ID
								AND IG.GOODS_TP IN ('GOODS_TYPE.NORMAL', 'GOODS_TYPE.ADDITIONAL')
							LEFT JOIN IL_GOODS_DISCOUNT GD
								ON GD.IL_GOODS_ID = IG.IL_GOODS_ID
								AND GD.USE_YN = 'Y'
								AND GD.DISCOUNT_TP IN ('GOODS_DISCOUNT_TP.PRIORITY', 'GOODS_DISCOUNT_TP.ERP_EVENT','GOODS_DISCOUNT_TP.IMMEDIATE')
								AND DATE_ADD(#{baseDt}, INTERVAL 2 DAY) BETWEEN DATE_FORMAT(GD.DISCOUNT_START_DT, '%Y-%m-%d') AND DATE_FORMAT(GD.DISCOUNT_END_DT, '%Y-%m-%d')
					) TT
					GROUP BY
						TT.IL_ITEM_WAREHOUSE_ID
				) AS EVENT_YN
					ON EVENT_YN.IL_ITEM_WAREHOUSE_ID = IIW.IL_ITEM_WAREHOUSE_ID
		) T
		ON DUPLICATE KEY UPDATE
			OUTBOUND_1WEEK_TOTAL = T.OUTBOUND_1WEEK_TOTAL
			, OUTBOUND_2WEEK_TOTAL = T.OUTBOUND_2WEEK_TOTAL
			, OUTBOUND_3WEEK_TOTAL = T.OUTBOUND_3WEEK_TOTAL
			, OUTBOUND_60DAYS_TOTAL = T.OUTBOUND_60DAYS_TOTAL
			, NOT_EVT_ORDER_CNT = T.NOT_EVT_ORDER_CNT
			, NOT_EVT_DT_CNT = T.NOT_EVT_DT_CNT
			, EVT_ORDER_CNT = T.EVT_ORDER_CNT
			, EVT_DT_CNT = T.EVT_DT_CNT
			, EVENT_YN = T.EVENT_YN
			, MODIFY_DT = NOW()
	</insert>

</mapper>
