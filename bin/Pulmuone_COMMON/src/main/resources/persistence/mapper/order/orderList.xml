<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.pulmuone.v1.comm.mapper.order.order.OrderListMapper">

	<!--───────────────────────────────────────────────────────────────────────
     * description 		: 주문 리스트
     * @
     * @ 수정일			수정자          수정내용
     * @ ──────────────────────────────────────────────────────────────────────
     * @ 2020.12.14 	이명수          최초생성
     * @
    ────────────────────────────────────────────────────────────────────────-->
	<resultMap id="getOrderListResultMap" type="kr.co.pulmuone.v1.order.order.dto.OrderListDto">
		<result column="OD_ORDER_ID"                property="odOrderId"/>
		<result column="CREATE_DT"                 	property="createDt"/>
		<result column="ODID"                 		property="odid"/>
		<result column="BUYER_NM"                 	property="buyerNm"/>
		<result column="LOGIN_ID"                 	property="loginId"/>
		<result column="GUEST_CI"                 	property="guestCi"/>
		<result column="GOODS_NM"                 	property="goodsNm"/>
		<result column="ORDER_PRICE"                property="orderPrice"/>
		<result column="SHIPPING_PRICE"             property="shippingPrice"/>
		<result column="COUPON_PRICE"               property="couponPrice"/>
		<result column="PAID_PRICE"                 property="paidPrice"/>
		<result column="ORDER_PAYMENT_TYPE"         property="orderPaymentType"/>
		<result column="AGENT_TYPE"                 property="agentType"/>
		<result column="OUTMALL_ID"                 property="outMallId"/>
		<result column="UR_USER_ID"                 property="urUserId"/>
		<result column="SELLERS_GROUP_CD"        	property="sellersGroupCd"/>
		<result column="SELLERS_GROUP_CD_NM"        property="sellersGroupCdNm"/>
		<result column="STATUS_NM"        			property="statusNm"/>
		<result column="CLAIM_STATUS_NM"        	property="claimStatusNm"/>
		<result column="COLLECTION_MALL_ID"        	property="collectionMallId"/>
		<result column="SELLERS_NM"        			property="sellersNm"/>
		<result column="ORDER_COPY_YN"        		property="orderCopyYn"/>
		<result column="ORDER_COPY_SAL_IF_YN"       property="orderCopySalIfYn"/>
		<result column="ORDER_COPY_ODID"        	property="orderCopyOdid"/>
		<result column="ORDER_CREATE_YN"        	property="orderCreateYn"/>
		<result column="RECV_NM"					property="recvNm"/>
		<result column="RECV_ADDR1"					property="recvAddr1"/>
		<result column="RECV_ADDR2"					property="recvAddr2"/>
	</resultMap>

	<resultMap id="getOrderExcelListResultMap" type="kr.co.pulmuone.v1.order.order.dto.OrderExcelListDto">
		<result column="ORDER_CREATE_DT"            property="orderCreateDt" />
		<result column="ODID"                       property="odid" />
		<result column="BUYER_NM"                   property="buyerNm" />
		<result column="SELLERS_NM"                 property="sellersNm" />
		<result column="GOODS_NM"                   property="goodsNm" />
		<result column="ORDER_PRICE"                property="orderPrice" />
		<result column="SHIPPING_PRICE"             property="shippingPrice" />
		<result column="COUPON_PRICE"               property="couponPrice" />
		<result column="PAID_PRICE"                 property="paidPrice" />
		<result column="ORDER_PAYMENT_TYPE"         property="orderPaymentType" />
		<result column="AGENT_TYPE"                 property="agentType"/>
		<result column="STATUS_NM"                  property="statusNm"/>
		<result column="CLAIM_STATUS_NM"            property="claimStatusNm"/>
		<result column="COLLECTION_MALL_ID"         property="collectionMallId" />
		<result column="RECV_NM"					property="recvNm"/>
		<result column="RECV_ADDR1"					property="recvAddr1"/>
		<result column="RECV_ADDR2"					property="recvAddr2"/>
		<result column="RECV_HP"					property="recvHp"/>
		<result column="BUYER_HP"					property="buyerHp"/>
	</resultMap>

	<resultMap id="getOrderDetailExcelListResultMap" type="kr.co.pulmuone.v1.order.order.dto.OrderDetailExcelListDto">
		<result column="ODID"                       property="odid" />
		<result column="SELLERS_NM"                 property="sellersNm" />
		<result column="COLLECTION_MALL_ID"         property="collectionmallid" />
		<result column="OUTMALL_ID"                 property="outmallId" />
		<result column="UR_GROUP_NM"                property="urGroupNm" />
		<result column="UR_USER_ID"                 property="urUserId" />
		<result column="UR_EMPLOYEE_CD"             property="urEmployeeCd" />
		<result column="BUYER_NM"                   property="buyerNm" />
		<result column="BUYER_HP"                   property="buyerHp" />
		<result column="BUYER_TEL"                  property="buyerTel" />
		<result column="BUYER_MAIL"                 property="buyerMail" />
		<result column="DELIVERY_TYPE"              property="deliveryType" />
		<result column="SHIPPING_TYPE"              property="shippingType" />
		<result column="RECV_NM"                    property="recvNm" />
		<result column="RECV_HP"                    property="recvHp" />
		<result column="RECV_TEL"                   property="recvTel" />
		<result column="RECV_MAIL"                  property="recvMail" />
		<result column="RECV_ZIP_CD"                property="recvZipCd" />
		<result column="RECV_ADDR1"                 property="recvAddr1" />
		<result column="RECV_ADDR2"                 property="recvAddr2" />
		<result column="RECV_BLD_NO"                property="recvBldNo" />
		<result column="DELIVERY_MSG"               property="deliveryMsg" />
		<result column="DOOR_MSG_CD"                property="doorMsgCd" />
		<result column="DOOR_MSG"                   property="doorMsg" />
		<result column="AGENT_TYPE"                 property="agentType"/>
		<result column="ORDER_PAYMENT_TYPE"         property="orderPaymentType" />
		<result column="ORDER_PRICE"                property="orderPrice" />
		<result column="SHIPPING_PRICE"             property="shippingPrice" />
		<result column="COUPON_PRICE"               property="couponPrice" />
		<result column="PAID_PRICE"                 property="paidPrice" />
		<result column="ORDER_STATUS_NM"            property="orderStatusNm" />
		<result column="CLAIM_STATUS_NM"            property="claimStatusNm" />
		<result column="IC_DT"                      property="icDt" />
		<result column="ORDER_CREATE_DT"            property="orderCreateDt" />
		<result column="IC_DT"                      property="icDt" />
		<result column="OD_ORDER_DETL_SEQ"          property="odOrderDetlSeq" />
		<result column="UR_WAREHOUSE_GRP_NM"        property="urWarehouseGrpNm" />
		<result column="STORAGE_TYPE_NM"            property="storageTypeNm" />
		<result column="GOODS_TP_NM"                property="goodsTpNm" />
		<result column="GOODS_DELIVERY_TYPE_NM"     property="goodsDeliveryTypeNm" />
		<result column="SALE_TP_NM"                 property="saleTpNm" />
		<result column="IL_CTGRY_STD_NM"            property="ilCtgryStdNm" />
		<result column="IL_CTGRY_DISPLAY_NM"        property="ilCtgryDisplayNm" />
		<result column="IL_ITEM_CD"                 property="ilItemCd" />
		<result column="ITEM_BARCODE"               property="itemBarcode" />
		<result column="ITEM_NM"                    property="itemNm" />
		<result column="IL_GOODS_ID"                property="ilGoodsId" />
		<result column="GOODS_NM"                   property="goodsNm" />
		<result column="TAX_NM"                     property="taxNm" />
		<result column="GOODS_DISCOUNT_TP_NM"       property="goodsDiscountTpNm" />
		<result column="STANDARD_PRICE"             property="standardPrice" />
		<result column="RECOMMENDED_PRICE"          property="recommendedPrice" />
		<result column="SALE_PRICE"                 property="salePrice" />
		<result column="ORDER_DETL_STATUS_NM"       property="orderDetlStatusNm" />
		<result column="CLAIM_DETL_STATUS_NM"       property="claimDetlStatusNm" />
		<result column="REFUND_STATUS_NM"           property="refundStatusNm" />
		<result column="CLAIM_REASON_NM"            property="claimReasonNm" />
		<result column="CLAIM_REASON_MSG"           property="claimReasonMsg" />
		<result column="DR_ID"                      property="drId" />
		<result column="DR_DT"                      property="drDt" />
		<result column="DI_ID"                      property="diId" />
		<result column="DI_DT"                      property="diDt" />
		<result column="DC_ID"                      property="dcId" />
		<result column="DC_DT"                      property="dcDt" />
		<result column="BF_ID"                      property="bfId" />
		<result column="BF_DT"                      property="bfDt" />
		<result column="CA_ID"                      property="caId" />
		<result column="CA_DT"                      property="caDt" />
		<result column="CC_ID"                      property="ccId" />
		<result column="CC_DT"                      property="ccDt" />
		<result column="RA_ID"                      property="raId" />
		<result column="RA_DT"                      property="raDt" />
		<result column="RI_ID"                      property="riId" />
		<result column="RI_DT"                      property="riDt" />
		<result column="RF_ID"                      property="rfId" />
		<result column="RF_DT"                      property="rfDt" />
		<result column="RC_ID"                      property="rcId" />
		<result column="RC_DT"                      property="rcDt" />
		<result column="EC_ID"                      property="ecId" />
		<result column="EC_DT"                      property="ecDt" />
		<result column="CS_ID"                      property="csId" />
		<result column="CS_DT"                      property="csDt" />
		<result column="FA_ID"                      property="faId" />
		<result column="FA_DT"                      property="faDt" />
		<result column="FC_ID"                      property="fcId" />
		<result column="FC_DT"                      property="fcDt" />
		<result column="CR_ID"                      property="crId" />
		<result column="CR_DT"                      property="crDt" />
		<result column="CE_ID"                      property="ceId" />
		<result column="CE_DT"                      property="ceDt" />
		<result column="ORDER_IF_ID"                property="orderIfId" />
		<result column="ORDER_IF_DT"                property="orderIfDt" />
		<result column="SHIPPING_ID"                property="shippingId" />
		<result column="SHIPPING_DT"                property="shippingDt" />
		<result column="DELIVERY_ID"                property="deliveryId" />
		<result column="DELIVERY_DT"                property="deliveryDt" />
		<result column="PS_SHIPPING_COMP_ID"		property="psShippingCompId" />
		<result column="OD_TRACKING_NUMBER_ID"		property="odTrackingNumberId" />
		<result column="ERP_CTGRY_NM"				property="erpCtgryNm" />
	</resultMap>

	<sql id="searchSellersDetail">


		<if test='@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(sellersGroup)'>
			AND OD.SELLERS_GROUP_CD = #{sellersGroup}
		</if>
		<if test="omSellersIdList.size() > 0">
			AND OD.OM_SELLERS_ID IN
			<foreach collection="omSellersIdList" item="sellersDetail" index="index" separator="," open="(" close=")">
				#{sellersDetail}
			</foreach>
		</if>
	</sql>

	<sql id="searchDate">

		<choose>
			<when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(dateSearchType, "CREATE_DATE")'> <!-- 주문일자 -->
				AND OD.CREATE_DT BETWEEN #{dateSearchStart} AND (#{dateSearchEnd} + INTERVAL 1 DAY - INTERVAL 1 SECOND)
			</when>
			<when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(dateSearchType, "PAY_DATE")'> <!-- 결제일자 -->
				AND EXISTS ( SELECT 'X'
						FROM OD_ORDER_DT
						WHERE OD_ORDER_ID = OD.OD_ORDER_ID
						AND IC_DT BETWEEN #{dateSearchStart} AND (#{dateSearchEnd} + INTERVAL 1 DAY - INTERVAL 1 SECOND)
				)
			</when>
			<when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(dateSearchType, "DELIVERY_DATE")'> <!-- 도착예정일 -->
				AND OOD.DELIVERY_DT BETWEEN #{dateSearchStart} AND (#{dateSearchEnd} + INTERVAL 1 DAY - INTERVAL 1 SECOND)
			</when>
		</choose>

	</sql>


	<sql id="searchPaymentMethodCode">
		AND OD.ORDER_PAYMENT_TYPE IN
		<foreach collection="paymentMethodCodeList" item="paymentMethodCode" index="index" separator="," open="(" close=")">
			#{paymentMethodCode}
		</foreach>
	</sql>

	<sql id="searchBuyerTypeCode">
		AND OD.BUYER_TYPE_CD IN
		<foreach collection="buyerTypeCodeList" item="buyerTypeCode" index="index" separator="," open="(" close=")">
			#{buyerTypeCode}
		</foreach>
	</sql>

	<sql id="searchAgentTypeCode">
		AND OD.AGENT_TYPE_CD IN
		<foreach collection="agentTypeCodeList" item="agentTypeCode" index="index" separator="," open="(" close=")">
			#{agentTypeCode}
		</foreach>
	</sql>

	<sql id="searchKeyword">
		<choose>
			<when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(searchMultiType, "BUYER_NAME")'> <!-- 주문자명 -->
				AND FN_DECRYPT(OD.BUYER_NM) = #{findKeyword}
			</when>
			<when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(searchMultiType, "BUYER_ID")'> <!-- 주문자ID -->
				AND EXISTS ( SELECT 'X'
				FROM UR_USER
				WHERE UR_USER_ID = OD.UR_USER_ID
				AND LOGIN_ID LIKE CONCAT(#{findKeyword}, '%') )
			</when>
			<when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(searchMultiType, "ORDER_ID")'> <!-- 주문번호 -->
				AND OD.ODID = #{findKeyword}
			</when>
			<when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(searchMultiType, "OUTMALL_ID")'> <!-- 외부몰 주문번호 -->
				AND EXISTS ( SELECT 'X'
				FROM OD_ORDER_DETL
				WHERE OD_ORDER_ID = OD.OD_ORDER_ID
				AND OUTMALL_DETAIL_ID = #{findKeyword})
			</when>
			<when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(searchMultiType, "COLLECTION_MALL_ID")'> <!-- 수집몰 주문번호 -->
				AND OD.COLLECTION_MALL_ID = #{findKeyword}
			</when>
			<when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(searchMultiType, "GOODS_NAME")'> <!-- 상품명 -->
				AND EXISTS ( SELECT 'X'
				FROM OD_ORDER_DETL S1
				WHERE OD_ORDER_ID = OD.OD_ORDER_ID
				AND (GOODS_NM LIKE CONCAT('%', #{findKeyword}, '%')
					OR EXISTS (SELECT 'X' FROM OD_ORDER_DETL_PACK WHERE GOODS_NM LIKE CONCAT('%', #{findKeyword}, '%') AND OD_ORDER_DETL_ID = S1.OD_ORDER_DETL_PARENT_ID)
					)
				)
			</when>
			<when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(searchMultiType, "GOODS_ID")'> <!-- 상품코드 -->
				AND EXISTS ( SELECT 'X'
				FROM OD_ORDER_DETL S1
				WHERE OD_ORDER_ID = OD.OD_ORDER_ID
				AND (IL_GOODS_ID = #{findKeyword}
					OR EXISTS (SELECT 'X' FROM OD_ORDER_DETL_PACK WHERE IL_GOODS_ID = #{findKeyword} AND OD_ORDER_DETL_ID = S1.OD_ORDER_DETL_PARENT_ID)
					)
				)
			</when>
			<when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(searchMultiType, "ITEM_CODE")'> <!-- 품목코드 -->
				AND EXISTS ( SELECT 'X'
				FROM OD_ORDER_DETL
				WHERE OD_ORDER_ID = OD.OD_ORDER_ID
				AND IL_ITEM_CD = #{findKeyword}
				)
			</when>
			<when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(searchMultiType, "ITEM_BARCODE")'> <!-- 품목바코드 -->
				AND EXISTS ( SELECT 'X'
				FROM OD_ORDER_DETL
				WHERE OD_ORDER_ID = OD.OD_ORDER_ID
				AND ITEM_BARCODE = #{findKeyword}
				)
			</when>
		</choose>
	</sql>

	<sql id="searchSingleKeyword">
		<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(searchSingleType,'ORDER_ID') ">
			<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(codeSearchList)">
				AND OD.ODID IN
				<foreach item="data" index="index" collection="codeSearchList" open="(" separator="," close=")">
					#{data}
				</foreach>
			</if>
		</if>
		<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(searchSingleType,'OUTMALL_ID') ">
			<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(codeSearchList)">
				AND OD.OUTMALL_ID IN
				<foreach item="data" index="index" collection="codeSearchList" open="(" separator="," close=")">
					#{data}
				</foreach>
			</if>
		</if>
		<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(searchSingleType,'COLLECTION_MALL_ID') ">
			<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(codeSearchList)">
				AND OD.COLLECTION_MALL_ID IN
				<foreach item="data" index="index" collection="codeSearchList" open="(" separator="," close=")">
					#{data}
				</foreach>
			</if>
		</if>
	</sql>


	<sql id="searchOrderItem">
		AND IFNULL(OD.ORDER_YN, 'N') = 'Y'
		<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(selectConditionType,'singleSection') ">
			<include refid="searchSingleKeyword" />
		</if>
		<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(selectConditionType,'multiSection') ">
			<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(sellersGroup)">
				<include refid="searchSellersDetail" />
			</if>
			<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(dateSearchStart)"> <!-- 기간검색 -->
				<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(dateSearchEnd)">
					<include refid="searchDate" />
				</if>
			</if>

			<if test='notOrderStateYn eq "Y"'>
				AND EXISTS (
					SELECT
						'X'
					FROM
					(
						SELECT
							T1.STATUS_CD
						FROM
							OD_ORDER_DETL S1
						INNER JOIN
							OD_STATUS T1 ON S1.ORDER_STATUS_CD = T1.STATUS_CD
						WHERE
							S1.OD_ORDER_ID = OD.OD_ORDER_ID
						ORDER BY T1.ORDER_STATUS_SORT ASC
						LIMIT 1
					) A
					WHERE	1 = 1
					<if test='orderStateList.size() > 0 '>
						AND A.STATUS_CD IN
						<foreach collection="orderStateList" item="orderStateCode" index="index" separator="," open="(" close=")">
							#{orderStateCode}
						</foreach>
					</if>
				)
			</if>
			<if test='notOrderStateYn eq "N"'>
				AND EXISTS (SELECT 'X' FROM OD_CLAIM S1 WHERE S1.OD_ORDER_ID = OD.OD_ORDER_ID)
			</if>


			<if test='notClaimStateYn eq "Y"'>
				AND EXISTS (
					SELECT
						'X'
					FROM
						(
							SELECT
								OS.STATUS_CD
							FROM
								OD_CLAIM OC
							INNER JOIN OD_CLAIM_DETL OCD ON OC.OD_CLAIM_ID = OCD.OD_CLAIM_ID
							INNER JOIN OD_STATUS OS ON OCD.CLAIM_STATUS_CD = OS.STATUS_CD
							WHERE
								OC.OD_ORDER_ID = OD.OD_ORDER_ID
							ORDER BY OS.CLAIM_STATUS_SORT ASC
							LIMIT 1
						) A
					WHERE
						1 = 1
					<if test="claimStateList.size() > 0">
						AND A.STATUS_CD IN
						<foreach collection="claimStateList" item="claimStateCode" index="index" separator="," open="(" close=")">
							#{claimStateCode}
						</foreach>
					</if>
				)
			</if>
			<if test='notClaimStateYn eq "N"'>
				AND NOT EXISTS (SELECT 'X' FROM OD_CLAIM S1 WHERE S1.OD_ORDER_ID = OD.OD_ORDER_ID)
			</if>



			<if test="paymentMethodCodeList.size() > 0">
				<include refid="searchPaymentMethodCode" />
			</if>
			<if test="buyerTypeCodeList.size() > 0">
				<include refid="searchBuyerTypeCode" />
			</if>
			<if test="agentTypeCodeList.size() > 0">
				<include refid="searchAgentTypeCode" />
			</if>
			<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(findKeyword)">
				<include refid="searchKeyword" />
			</if>
			<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(findKeywordForCustomer)">
				<include refid="searchKeywordForCustomer" />
			</if>
			<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(findKeywordForContact)">
				<include refid="searchKeywordForContact" />
			</if>
			<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(findKeywordForAddr)">
				<include refid="searchKeywordForAddr" />
			</if>
			<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(findKeywordForOrder)">
				<include refid="searchDetailKeywordForOrder" />
			</if>
			<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(findKeywordForGoods)">
				<include refid="searchDetailKeywordForGoods" />
			</if>

		</if>
		<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(urUserId)">
			AND EXISTS ( SELECT 'X'
				FROM UR_USER
				WHERE UR_USER_ID = OD.UR_USER_ID
				AND UR_USER_ID LIKE CONCAT(#{urUserId}, '%') )
		</if>
		<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(shopStockStatus)">
		/* 매장 항목 START */
			AND OSZ.DELIVERY_TYPE IN ('DELIVERY_TYPE.SHOP_DELIVERY', 'DELIVERY_TYPE.SHOP_PICKUP')
			<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(urStoreId)">
				AND US.UR_STORE_ID = #{urStoreId}
			</if>
			<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(scheduleNo)">
				AND OD.STORE_SCHEDULE_NO = #{scheduleNo}
			</if>
			<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(deliveryType)">
				<choose>
					<when test="@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(deliveryType,'STORE_DELIVERY_TYPE.DIRECT') ">
						AND OSZ.DELIVERY_TYPE = 'DELIVERY_TYPE.SHOP_DELIVERY'
					</when>
					<when test="@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(deliveryType,'STORE_DELIVERY_TYPE.PICKUP') ">
						AND OSZ.DELIVERY_TYPE = 'DELIVERY_TYPE.SHOP_PICKUP'
					</when>
				</choose>
			</if>
			<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(urStoreId)">
				AND OD.UR_STORE_ID = #{urStoreId}
			</if>
		/* 매장 항목 END */
		</if>
        <if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(listAuthWarehouseId) and listAuthWarehouseId.size != 0">
            AND OOD.UR_WAREHOUSE_ID IN (
            <foreach collection="listAuthWarehouseId" item="warehouseId" separator=",">
                #{warehouseId}
            </foreach>
            )
        </if>
		<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(listAuthSupplierId) and listAuthSupplierId.size != 0">
			AND OOD.UR_SUPPLIER_ID IN (
				<foreach collection="listAuthSupplierId" item="authSupplierId" separator=",">
					#{authSupplierId}
				</foreach>
			)
		</if>
		<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(listAuthStoreId) and listAuthStoreId.size != 0">
			AND OD.UR_STORE_ID IN (
				<foreach collection="listAuthStoreId" item="authStoreId" separator=",">
					#{authStoreId}
				</foreach>
			)
		</if>
		<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(listAuthSellersId) and listAuthSellersId.size != 0">
			AND OD.OM_SELLERS_ID IN (
				<foreach collection="listAuthSellersId" item="authSellersId" separator=",">
					#{authSellersId}
				</foreach>
			)
		</if>

	</sql>

	<select id="getOrderListCount" resultType="long" parameterType="kr.co.pulmuone.v1.order.order.dto.OrderListRequestDto">
		/*	order.getOrderListCount  */
		SELECT COUNT(1) AS CNT
		  FROM (SELECT OD.OD_ORDER_ID
			      FROM OD_ORDER OD
                    INNER JOIN OD_ORDER_DETL OOD	ON OD.OD_ORDER_ID 		= OOD.OD_ORDER_ID
					INNER JOIN OD_SHIPPING_ZONE OSZ ON OSZ.OD_SHIPPING_ZONE_ID = OOD.OD_SHIPPING_ZONE_ID
		  			<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(shopStockStatus)">
            	    /* 매장 항목 START */
					INNER JOIN UR_STORE US ON OD.UR_STORE_ID = US.UR_STORE_ID
            	    /* 매장 항목 END */
				 	</if>
			     WHERE 1=1
			     <include refid="searchOrderItem" />
                GROUP BY OD.OD_ORDER_ID
			   ) OD
		 INNER JOIN OD_ORDER_DT OODT 	ON OD.OD_ORDER_ID 		= OODT.OD_ORDER_ID
		 INNER JOIN OD_PAYMENT OP 		ON OD.OD_ORDER_ID 		= OP.OD_ORDER_ID
		 							   AND OP.OD_CLAIM_ID 		= 0

	</select>

	<select id="getOrderList" resultMap="getOrderListResultMap">
    	/* order.getOrderList */
    	SELECT OD.OD_ORDER_ID
          	 , OOD.CREATE_DT
          	 , OD.ODID
          	 , FN_DECRYPT(OD.BUYER_NM) AS BUYER_NM
          	 , UU.LOGIN_ID
          	 , OD.GUEST_CI
          	 , OD.GOODS_NM
          	 , IFNULL(OP.SALE_PRICE, 0)          							AS ORDER_PRICE
          	 , IFNULL(OP.SHIPPING_PRICE, 0)   								AS SHIPPING_PRICE
	  	  	 , (IFNULL(OP.CART_COUPON_PRICE, 0) + IFNULL(OP.GOODS_COUPON_PRICE, 0) + IFNULL(OD.SHIPPING_DISCOUNT_PRICE , 0)) AS COUPON_PRICE
			<!-- 주문결제.장바구니쿠폰할인금액 (OD_ORDER_DETL.CART_COUPON_PRICE) -->
            <!-- 주문결제.상품쿠폰할인금액 (OD_ORDER_DETL.GOODS_COUPON_PRICE 합계) -->
            <!-- 주문결제(집계).장바구니쿠폰할인금액 -->
            <!-- 주문결제(집계).상품쿠폰할인금액 -->
          	 , IFNULL(OP.PAYMENT_PRICE , 0)									AS PAID_PRICE
          	 , IFNULL(OP.POINT_PRICE, 0) 							        AS POINT_PRICE
          	 , FN_COMN_CODE_DIC(OD.ORDER_PAYMENT_TYPE)                      AS ORDER_PAYMENT_TYPE
          	 , FN_COMN_CODE_DIC(OD.AGENT_TYPE_CD)                           AS AGENT_TYPE
          	 , OD.OUTMALL_ID
          	 , OD.UR_USER_ID
          	 , OD.SELLERS_GROUP_CD
          	 , IFNULL(FN_COMN_CODE_DIC(OD.SELLERS_GROUP_CD), '')            AS SELLERS_GROUP_CD_NM
          	 /* , IFNULL(OD.ORDER_STATUS_NM, '')    	                        AS STATUS_NM */
          	 , IFNULL(FN_CLAIM_STATUS_NM(OD.OD_ORDER_ID), '')                           AS CLAIM_STATUS_NM
          	 , OD.COLLECTION_MALL_ID
          	 , IFNULL(OS.SELLERS_NM, '')                                    AS SELLERS_NM
			 , IFNULL(ORDER_COPY_YN, 'N')									AS ORDER_COPY_YN
			 , IFNULL(ORDER_COPY_SAL_IF_YN, 'N')							AS ORDER_COPY_SAL_IF_YN
			 , IFNULL(ORDER_COPY_ODID, '')									AS ORDER_COPY_ODID
			 , IFNULL(ORDER_CREATE_YN, 'N')									AS ORDER_CREATE_YN
    		 , OD.UR_GROUP_ID
    		 <if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(shopStockStatus)">
			  /* 매장 항목 START */
			 , IFNULL(OD.UR_STORE_NM, '') AS UR_STORE_NM
             , OD.STORE_SCHEDULE_NO
			 , DATE_FORMAT(OD.STORE_START_TIME, '%H:%i') AS STORE_START_TIME
			 , DATE_FORMAT(OD.STORE_END_TIME, '%H:%i') AS STORE_END_TIME
			 , IFNULL(FN_COMN_CODE_DIC(OD.DELIVERY_TYPE), '') AS DELIVERY_TYPE_NM
			 , DATE_FORMAT(OD.DELIVERY_DT, '%Y-%m-%d') AS DELIVERY_DT
			  /* 매장 항목 END */
			  </if>
			 , FN_DECRYPT(OD.RECV_NM) AS RECV_NM
			 , FN_DECRYPT(OD.RECV_ADDR1) AS RECV_ADDR1
			 , FN_DECRYPT(OD.RECV_ADDR2) AS RECV_ADDR2
			 , CASE WHEN OODSUB.ORDER_STATUS_CD IS NOT NULL
				THEN FN_ORDER_DETAIL_STATUS_NM(OD.ORDER_STATUS_CD)
				ELSE IFNULL(FN_ORDER_DETAIL_STATUS_NM(OD.ORDER_STATUS_CD),FN_ORDER_PACK_STATUS_NM(OODP.OD_ORDER_DETL_ID))
				END AS STATUS_NM
    		 , IFNULL(OD.ORDER_BOS_JSON, '') AS ORDER_BOS_JSON
    		 , IFNULL(OD.CLAIM_BOS_JSON, '') AS CLAIM_BOS_JSON
    	  FROM (SELECT OD.OD_ORDER_ID
	                 , OD.ODID
	                 , OD.BUYER_NM
	                 , OD.GUEST_CI
	                 , OD.GOODS_NM
	                 , OD.ORDER_PAYMENT_TYPE
	                 , OD.AGENT_TYPE_CD
	                 , OD.OUTMALL_ID
	                 , OD.UR_USER_ID
	                 , OD.SELLERS_GROUP_CD
	                 , OD.OM_SELLERS_ID
	                 , OD.COLLECTION_MALL_ID
		  			 , OSP.SHIPPING_DISCOUNT_PRICE
	                 , SUM(MOP.SALE_PRICE)         	AS SALE_PRICE
	                 , SUM(MOP.DIRECT_PRICE)       	AS DIRECT_PRICE
	                 , SUM(MOP.SHIPPING_PRICE)     	AS SHIPPING_PRICE
	                 , SUM(MOP.GOODS_COUPON_PRICE) 	AS GOODS_COUPON_PRICE
	                 , SUM(MOP.CART_COUPON_PRICE)  	AS CART_COUPON_PRICE
	                 , SUM(MOP.PAYMENT_PRICE)      	AS PAYMENT_PRICE
	                 , SUM(MOP.PAID_PRICE)         	AS PAID_PRICE
	                 , SUM(MOP.POINT_PRICE)        	AS POINT_PRICE
	                 , ORDER_COPY_YN
					 , ORDER_COPY_SAL_IF_YN
					 , ORDER_COPY_ODID
					 , ORDER_CREATE_YN
    	             , OD.UR_GROUP_ID
    	  			 <if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(shopStockStatus)">
					  /* 매장 항목 START */
					 , US.NM AS UR_STORE_NM
    	             , OD.STORE_SCHEDULE_NO
					 , OD.STORE_START_TIME
					 , OD.STORE_END_TIME
					 , OSZ.DELIVERY_TYPE
					 , OOD.DELIVERY_DT
					  /* 매장 항목 END */
					  </if>
    	  			 , OSZ.RECV_NM
    	  			 , OSZ.RECV_ADDR1
    	  			 , OSZ.RECV_ADDR2
					 , OOD.ORDER_STATUS_CD
					 , OOD.OD_ORDER_DETL_PARENT_ID
					 , OOD.OD_ORDER_DETL_DEPTH_ID
					 , IF(OOD.ORDER_STATUS_DELI_TP = 'ORDER_STATUS_DELI_TP.RENTAL', FN_BOS_JSON(OOD.ORDER_STATUS_CD), '') AS ORDER_BOS_JSON
					 , IF(OOD.ORDER_STATUS_DELI_TP = 'ORDER_STATUS_DELI_TP.RENTAL', FN_BOS_JSON(FN_CLAIM_STATUS_CD(OD.OD_ORDER_ID)) , '') AS CLAIM_BOS_JSON
    	  			 /* , CASE WHEN OODSUB.ORDER_STATUS_CD IS NOT NULL
    	  			        THEN FN_ORDER_DETAIL_STATUS_NM(OOD.ORDER_STATUS_CD)
    	  			        ELSE IFNULL(FN_ORDER_DETAIL_STATUS_NM(OOD.ORDER_STATUS_CD),FN_ORDER_PACK_STATUS_NM(OODP.OD_ORDER_DETL_ID))
    	  			   END AS ORDER_STATUS_NM */
            	  FROM OD_ORDER OD
            	 INNER JOIN OD_ORDER_DETL OOD ON OD.OD_ORDER_ID = OOD.OD_ORDER_ID
            	    <if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(shopStockStatus)">
            	    /* 매장 항목 START */
					INNER JOIN UR_STORE US ON OD.UR_STORE_ID = US.UR_STORE_ID
            	    /* 매장 항목 END */
					</if>
		  		 INNER JOIN OD_SHIPPING_ZONE OSZ	ON OSZ.OD_SHIPPING_ZONE_ID = OOD.OD_SHIPPING_ZONE_ID
				 INNER JOIN OD_SHIPPING_PRICE OSP 	ON OSP.OD_SHIPPING_PRICE_ID = OOD.OD_SHIPPING_PRICE_ID
                 LEFT OUTER JOIN OD_PAYMENT MOP 	ON MOP.OD_ORDER_ID 			= OD.OD_ORDER_ID AND OD_CLAIM_ID <![CDATA[>]]> 0
    	  		 /* LEFT OUTER JOIN OD_ORDER_DETL OODSUB ON OODSUB.OD_ORDER_DETL_ID = OOD.OD_ORDER_DETL_PARENT_ID AND OOD.OD_ORDER_DETL_DEPTH_ID = 3 */
				 /* LEFT OUTER JOIN OD_ORDER_DETL_PACK OODP ON OODP.OD_ORDER_DETL_ID = IF(OOD.OD_ORDER_DETL_DEPTH_ID = 3, OODSUB.OD_ORDER_DETL_PARENT_ID, OOD.OD_ORDER_DETL_PARENT_ID) */
          <where>
           <include refid="searchOrderItem" />
          </where>
            	 GROUP BY OD.OD_ORDER_ID
                        , OD.ODID
                        , OD.BUYER_NM
                        , OD.GUEST_CI
                        , OD.GOODS_NM
                        , OD.ORDER_PAYMENT_TYPE
                        , OD.AGENT_TYPE_CD
                        , OD.OUTMALL_ID
                        , OD.UR_USER_ID
                        , OD.SELLERS_GROUP_CD
                        , OD.OM_SELLERS_ID
                        , OD.COLLECTION_MALL_ID
               ) OD
         INNER JOIN OD_ORDER_DT OOD    	ON OOD.OD_ORDER_ID  = OD.OD_ORDER_ID
         INNER JOIN OD_PAYMENT OP      	ON OP.OD_ORDER_ID   = OD.OD_ORDER_ID    AND OP.OD_CLAIM_ID = 0
         LEFT OUTER JOIN OM_SELLERS OS  ON OS.OM_SELLERS_ID = OD.OM_SELLERS_ID
         LEFT OUTER JOIN UR_USER UU     ON UU.UR_USER_ID    = OD.UR_USER_ID
		 LEFT OUTER JOIN OD_ORDER_DETL OODSUB ON OODSUB.OD_ORDER_DETL_ID = OD.OD_ORDER_DETL_PARENT_ID AND OD.OD_ORDER_DETL_DEPTH_ID = 3
		 LEFT OUTER JOIN OD_ORDER_DETL_PACK OODP ON OODP.OD_ORDER_DETL_ID = IF(OD.OD_ORDER_DETL_DEPTH_ID = 3, OODSUB.OD_ORDER_DETL_PARENT_ID, OD.OD_ORDER_DETL_PARENT_ID)
    	<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(shopStockStatus)">
		ORDER BY OD.DELIVERY_DT, OD.STORE_SCHEDULE_NO
    	</if>
    	<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isEmpty(shopStockStatus)">
		ORDER BY OD.OD_ORDER_ID DESC
    	</if>
		<if test='@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEquals(excelYn, "Y")'>
			<include refid="_common.pageLimit" />
		</if>
	</select>

	<select id="getOrderExcelList" resultMap="getOrderExcelListResultMap">
		/*	order.getOrderExcelList  */
		SELECT
			OD.CREATE_DT										AS ORDER_CREATE_DT
		  , OD.ODID
		  , CASE WHEN GUEST_CI = '' THEN
						CASE WHEN (IFNULL(UU.LOGIN_ID, '') != '') THEN
							IFNULL(CONCAT(FN_DECRYPT(OD.BUYER_NM), ' / ', UU.LOGIN_ID), '')
						ELSE
							IFNULL(CONCAT(FN_DECRYPT(OD.BUYER_NM), ' / 비회원'), '')
						END
				ELSE
							IFNULL(CONCAT(FN_DECRYPT(OD.BUYER_NM), ' / 비회원'), '')
		         END AS BUYER_NM
		  , CASE WHEN (OD.SELLERS_GROUP_CD = 'SELLERS_GROUP.MALL') THEN
		  			IFNULL(FN_COMN_CODE_DIC(OD.SELLERS_GROUP_CD), '')
		  		ELSE
						CONCAT(IFNULL(OS.SELLERS_NM, ''), ' / ', OD.OUTMALL_ID)
		  		END	AS SELLERS_NM
		  , OD.GOODS_NM
		, IFNULL(OP.SALE_PRICE, 0)          							AS ORDER_PRICE
		, IFNULL(OP.SHIPPING_PRICE, 0)   								AS SHIPPING_PRICE
		, (IFNULL(OP.CART_COUPON_PRICE, 0) + IFNULL(OP.GOODS_COUPON_PRICE, 0) + IFNULL(OD.SHIPPING_DISCOUNT_PRICE , 0)) AS COUPON_PRICE
		, IFNULL(OP.PAYMENT_PRICE , 0)									AS PAID_PRICE
		, IFNULL(OP.POINT_PRICE, 0) 							        AS POINT_PRICE
		  /*
		  , IFNULL(OP.SALE_PRICE, 0) - IFNULL(MOP.SALE_PRICE, 0) 				AS ORDER_PRICE
		  , IFNULL(OP.SHIPPING_PRICE, 0) - IFNULL(MOP.SHIPPING_PRICE, 0)		AS SHIPPING_PRICE
		  , IFNULL((OP.CART_COUPON_PRICE + OP.GOODS_COUPON_PRICE),0) - IFNULL((MOP.CART_COUPON_PRICE + MOP.GOODS_COUPON_PRICE), 0)	AS COUPON_PRICE
		  , IFNULL(OP.PAYMENT_PRICE , 0) - IFNULL(MOP.PAYMENT_PRICE, 0)			AS PAID_PRICE
  		  , IFNULL(OP.POINT_PRICE, 0) - IFNULL(MOP.POINT_PRICE, 0) 				AS POINT_PRICE
  		  */
		  , IFNULL(FN_COMN_CODE_DIC(OD.ORDER_PAYMENT_TYPE), '')				AS ORDER_PAYMENT_TYPE
		  , IFNULL(FN_COMN_CODE_DIC(OD.AGENT_TYPE_CD), '')					AS AGENT_TYPE
		  ,  IFNULL(OD.ORDER_STATUS_NM, '')           	                    AS STATUS_NM
		  , IFNULL(FN_CLAIM_STATUS_NM(OD.OD_ORDER_ID), '')                            AS CLAIM_STATUS_NM
		  , CASE WHEN OD.COLLECTION_MALL_ID = '' THEN '' ELSE CONCAT(OD.COLLECTION_MALL_ID, ' / ', IFNULL(OS.SELLERS_NM, '')) END COLLECTION_MALL_ID
		  , FN_DECRYPT(OD.RECV_NM) AS RECV_NM
		  , FN_DECRYPT(OD.RECV_ADDR1) AS RECV_ADDR1
		  , FN_DECRYPT(OD.RECV_ADDR2) AS RECV_ADDR2
		  , FN_DECRYPT(OD.BUYER_HP) AS BUYER_HP
		  , FN_DECRYPT(OD.RECV_HP) AS RECV_HP
		FROM
			(
			SELECT
				OD.OD_ORDER_ID
			  , OD.ODID
			  , OD.BUYER_NM
			  , IFNULL(OD.GUEST_CI, '') AS GUEST_CI
			  , OD.GOODS_NM
			  , OD.ORDER_PAYMENT_TYPE
			  , OD.AGENT_TYPE_CD
			  , OD.UR_USER_ID
			  , OD.SELLERS_GROUP_CD
			  , OD.OM_SELLERS_ID
			  , IFNULL(OD.COLLECTION_MALL_ID, '') AS COLLECTION_MALL_ID
			  , IFNULL(OD.OUTMALL_ID, '') AS OUTMALL_ID
			  , DATE_FORMAT(OD.CREATE_DT, '%Y-%m-%d %H:%i:%s') AS CREATE_DT
		      , OSP.SHIPPING_DISCOUNT_PRICE
			  , OSZ.RECV_NM
			  , OSZ.RECV_ADDR1
			  , OSZ.RECV_ADDR2
			  , OD.BUYER_HP
			  , OSZ.RECV_HP
			  , CASE WHEN OODSUB.ORDER_STATUS_CD IS NOT NULL
    	  			 THEN FN_ORDER_DETAIL_STATUS_NM(OOD.ORDER_STATUS_CD)
    	  			 ELSE IFNULL(FN_ORDER_DETAIL_STATUS_NM(OOD.ORDER_STATUS_CD),FN_ORDER_PACK_STATUS_NM(OODP.OD_ORDER_DETL_ID))
    	  		END AS ORDER_STATUS_NM
			FROM
				OD_ORDER OD
                INNER JOIN OD_ORDER_DETL OOD 	ON OD.OD_ORDER_ID 	= OOD.OD_ORDER_ID
				INNER JOIN OD_SHIPPING_ZONE OSZ ON OSZ.OD_SHIPPING_ZONE_ID = OOD.OD_SHIPPING_ZONE_ID
				INNER JOIN OD_SHIPPING_PRICE OSP 	ON OSP.OD_SHIPPING_PRICE_ID = OOD.OD_SHIPPING_PRICE_ID
				LEFT OUTER JOIN OD_ORDER_DETL OODSUB ON OODSUB.OD_ORDER_DETL_ID = OOD.OD_ORDER_DETL_PARENT_ID AND OOD.OD_ORDER_DETL_DEPTH_ID = 3
		 		LEFT OUTER JOIN OD_ORDER_DETL_PACK OODP ON OODP.OD_ORDER_DETL_ID = IF(OOD.OD_ORDER_DETL_DEPTH_ID = 3, OODSUB.OD_ORDER_DETL_PARENT_ID, OOD.OD_ORDER_DETL_PARENT_ID)
        WHERE
				1 = 1
				<include refid="searchOrderItem" />
            GROUP BY OD.OD_ORDER_ID
		) OD
		INNER JOIN OD_ORDER_DT OOD ON OD.OD_ORDER_ID = OOD.OD_ORDER_ID

		INNER JOIN OD_PAYMENT OP ON OD.OD_ORDER_ID = OP.OD_ORDER_ID AND OP.OD_CLAIM_ID = 0
		LEFT OUTER JOIN (
							SELECT
								OD_ORDER_ID,
								SUM(SALE_PRICE) AS SALE_PRICE,
								SUM(DIRECT_PRICE) AS DIRECT_PRICE,
								SUM(SHIPPING_PRICE) AS SHIPPING_PRICE,
								SUM(GOODS_COUPON_PRICE) AS GOODS_COUPON_PRICE,
								SUM(CART_COUPON_PRICE) AS CART_COUPON_PRICE,
								SUM(PAYMENT_PRICE) AS PAYMENT_PRICE,
								SUM(PAID_PRICE) AS PAID_PRICE,
								SUM(POINT_PRICE) AS POINT_PRICE
							FROM
								OD_PAYMENT
							WHERE
								OD_CLAIM_ID != 0
							GROUP BY OD_ORDER_ID
						  ) MOP ON OD.OD_ORDER_ID = MOP.OD_ORDER_ID
		  LEFT OUTER JOIN OM_SELLERS OS ON OD.OM_SELLERS_ID = OS.OM_SELLERS_ID
		  LEFT OUTER JOIN UR_USER UU 	ON OD.UR_USER_ID 	= UU.UR_USER_ID
		  ORDER BY OD.OD_ORDER_ID DESC
	</select>

	<resultMap id="getOrderDetailListResultMap" type="kr.co.pulmuone.v1.order.order.dto.OrderDetailListDto">
		<result column="OD_ORDER_ID"			property="odOrderId"/>
		<result column="OD_ORDER_DETL_ID"		property="odOrderDetlId"/>
		<result column="ORDER_STATUS"			property="orderStatus"/>
		<result column="ORDER_IF_DT"			property="orderIfDt"/>
		<result column="SHIPPING_DT"			property="shippingDt"/>
		<result column="DELIVERY_DT"			property="deliveryDt"/>
		<result column="GOODS_TP"				property="goodsTp"/>
		<result column="WAREHOUSE_NM"			property="warehouseNm"/>
		<result column="IL_ITEM_CD"				property="ilItemCd"/>
		<result column="ITEM_BARCODE"			property="itemBarcode"/>
		<result column="IL_GOODS_ID"			property="ilGoodsId"/>
		<result column="GOODS_DISCOUNT_TP"		property="goodsDiscountTp"/>
		<result column="GOODS_NM"				property="goodsNm"/>
		<result column="STORAGE_TYPE"			property="storageType"/>
		<result column="ORDER_CNT"				property="orderCnt"/>
		<result column="CANCEL_CNT"				property="cancelCnt"/>
		<result column="OD_SHIPPING_ZONE_ID"	property="odShippingZoneId"/>
		<result column="TRACKING_NO"			property="trackingNo"/>
		<result column="SHIPPING_COMP_NM"		property="shippingCompNm"/>
		<result column="RECOMMENDED_PRICE"		property="recommendedPrice"/>
		<result column="STANDARD_PRICE"         property="standardPrice" />
		<result column="SALE_PRICE"				property="salePrice"/>
		<result column="ORDER_PRICE"            property="orderPrice" />
		<result column="PAID_PRICE"				property="paidPrice"/>
		<result column="IC_DT"					property="icDt"/>
		<result column="ODID"					property="odid"/>
		<result column="BUYER_NM"				property="buyerNm"/>
		<result column="LOGIN_ID"				property="loginId"/>
		<result column="UR_USER_ID"				property="urUserId"/>
		<result column="GUEST_CI"				property="guestCi"/>
		<result column="RECV_NM"				property="recvNm"/>
		<result column="DR_DT"					property="drDt"/>
		<result column="SELLER_ORDER_ID"		property="sellerOrderId"/>
		<result column="DI_DT"					property="diDt"/>
		<result column="CR_DT"					property="crDt"/>
		<result column="OD_CLAIM_DETL_ID"		property="odClaimDetlId"/>
		<result column="CE_DT"					property="ceDt"/>
		<result column="REFUND_STATUS_CD"		property="refundStatusCd"/>
		<result column="ORDER_CLAIM_STATUS"		property="orderClaimStatus"/>
		<result column="LAST_ORDER_CLAIM_STATUS"		property="lastOrderClaimStatus"/>
		<result column="CA_DT"					property="caDt"/>
		<result column="ORDER_PAYMENT_TYPE" 	property="orderPaymentType"/>
		<result column="AGENT_TYPE"				property="agentType"/>
		<result column="SELLERS_GROUP_CD_NM"	property="sellersGroupCdNm"/>
		<result column="COUPON_PRICE"			property="couponPrice"/>
		<result column="PAY_TP"					property="payTp"/>
		<result column="AGENT_TYPE"				property="agentType"/>
		<result column="COLLECTION_MALL_ID"		property="collectionMallId"/>
		<result column="OUTMALL_ID"				property="outMallId"/>
		<result column="CLAIM_REASON_CD_NM"		property="claimReasonCdNm"/>
		<result column="CLAIM_REASON_MSG"		property="claimReasonMsg"/>
		<result column="RETURNS_YN"				property="returnsYn"/>
		<result column="REFUND_PRICE"			property="refundPrice"/>
		<result column="CLAIM_ATTC_CNT"			property="claimAttcCnt"/>
		<result column="PS_SHIPPING_COMP_ID"	property="psShippingCompId" />
		<result column="GOODS_TP_CD"				property="goodsTpCd"/>
		<result column="EV_EXHIBIT_ID"				property="evExhibitId"/>
		<result column="PROMOTION_TP"				property="promotionTp"/>
		<result column="GOODS_CYCLE_TP"				property="goodsCycleTp"/>
		<result column="GOODS_CYCLE_TERM_TP"		property="goodsCycleTermTp"/>
		<result column="MON_CNT"					property="monCnt"/>
		<result column="TUE_CNT"					property="tueCnt"/>
		<result column="WED_CNT"					property="wedCnt"/>
		<result column="THU_CNT"					property="thuCnt"/>
		<result column="FRI_CNT"					property="friCnt"/>
		<result column="ALLERGY_YN"					property="allergyYn"/>
		<result column="SET_CNT"					property="setCnt"/>
		<result column="DAILY_BULK_YN"				property="dailyBulkYn"/>
		<result column="SCHEDULE_YN"				property="scheduleYn"/>
		<result column="GOODS_DAILY_TP"				property="goodsDailyTp"/>
		<result column="CLAIM_STATUS_CD"			property="claimStatusCd" />
		<result column="LAST_CLAIM_STATUS_CD"		property="lastClaimStatusCd" />
		<result column="CLAIM_GOODS_PRICE"			property="claimGoodsPrice" />
		<result column="CLAIM_GOODS_COUPON_PRICE"	property="claimGoodsCouponPrice" />
		<result column="CLAIM_CART_COUPON_PRICE"	property="claimCartCouponPrice" />
		<result column="CLAIM_SHIPPING_PRICE"		property="claimShippingPrice" />
		<result column="UR_WAREHOUSE_ID"			property="urWarehouseId" />
		<result column="UR_SUPPLIER_ID"				property="urSupplierId" />
		<result column="PS_CLAIM_BOS_ID"			property="psClaimBosId" />
		<result column="PS_CLAIM_BOS_SUPPLY_ID" 	property="psClaimBosSupplyId" />
		<result column="RECALL_TYPE" 			    property="recallType" />
		<result column="L_CLAIM_NAME"				property="lClaimName" />
		<result column="M_CLAIM_NAME"				property="mClaimName" />
		<result column="S_CLAIM_NAME"				property="sClaimName" />
		<result column="TARGET_TP"					property="targetTp" />
		<result column="COMP_NM"					property="compNm" />
		<result column="CLAIM_NAME"					property="claimName" />
		<result column="CS_REFUND_TP"				property="csRefundTp" />
		<result column="CS_REFUND_APPROVE_CD"		property="csRefundApproveCd" />
		<result column="CS_REFUND_APPROVE_NM"		property="csRefundApproveNm" />
		<result column="REFUND_TYPE"				property="refundType" />
		<result column="REFUND_BANK_NM"				property="refundBankNm" />
		<result column="REFUND_ACCOUNT_HOLDER"		property="refundAccountHolder" />
		<result column="REFUND_ACCOUNT_NUMBER"		property="refundAccountNumber" />
		<result column="CLAIM_CREATE_ID"			property="claimCreateId" />
		<result column="CLAIM_REFUND_YN"			property="claimRefundYn" />
		<result column="SHIPPING_INFO"				property="shippingInfo" />
		<result column="MISS_DT"					property="missDt" />
		<result column="MISS_REASON"				property="missReason" />
		<result column="MISS_MSG"					property="missMsg" />
		<result column="OD_CLAIM_ID"				property="odClaimId" />
		<result column="CLAIM_STATUS_TP"			property="claimStatusTp" />
		<result column="CLAIM_STATUS_TP_NM"			property="claimStatusTpNm" />
		<result column="IF_UNRELEASED_INFO_ID"      property="ifUnreleasedInfoId" />
		<result column="ITEM_TP"                    property="itemTp" />
		<result column="ERP_IF_YN"                  property="erpIfYn" />
		<result column="GOODS_DISCOUNT_TP_NM"       property="goodsDiscountTpNm" />
		<result column="BOS_JSON"       			property="bosJson" />
		<result column="MISS_CNT"					property="missCnt" />
		<result column="CLAIM_CNT"					property="claimCnt" />
		<result column="MISS_CLAIM_CNT"				property="missClaimCnt" />
		<result column="MISS_IF_UNRELEASED_INFO_ID"		property="missIfUnreleasedInfoId" />
		<result column="PROCESS_YN"					property="missProcessYn" />
		<result column="BOS_CLAIM_NM"				property="bosClaimNm" />
		<result column="SCH_DELIVERY_DT"			property="schDeliveryDt" />
		<result column="OD_ORDER_DETL_DAILY_SCH_SEQ"			property="odOrderDetlDailySchSeq" />
		<result column="SELECT_GREENJUICE"			property="selectGreenjuice" />
	</resultMap>

	<sql id="searchDetailSingleKeyword">
		<choose>
			<when test="@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(searchSingleType,'ORDER_ID') ">
				AND EXISTS ( SELECT 'X'
				FROM OD_ORDER
				WHERE OD_ORDER_ID = OOD.OD_ORDER_ID
				AND ODID IN
				<foreach item="data" index="index" collection="codeSearchList" open="(" separator="," close=")">
					#{data}
				</foreach>
				)
			</when>
			<when test="@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(searchSingleType,'OUTMALL_ID') ">
				AND EXISTS ( SELECT 'X'
				FROM OD_ORDER
				WHERE OD_ORDER_ID = OOD.OD_ORDER_ID
				AND OUTMALL_ID IN
				<foreach item="data" index="index" collection="codeSearchList" open="(" separator="," close=")">
					#{data}
				</foreach>
				)
			</when>
			<when test="@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(searchSingleType,'COLLECTION_MALL_ID') ">
				AND EXISTS ( SELECT 'X'
				FROM OD_ORDER
				WHERE OD_ORDER_ID = OOD.OD_ORDER_ID
				AND COLLECTION_MALL_ID IN
				<foreach item="data" index="index" collection="codeSearchList" open="(" separator="," close=")">
					#{data}
				</foreach>
				)
			</when>

		</choose>
	</sql>

	<sql id="searchDetailSellersDetail">
		AND EXISTS ( SELECT 'X'
		FROM OD_ORDER
		WHERE OD_ORDER_ID = OOD.OD_ORDER_ID
		AND OM_SELLERS_ID IN
		<foreach collection="omSellersIdList" item="sellersDetail" index="index" separator="," open="(" close=")">
			#{sellersDetail}
		</foreach>
		)
	</sql>

	<sql id="searchDetailDate">
		<choose>
			<when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(dateSearchType, "CREATE_DATE")'><!-- 주문일자 -->
				AND OD.CREATE_DT BETWEEN #{dateSearchStart} AND (#{dateSearchEnd} + INTERVAL 1 DAY - INTERVAL 1 SECOND)
			</when>
			<when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(dateSearchType, "PAY_DATE")'><!-- 결제일자 -->
				AND EXISTS (
					SELECT
						'X'
					FROM
						OD_ORDER S1
						INNER JOIN OD_ORDER_DT S2 ON S1.OD_ORDER_ID = S2.OD_ORDER_ID
					WHERE
							S1.OD_ORDER_ID = OOD.OD_ORDER_ID
						AND S2.IC_DT BETWEEN #{dateSearchStart} AND (#{dateSearchEnd} + INTERVAL 1 DAY - INTERVAL 1 SECOND)
				)
			</when>
			<when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(dateSearchType, "ORDER_IF_DATE")'><!-- 주문 I/F -->
				AND OOD.ORDER_IF_DT BETWEEN #{dateSearchStart} AND (#{dateSearchEnd} + INTERVAL 1 DAY - INTERVAL 1 SECOND)
			</when>
			<when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(dateSearchType, "SHIPPING_DATE")'><!-- 출고예정일 -->
				AND OOD.SHIPPING_DT BETWEEN #{dateSearchStart} AND (#{dateSearchEnd} + INTERVAL 1 DAY - INTERVAL 1 SECOND)
			</when>
			<when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(dateSearchType, "DELIVERY_DATE")'><!-- 도착예정일 -->
				AND OOD.DELIVERY_DT BETWEEN #{dateSearchStart} AND (#{dateSearchEnd} + INTERVAL 1 DAY - INTERVAL 1 SECOND)
			</when>
			<when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(dateSearchType, "DELIVERYREADY_DATE")'> <!-- 배송준비중 일자 -->
				AND OOD.DR_DT BETWEEN #{dateSearchStart} AND (#{dateSearchEnd} + INTERVAL 1 DAY - INTERVAL 1 SECOND)
			</when>
			<when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(dateSearchType, "DELIVERY_ING_DATE")'><!-- 배송중 -->
				AND OOD.DI_DT BETWEEN #{dateSearchStart} AND (#{dateSearchEnd} + INTERVAL 1 DAY - INTERVAL 1 SECOND)
			</when>
			<when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(dateSearchType, "BUY_FINALIZED_DATE")'><!-- 구매확정 -->
				AND OOD.BF_DT BETWEEN #{dateSearchStart} AND (#{dateSearchEnd} + INTERVAL 1 DAY - INTERVAL 1 SECOND)
			</when>
			<when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(dateSearchType, "UNRELEASED_DATE")'><!-- 미출일자 -->
				AND
				(
				 IUI.MISS_DT BETWEEN #{dateSearchStart} AND #{dateSearchEnd}
				 OR
				 (
				  (
				  IOCD.CA_DT BETWEEN DATE_FORMAT(#{dateSearchStart},'%Y-%m-%d 00:00:00') AND DATE_FORMAT(#{dateSearchEnd},'%Y-%m-%d 23:59:59')
				  OR
				  IOCD.EC_DT BETWEEN DATE_FORMAT(#{dateSearchStart},'%Y-%m-%d 00:00:00') AND DATE_FORMAT(#{dateSearchEnd},'%Y-%m-%d 23:59:59')
				  )
				 )
				)
			</when>
			<when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(dateSearchType, "CANCELREQ_DATE")'> <!-- 취소요청 일자 -->
				AND OCD.CA_DT BETWEEN #{dateSearchStart} AND (#{dateSearchEnd} + INTERVAL 1 DAY - INTERVAL 1 SECOND)
			</when>
			<when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(dateSearchType, "CANCEL_COMPLETE_DATE")'> <!-- 취소완료 일자 -->
				AND OCD.CC_DT BETWEEN #{dateSearchStart} AND (#{dateSearchEnd} + INTERVAL 1 DAY - INTERVAL 1 SECOND)
			</when>
			<when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(dateSearchType, "RETURN_COMPLETE_DATE")'> <!-- 반품완료 일자 -->
				AND OCD.RC_DT BETWEEN #{dateSearchStart} AND (#{dateSearchEnd} + INTERVAL 1 DAY - INTERVAL 1 SECOND)
			</when>
			<when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(dateSearchType, "CLAIM_REQUEST_DATE")'> <!-- 클레임요청 일자 -->
				AND OCD.CR_DT BETWEEN #{dateSearchStart} AND (#{dateSearchEnd} + INTERVAL 1 DAY - INTERVAL 1 SECOND)
			</when>
			<when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(dateSearchType, "CLAIM_APPROVED_DATE")'> <!-- 클레임승인 일자 -->
				AND (OCD.CE_DT BETWEEN #{dateSearchStart} AND (#{dateSearchEnd} + INTERVAL 1 DAY - INTERVAL 1 SECOND)
                OR  OCD.RC_DT BETWEEN #{dateSearchStart} AND (#{dateSearchEnd} + INTERVAL 1 DAY - INTERVAL 1 SECOND)
                OR  OCD.CC_DT BETWEEN #{dateSearchStart} AND (#{dateSearchEnd} + INTERVAL 1 DAY - INTERVAL 1 SECOND))
			</when>
			<when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(dateSearchType, "SETTLE_DATE")'> <!-- 정산일자 일자 -->
				AND
				EXISTS (
				SELECT
				'X'
				FROM
				IF_SALES_SETTLE_INFO S1
				WHERE
				OOD.ODID = S1.ODID
				AND OOD.OD_ORDER_DETL_SEQ = S1.OD_ORDER_DETL_SEQ
				AND S1.SETTLE_DT BETWEEN #{dateSearchStart} AND (#{dateSearchEnd} + INTERVAL 1 DAY - INTERVAL 1 SECOND)
				)
			</when>
		</choose>
	</sql>

	<sql id="searchDetailNutilDate">
		<choose>
			<when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(dateMutilSearchType, "CREATE_DATE")'><!-- 주문일자 -->
				AND OD.CREATE_DT BETWEEN #{dateMutilSearchStart} AND (#{dateMutilSearchEnd} + INTERVAL 1 DAY - INTERVAL 1 SECOND)
			</when>
			<when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(dateMutilSearchType, "PAY_DATE")'><!-- 결제일자 -->
				AND EXISTS (
					SELECT
						'X'
					FROM
						OD_ORDER S1
						INNER JOIN OD_ORDER_DT S2 ON S1.OD_ORDER_ID = S2.OD_ORDER_ID
					WHERE
							S1.OD_ORDER_ID = OOD.OD_ORDER_ID
						AND S2.IC_DT BETWEEN #{dateMutilSearchStart} AND (#{dateMutilSearchEnd} + INTERVAL 1 DAY - INTERVAL 1 SECOND)
				)
			</when>
			<when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(dateMutilSearchType, "ORDER_IF_DATE")'><!-- 주문 I/F -->
				AND OOD.ORDER_IF_DT BETWEEN #{dateMutilSearchStart} AND (#{dateMutilSearchEnd} + INTERVAL 1 DAY - INTERVAL 1 SECOND)
			</when>
			<when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(dateMutilSearchType, "SHIPPING_DATE")'><!-- 출고예정일 -->
				AND OOD.SHIPPING_DT BETWEEN #{dateMutilSearchStart} AND (#{dateMutilSearchEnd} + INTERVAL 1 DAY - INTERVAL 1 SECOND)
			</when>
			<when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(dateMutilSearchType, "DELIVERY_DATE")'><!-- 도착예정일 -->
				AND OOD.DELIVERY_DT BETWEEN #{dateMutilSearchStart} AND (#{dateMutilSearchEnd} + INTERVAL 1 DAY - INTERVAL 1 SECOND)
			</when>
			<when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(dateMutilSearchType, "DELIVERYREADY_DATE")'> <!-- 배송준비중 일자 -->
				AND OOD.DR_DT BETWEEN #{dateMutilSearchStart} AND (#{dateMutilSearchEnd} + INTERVAL 1 DAY - INTERVAL 1 SECOND)
			</when>
			<when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(dateMutilSearchType, "DELIVERY_ING_DATE")'><!-- 배송중 -->
				AND OOD.DI_DT BETWEEN #{dateMutilSearchStart} AND (#{dateMutilSearchEnd} + INTERVAL 1 DAY - INTERVAL 1 SECOND)
			</when>
			<when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(dateMutilSearchType, "BUY_FINALIZED_DATE")'><!-- 구매확정 -->
				AND OOD.BF_DT BETWEEN #{dateMutilSearchStart} AND (#{dateMutilSearchEnd} + INTERVAL 1 DAY - INTERVAL 1 SECOND)
			</when>
			<when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(dateMutilSearchType, "UNRELEASED_DATE")'><!-- 미출일자 -->
				AND
				(
				IUI.MISS_DT BETWEEN #{dateMutilSearchStart} AND #{dateMutilSearchEnd}
				OR
				(
				(
				IOCD.CA_DT BETWEEN DATE_FORMAT(#{dateMutilSearchStart},'%Y-%m-%d 00:00:00') AND DATE_FORMAT(#{dateMutilSearchEnd},'%Y-%m-%d 23:59:59')
				OR
				IOCD.EC_DT BETWEEN DATE_FORMAT(#{dateMutilSearchStart},'%Y-%m-%d 00:00:00') AND DATE_FORMAT(#{dateMutilSearchEnd},'%Y-%m-%d 23:59:59')
				)
				)
				)
			</when>
			<when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(dateMutilSearchType, "CANCELREQ_DATE")'> <!-- 취소요청 일자 -->
				AND OCD.CA_DT BETWEEN #{dateMutilSearchStart} AND (#{dateMutilSearchEnd} + INTERVAL 1 DAY - INTERVAL 1 SECOND)
			</when>
			<when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(dateMutilSearchType, "CANCEL_COMPLETE_DATE")'> <!-- 취소완료 일자 -->
				AND OCD.CC_DT BETWEEN #{dateMutilSearchStart} AND (#{dateMutilSearchEnd} + INTERVAL 1 DAY - INTERVAL 1 SECOND)
			</when>
			<when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(dateMutilSearchType, "RETURN_COMPLETE_DATE")'> <!-- 반품완료 일자 -->
				AND OCD.RC_DT BETWEEN #{dateMutilSearchStart} AND (#{dateMutilSearchEnd} + INTERVAL 1 DAY - INTERVAL 1 SECOND)
			</when>
			<when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(dateMutilSearchType, "CLAIM_REQUEST_DATE")'> <!-- 클레임요청 일자 -->
				AND OCD.CR_DT BETWEEN #{dateMutilSearchStart} AND (#{dateMutilSearchEnd} + INTERVAL 1 DAY - INTERVAL 1 SECOND)
			</when>
			<when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(dateMutilSearchType, "CLAIM_APPROVED_DATE")'> <!-- 클레임승인 일자 -->
				AND OCD.CE_DT BETWEEN #{dateMutilSearchStart} AND (#{dateMutilSearchEnd} + INTERVAL 1 DAY - INTERVAL 1 SECOND)
			</when>
			<when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(dateMutilSearchType, "SETTLE_DATE")'> <!-- 정산일자 일자 -->
				AND
				EXISTS (
					SELECT
						'X'
					FROM
						IF_SALES_SETTLE_INFO S1
					WHERE
							OOD.ODID = S1.ODID
						AND OOD.OD_ORDER_DETL_SEQ = S1.OD_ORDER_DETL_SEQ
						AND S1.SETTLE_DT BETWEEN #{dateMutilSearchStart} AND (#{dateMutilSearchEnd} + INTERVAL 1 DAY - INTERVAL 1 SECOND)
				)
			</when>
		</choose>
	</sql>

	<sql id="searchDetailPaymentMethodCode">
		AND EXISTS ( SELECT 'X'
		FROM OD_ORDER
		WHERE OD_ORDER_ID = OOD.OD_ORDER_ID
		AND ORDER_PAYMENT_TYPE IN
		<foreach collection="paymentMethodCodeList" item="paymentMethodCode" index="index" separator="," open="(" close=")">
			#{paymentMethodCode}
		</foreach>
		)
	</sql>

	<sql id="searchDetailBuyerTypeCode">
		AND EXISTS ( SELECT 'X'
		FROM OD_ORDER
		WHERE OD_ORDER_ID = OOD.OD_ORDER_ID
		AND BUYER_TYPE_CD IN
		<foreach collection="buyerTypeCodeList" item="buyerTypeCode" index="index" separator="," open="(" close=")">
			#{buyerTypeCode}
		</foreach>
		)
	</sql>

	<sql id="searchDetailAgentTypeCode">
		AND EXISTS ( SELECT 'X'
		FROM OD_ORDER
		WHERE OD_ORDER_ID = OOD.OD_ORDER_ID
		AND AGENT_TYPE_CD IN
		<foreach collection="agentTypeCodeList" item="agentTypeCode" index="index" separator="," open="(" close=")">
			#{agentTypeCode}
		</foreach>
		)
	</sql>

	<sql id="searchDetailSupplierId">
		AND OOD.UR_SUPPLIER_ID = #{supplierId}
	</sql>

	<sql id="searchDetailWarehouseGroup">
		AND OOD.UR_WAREHOUSE_GRP_CD = #{warehouseGroup}
	</sql>

	<sql id="searchDetailWarehouseId">
		AND OOD.UR_WAREHOUSE_ID = #{warehouseId}
	</sql>

	<sql id="searchMissStockReason">
		AND IUI.MISS_REASON = #{missStockReason}
	</sql>

	<sql id="searchreturnMallReason">
		AND OC.PS_CLAIM_MALL_ID = #{returnMallReason}
	</sql>

	<sql id="searchReturnsYn">
		AND OC.RETURNS_YN = #{recallYN}
	</sql>

	<sql id="searchDetailKeyword">
		<choose>
			<when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(searchMultiType, "BUYER_NAME")'> <!-- 주문자명 -->
				AND FN_DECRYPT(OD.BUYER_NM) = #{findKeyword}
			</when>
			<when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(searchMultiType, "BUYER_ID")'> <!-- 주문자ID -->
				AND EXISTS ( SELECT 'X'
				FROM UR_USER
				WHERE UR_USER_ID = OD.UR_USER_ID
				AND LOGIN_ID LIKE CONCAT(#{findKeyword}, '%') )
			</when>
			<when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(searchMultiType, "ORDER_ID")'> <!-- 주문번호  -->
				AND OD.ODID = #{findKeyword}
			</when>
			<when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(searchMultiType, "OUTMALL_ID")'> <!-- 외부몰 주문번호  -->
				AND OOD.OUTMALL_DETAIL_ID = #{findKeyword}
			</when>
			<when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(searchMultiType, "COLLECTION_MALL_ID")'> <!-- 수집몰 주문번호  -->
				AND OD.COLLECTION_MALL_ID = #{findKeyword}
			</when>
			<when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(searchMultiType, "GOODS_NAME")'> <!-- 상품명 -->
				AND
				(OOD.GOODS_NM LIKE CONCAT('%', #{findKeyword}, '%')
				OR EXISTS (SELECT 'X' FROM OD_ORDER_DETL_PACK WHERE GOODS_NM LIKE CONCAT('%', #{findKeyword}, '%') AND OD_ORDER_DETL_ID = OOD.OD_ORDER_DETL_PARENT_ID)
				)
			</when>
			<when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(searchMultiType, "GOODS_ID")'> <!-- 상품코드 -->
				AND
				(OOD.IL_GOODS_ID = #{findKeyword}
					OR EXISTS (SELECT 'X' FROM OD_ORDER_DETL_PACK WHERE IL_GOODS_ID = #{findKeyword} AND OD_ORDER_DETL_ID = OOD.OD_ORDER_DETL_PARENT_ID)
				)
			</when>
			<when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(searchMultiType, "ITEM_CODE")'> <!-- 품목코드 -->
				AND OOD.IL_ITEM_CD = #{findKeyword}
			</when>
			<when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(searchMultiType, "ITEM_BARCODE")'> <!-- 품목바코드 -->
				AND OOD.ITEM_BARCODE = #{findKeyword}
			</when>
			<when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(searchMultiType, "TRACKING_NO")'> <!-- 송장번호 -->
				AND EXISTS (
							SELECT
								'X'
							FROM
								OD_TRACKING_NUMBER S1
							WHERE
								OOD.OD_ORDER_DETL_ID = S1.OD_ORDER_DETL_ID
								AND S1.TRACKING_NO = #{findKeyword}
							)
			</when>
		</choose>
	</sql>

	<sql id="searchDetailKeywordForBuyer">
		<choose>
			<when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(searchMultiTypeForBuyer, "BUYER_ID")'> <!-- 주문자ID -->
				AND EXISTS ( SELECT 'X'
				FROM UR_USER
				WHERE UR_USER_ID = OD.UR_USER_ID
				AND LOGIN_ID LIKE CONCAT(#{findKeywordForBuyer}, '%') )
			</when>
			<when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(searchMultiTypeForBuyer, "BUYER_NAME")'> <!-- 주문자명 -->
				AND OD.BUYER_NM = FN_ENCRYPT(#{findKeywordForBuyer})
			</when>
			<when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(searchMultiTypeForBuyer, "BUYER_HP")'> <!-- 주문자연락처 -->
				AND OD.BUYER_HP = FN_ENCRYPT(#{findKeywordForBuyer})
			</when>
			<when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(searchMultiTypeForBuyer, "RECEIVER_NAME")'> <!-- 수취인명 -->
				AND EXISTS ( SELECT 'X'
				FROM OD_SHIPPING_ZONE
				WHERE OD_SHIPPING_ZONE_ID = OOD.OD_SHIPPING_ZONE_ID
				AND RECV_NM = FN_ENCRYPT(#{findKeywordForBuyer}))
			</when>
			<when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(searchMultiTypeForBuyer, "RECEIVER_HP")'> <!-- 수취인연락처 -->
				AND EXISTS ( SELECT 'X'
				FROM OD_SHIPPING_ZONE
				WHERE OD_SHIPPING_ZONE_ID = OOD.OD_SHIPPING_ZONE_ID
				AND RECV_HP = FN_ENCRYPT(#{findKeywordForBuyer}))
			</when>
		</choose>
	</sql>

	<sql id="searchKeywordForCustomer">
		<choose>
			<when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(searchMultiTypeForCustomer, "BUYER_ID")'> <!-- 주문자ID -->
				AND EXISTS ( SELECT 'X'
							  FROM UR_USER
							  WHERE UR_USER_ID = OD.UR_USER_ID
								AND LOGIN_ID LIKE CONCAT(#{findKeywordForCustomer}, '%') )
			</when>
			<when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(searchMultiTypeForCustomer, "BUYER_NAME")'> <!-- 주문자명 -->
				AND FN_DECRYPT(OD.BUYER_NM) LIKE CONCAT(#{findKeywordForCustomer}, '%')
			</when>
			<when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(searchMultiTypeForCustomer, "RECEIVER_NAME")'> <!-- 수취인명 -->
				AND FN_DECRYPT(OSZ.RECV_NM) LIKE CONCAT(#{findKeywordForCustomer}, '%')
			</when>
		</choose>
	</sql>

	<sql id="searchKeywordForContact">
		<choose>
			<when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(searchMultiTypeForContact, "BUYER_HP")'> <!-- 고객명 검색 -->
				AND REPLACE(FN_DECRYPT(OD.BUYER_HP),'-','') LIKE CONCAT('%', #{findKeywordForContact}, '%')
			</when>
			<when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(searchMultiTypeForContact, "RECEIVER_HP")'> <!-- 연락처 검색 -->
				AND REPLACE(FN_DECRYPT(OSZ.RECV_HP),'-','') LIKE CONCAT('%', #{findKeywordForContact}, '%')
			</when>
		</choose>
	</sql>

	<sql id="searchKeywordForAddr">
		AND (
		  FN_DECRYPT(OSZ.RECV_ADDR1) LIKE CONCAT('%',#{findKeywordForAddr},'%')
		  OR FN_DECRYPT(OSZ.RECV_ADDR2) LIKE CONCAT('%',#{findKeywordForAddr},'%')
		)
	</sql>

	<sql id="searchDetailKeywordForOrder">
		<choose>
			<when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(searchMultiTypeForOrder, "ORDER_ID")'> <!-- 주문번호  -->
				AND OD.ODID = #{findKeywordForOrder}
			</when>
			<when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(searchMultiTypeForOrder, "TRACKING_NO")'> <!-- 송장번호 -->
				AND EXISTS (
							SELECT
								'X'
							FROM
								OD_TRACKING_NUMBER S1
							WHERE
								OOD.OD_ORDER_DETL_ID = S1.OD_ORDER_DETL_ID
								AND S1.TRACKING_NO = #{findKeywordForOrder}
							)
			</when>
			<when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(searchMultiTypeForOrder, "OUTMALL_ID")'> <!-- 외부몰 주문번호  -->
				AND OOD.OUTMALL_DETAIL_ID = #{findKeywordForOrder}
			</when>
			<when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(searchMultiTypeForOrder, "COLLECTION_MALL_ID")'> <!-- 수집몰 주문번호  -->
				AND OD.COLLECTION_MALL_ID = #{findKeywordForOrder}
			</when>
		</choose>
	</sql>

	<sql id="searchDetailKeywordForGoods">
		<choose>
			<when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(searchMultiTypeForGoods, "GOODS_NAME")'> <!-- 상품명 -->
				AND
				(OOD.GOODS_NM LIKE CONCAT('%', #{findKeywordForGoods}, '%')
				OR EXISTS (SELECT 'X' FROM OD_ORDER_DETL_PACK WHERE GOODS_NM LIKE CONCAT('%', #{findKeywordForGoods}, '%') AND OD_ORDER_DETL_ID = OOD.OD_ORDER_DETL_PARENT_ID)
				)
			</when>
			<when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(searchMultiTypeForGoods, "GOODS_ID")'> <!-- 상품코드 -->
				AND
				(OOD.IL_GOODS_ID = #{findKeywordForGoods}
					OR EXISTS (SELECT 'X' FROM OD_ORDER_DETL_PACK WHERE IL_GOODS_ID = #{findKeywordForGoods} AND OD_ORDER_DETL_ID = OOD.OD_ORDER_DETL_PARENT_ID)
				)
			</when>
			<when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(searchMultiTypeForGoods, "ITEM_CODE")'> <!-- 품목코드 -->
				AND OOD.IL_ITEM_CD = #{findKeywordForGoods}
			</when>
			<when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(searchMultiTypeForGoods, "ITEM_BARCODE")'> <!-- 품목바코드 -->
				AND OOD.ITEM_BARCODE = #{findKeywordForGoods}
			</when>
		</choose>
	</sql>

	<sql id="searchOrderDetailItem">

		AND OD.ORDER_YN = 'Y'

		<if test='trackingNoYn eq "Y"'>
			AND NOT EXISTS (
				SELECT
					'X'
				FROM
					OD_TRACKING_NUMBER S1
				WHERE
						S1.OD_ORDER_DETL_ID = OOD.OD_ORDER_DETL_ID
					AND IFNULL(S1.TRACKING_NO, '') != ''
			)
		</if>

		<if test='settleInfoYn eq "Y"'>
			AND NOT EXISTS (
				SELECT
					'X'
				FROM
					IF_SALES_SETTLE_INFO S1
				WHERE
						S1.ODID = OOD.ODID
					AND S1.OD_ORDER_DETL_SEQ = OOD.OD_ORDER_DETL_SEQ
			)
		</if>

        <if test='orderCntYn eq "Y"'>
            AND (OOD.ORDER_CNT - OOD.CANCEL_CNT) > 0
        </if>

		<if test='selectGreenjuice eq "Y"'>
			AND	(CASE WHEN OOD.PROMOTION_TP = 'CART_PROMOTION_TP.GREENJUICE_SELECT'	THEN 'Y' ELSE 'N' END)	=	'Y'
		</if>

		<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(listAuthWarehouseId) and listAuthWarehouseId.size != 0">
			AND OOD.UR_WAREHOUSE_ID IN (
				<foreach collection="listAuthWarehouseId" item="warehouseId" separator=",">
					#{warehouseId}
				</foreach>
			)
		</if>
		<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(listAuthSupplierId) and listAuthSupplierId.size != 0">
			AND OOD.UR_SUPPLIER_ID IN (
				<foreach collection="listAuthSupplierId" item="authSupplierId" separator=",">
					#{authSupplierId}
				</foreach>
			)
		</if>
		<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(listAuthStoreId) and listAuthStoreId.size != 0">
			AND OD.UR_STORE_ID IN (
				<foreach collection="listAuthStoreId" item="authStoreId" separator=",">
					#{authStoreId}
				</foreach>
			)
		</if>
		<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(listAuthSellersId) and listAuthSellersId.size != 0">
			AND OD.OM_SELLERS_ID IN (
				<foreach collection="listAuthSellersId" item="authSellersId" separator=",">
					#{authSellersId}
				</foreach>
			)
		</if>

		<if test='notOrderStateYn eq "Y"'>
			AND OOD.ORDER_STATUS_CD IN
			<if test="orderStateList.size() > 0">
				<foreach collection="orderStateList" item="orderStateCode" index="index" separator="," open="(" close=")">
					#{orderStateCode}
				</foreach>
			</if>
		</if>
		<if test='notOrderStateYn eq "N"'>
			AND EXISTS (SELECT 'X' FROM OD_CLAIM_DETL S1 WHERE S1.OD_ORDER_DETL_ID = OOD.OD_ORDER_DETL_ID)
		</if>


		<if test='notClaimStateYn eq "Y"'>
			AND OCD.CLAIM_STATUS_CD IN
			<foreach collection="claimStateList" item="claimStateCode" index="index" separator="," open="(" close=")">
				#{claimStateCode}
			</foreach>
		</if>
		<if test='notClaimStateYn eq "N"'>
			AND NOT EXISTS (SELECT 'X' FROM OD_CLAIM_DETL S1 WHERE S1.OD_ORDER_DETL_ID = OOD.OD_ORDER_DETL_ID)
		</if>




		<if test="csRefundApproveCdList.size() > 0">
			AND OC.CS_REFUND_APPROVE_CD IN
			<foreach collection="csRefundApproveCdList" item="csRefundApproveCd" index="index" separator="," open="(" close=")">
				#{csRefundApproveCd}
			</foreach>
		</if>
		<if test="csRefundTpList.size() > 0">
			AND OC.CS_REFUND_TP IN
			<foreach collection="csRefundTpList" item="csRefundTp" index="index" separator="," open="(" close=")">
				#{csRefundTp}
			</foreach>
		</if>
		<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(claimYn)">
			AND OC.CLAIM_YN = #{claimYn}
		</if>
		<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(selectConditionType,'singleSection') ">
			<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(codeSearchList)">
				<include refid="searchDetailSingleKeyword" />
			</if>
		</if>
		<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(selectConditionType,'multiSection') ">
			<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(sellersGroup)"> <!-- 판매처 -->
				AND OD.SELLERS_GROUP_CD = #{sellersGroup}
			</if>

			<if test="omSellersIdList.size() > 0">
				<include refid="searchDetailSellersDetail" />
			</if>

			<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(dateSearchStart)"> <!-- 기간검색 -->
				<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(dateSearchEnd)">
					<include refid="searchDetailDate" />
				</if>
			</if>


			<if test='checkBoxMutilDateYn eq "Y"'>
				<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(dateMutilSearchStart)"> <!-- 기간검색 -->
					<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(dateMutilSearchEnd)">
						<include refid="searchDetailNutilDate" />
					</if>
				</if>
			</if>






			<if test="paymentMethodCodeList.size() > 0"> <!-- 결제수단 -->
				<include refid="searchDetailPaymentMethodCode" />
			</if>
			<if test="buyerTypeCodeList.size() > 0"> <!-- 주문자 유형 -->
				<include refid="searchDetailBuyerTypeCode" />
			</if>
			<if test="agentTypeCodeList.size() > 0"> <!-- 유형 -->
				<include refid="searchDetailAgentTypeCode" />
			</if>

			<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(supplierId)"> <!-- 공급업체 -->
				<include refid="searchDetailSupplierId" />
			</if>

			<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(warehouseGroup)"> <!-- 출고처 그룹 -->
				<include refid="searchDetailWarehouseGroup" />
			</if>

			<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(warehouseId)"> <!-- 출고처 -->
				<include refid="searchDetailWarehouseId" />
			</if>

			<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(findKeyword)"> <!-- 검색어 -->
				<include refid="searchDetailKeyword" />
			</if>

			<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(findKeywordForBuyer)"> <!-- 검색어 > 고객검색 -->
				<include refid="searchDetailKeywordForBuyer" />
			</if>

			<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(findKeywordForCustomer)"> <!-- 검색어 > 고객명검색 -->
				<include refid="searchKeywordForCustomer" />
			</if>

			<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(findKeywordForContact)"> <!-- 검색어 > 연락처검색 -->
				<include refid="searchKeywordForContact" />
			</if>

			<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(findKeywordForAddr)"> <!-- 검색어 > 주소검색 -->
				<include refid="searchKeywordForAddr" />
			</if>

			<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(findKeywordForOrder)"> <!-- 검색어 > 주문검색 -->
				<include refid="searchDetailKeywordForOrder" />
			</if>

			<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(findKeywordForGoods)"> <!-- 검색어 > 상품검색 -->
				<include refid="searchDetailKeywordForGoods" />
			</if>

			<!-- 배송방법 -->
			<if test="delivTypeList.size() > 0">
				AND OOD.GOODS_DELIVERY_TYPE IN
				<foreach collection="delivTypeList" item="delivTypeCode" index="index" separator="," open="(" close=")">
					#{delivTypeCode}
				</foreach>
			</if>

			<if test="orderTypeCodeList.size() > 0"> <!-- 주문유형 -->
				AND OOD.SALE_TP_CD IN
				<foreach collection="orderTypeCodeList" item="orderTypeCode" index="index" separator="," open="(" close=")">
					#{orderTypeCode}
				</foreach>
			</if>
			<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(missStockStatus)"> <!-- 미출상태 -->
                <!-- 미출상태가 미출 -->
                <if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(missStockStatus,'MISS_STOCK_STATUS.UNRELEASED')">
                    AND IFNULL(IOCD.MISS_CLAIM_CNT, 0) = 0
                </if>
                <!-- 미출상태가 선미출 -->
                <if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(missStockStatus,'MISS_STOCK_STATUS.PRE_UNRELEASED')">
					AND IFNULL(IOCD.MISS_CLAIM_CNT, 0) > 0
                </if>
				<!-- 미출상태가 재배송 -->
				<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(missStockStatus,'MISS_STOCK_STATUS.RETURN_DELIVERY')">
					AND IFNULL(OC.CLAIM_STATUS_TP, IOCD.CLAIM_STATUS_TP) = 'CLAIM_STATUS_TP.RETURN_DELIVERY'
				</if>
				<!-- 미출상태가 취소 -->
				<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(missStockStatus,'MISS_STOCK_STATUS.CANCEL')">
					AND IFNULL(OC.CLAIM_STATUS_TP, IOCD.CLAIM_STATUS_TP) IN ('CLAIM_STATUS_TP.CANCEL', 'CLAIM_STATUS_TP.RETURN')
				</if>
			</if>

			<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(missStockReason)"> <!-- 미출사유 -->
				<include refid="searchMissStockReason" />
			</if>

			<!-- 미출 미처리 내역만 조회 -->
			<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(unprocessMissYn,'Y')">
				AND (CASE
						WHEN NULLIF(OCD.IF_UNRELEASED_INFO_ID, '') IS NOT NULL THEN 'NONE'
						WHEN OOD.ORDER_CNT-OOD.CANCEL_CNT = 0 THEN 'NONE'
						WHEN IFNULL(IOCD.MISS_CLAIM_CNT, 0) > 0 AND IFNULL(IOCD.MISS_CLAIM_CNT, 0) = IFNULL(IUI.MISS_CNT, 0) THEN 'NONE'
						WHEN IFNULL(IUI.MISS_CNT, 0) = 0 THEN 'NONE'
						ELSE 'PROCESS'
					END) = 'PROCESS'
			</if>

			<!-- 미출 반품 미출-->
			<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(returnMissYn,'Y')">
				AND IFNULL(OC.CLAIM_STATUS_TP, IOCD.CLAIM_STATUS_TP) = 'CLAIM_STATUS_TP.RETURN'
			</if>

			<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(returnMallReason)"> <!-- MALL 클레임 사유 PK -->
				<include refid="searchreturnMallReason" />
			</if>

			<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(recallYN)"> <!-- 반품회수여부 -->
				<include refid="searchReturnsYn" />
				<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(recallYN,'Y')">
					<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(recallType)">
						AND OCD.RECALL_TYPE = #{recallType}
					</if>
				</if>
			</if>
		</if>
		<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(urUserId)">
			AND EXISTS ( SELECT 'X'
				FROM UR_USER
				WHERE UR_USER_ID = OD.UR_USER_ID
				AND UR_USER_ID LIKE CONCAT(#{urUserId}, '%') )
		</if>
	</sql>

	<select id="getOrderTotalCountInfo"  resultType="kr.co.pulmuone.v1.order.order.dto.OrderDetailTotalCountDto" parameterType="kr.co.pulmuone.v1.order.order.dto.OrderListRequestDto">
		/*	order.getOrderTotalCountInfo  */
		SELECT
			COUNT(1) AS TOTAL_CNT,
			SUM(LINE_CNT) AS LINE_CNT,
			SUM(ORDER_CNT) AS ORDER_GOODS_CNT,
			SUM(CANCEL_CNT) AS CANCEL_GOODS_CNT
		FROM
		(
			SELECT
				TT.OD_ORDER_ID,
				COUNT(TT.OD_ORDER_ID) AS LINE_CNT,
				SUM(TT.ORDER_CNT) AS ORDER_CNT,
				SUM(TT.CANCEL_CNT) AS CANCEL_CNT,
				TT.UR_WAREHOUSE_ID,
				TT.OD_SHIPPING_ZONE_ID
			FROM
			(
				SELECT
					OD.OD_ORDER_ID,
					(OD.OD_ORDER_ID) AS LINE_CNT,
					(OOD.ORDER_CNT) AS ORDER_CNT,
					(OOD.CANCEL_CNT) AS CANCEL_CNT,
					OOD.UR_WAREHOUSE_ID,
					OOD.OD_SHIPPING_ZONE_ID
				FROM
					OD_ORDER OD
				INNER JOIN
					OD_ORDER_DETL OOD ON OOD.OD_ORDER_ID = OD.OD_ORDER_ID
				INNER JOIN
					OD_SHIPPING_ZONE OSZ ON OSZ.OD_SHIPPING_ZONE_ID = OOD.OD_SHIPPING_ZONE_ID
					<choose>
						<when test="@kr.co.pulmuone.v1.comm.util.StringUtil@isEmpty(orderState) and @kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(claimState)">
							/* 클레임 테이블 START */
							INNER JOIN OD_CLAIM OC ON OOD.OD_ORDER_ID = OC.OD_ORDER_ID
							INNER JOIN OD_CLAIM_DETL OCD ON OC.OD_CLAIM_ID = OCD.OD_CLAIM_ID AND OCD.OD_ORDER_DETL_ID = OOD.OD_ORDER_DETL_ID
							/* 클레임 테이블 END */
						</when>
						<when test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(claimState)">
							/* 클레임 테이블 START */
							LEFT OUTER JOIN OD_CLAIM_DETL OCD ON OCD.OD_ORDER_DETL_ID = OOD.OD_ORDER_DETL_ID
							LEFT OUTER JOIN OD_CLAIM OC ON OC.OD_CLAIM_ID = OCD.OD_CLAIM_ID AND OOD.OD_ORDER_ID = OC.OD_ORDER_ID
							/* 클레임 테이블 END */
						</when>
					</choose>
				WHERE
					1 = 1
					<include refid="searchOrderDetailItem" />
				GROUP BY OOD.OD_ORDER_DETL_ID
			) TT GROUP BY TT.OD_ORDER_ID
		) OOD
		INNER JOIN OD_ORDER_DT OODT ON OOD.OD_ORDER_ID = OODT.OD_ORDER_ID
		INNER JOIN OD_SHIPPING_ZONE OSZ ON OOD.OD_SHIPPING_ZONE_ID = OSZ.OD_SHIPPING_ZONE_ID
		INNER JOIN UR_WAREHOUSE UW ON OOD.UR_WAREHOUSE_ID = UW.UR_WAREHOUSE_ID
		INNER JOIN (
					SELECT
						OP.OD_ORDER_ID
					FROM
						OD_PAYMENT OP
					INNER JOIN
						OD_PAYMENT_MASTER OPM ON OP.OD_PAYMENT_MASTER_ID = OPM.OD_PAYMENT_MASTER_ID
					GROUP BY OP.OD_ORDER_ID
					) OP ON OOD.OD_ORDER_ID = OP.OD_ORDER_ID
	</select>

	<select id="getOrderDetailListCount" resultType="long" parameterType="kr.co.pulmuone.v1.order.order.dto.OrderListRequestDto">
		/*	order.getOrderDetailListCount  */
		SELECT
			COUNT(1) AS CNT
		FROM
		(
		SELECT	OD.OD_ORDER_ID
			, 	CASE WHEN OOD.PROMOTION_TP = 'CART_PROMOTION_TP.GREENJUICE_SELECT'	THEN 'Y' ELSE 'N' END  GREENJUICE_SELECT
		FROM
		OD_ORDER OD
		INNER JOIN
		OD_ORDER_DETL OOD ON OOD.OD_ORDER_ID = OD.OD_ORDER_ID
		INNER JOIN
		OD_SHIPPING_ZONE OSZ ON OSZ.OD_SHIPPING_ZONE_ID = OOD.OD_SHIPPING_ZONE_ID
		<choose>
			<when test="@kr.co.pulmuone.v1.comm.util.StringUtil@isEmpty(orderState) and @kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(claimState)">
				/* 클레임 테이블 START */
				INNER JOIN OD_CLAIM OC ON OOD.OD_ORDER_ID = OC.OD_ORDER_ID
				INNER JOIN OD_CLAIM_DETL OCD ON OC.OD_CLAIM_ID = OCD.OD_CLAIM_ID AND OCD.OD_ORDER_DETL_ID = OOD.OD_ORDER_DETL_ID
				LEFT OUTER JOIN PS_CLAIM_BOS PCB
				ON OCD.PS_CLAIM_BOS_ID = PCB.PS_CLAIM_BOS_ID
				AND PCB.DEL_YN = 'N'
				AND PCB.USE_YN = 'Y'
				LEFT OUTER JOIN PS_CLAIM_BOS_SUPPLY PCBS
				ON OCD.PS_CLAIM_BOS_ID 	   = PCBS.PS_CLAIM_BOS_ID
				AND OCD.PS_CLAIM_BOS_SUPPLY_ID = PCBS.PS_CLAIM_BOS_SUPPLY_ID
				LEFT OUTER JOIN PS_CLAIM_CTGRY PCC1
				ON PCB.L_CLAIM_CTGRY_ID = PCC1.PS_CLAIM_CTGRY_ID
				LEFT OUTER JOIN PS_CLAIM_CTGRY PCC2
				ON PCB.M_CLAIM_CTGRY_ID = PCC2.PS_CLAIM_CTGRY_ID
				LEFT OUTER JOIN PS_CLAIM_CTGRY PCC3
				ON PCB.S_CLAIM_CTGRY_ID = PCC3.PS_CLAIM_CTGRY_ID
				LEFT OUTER JOIN PS_CLAIM_SUPPLY_CTGRY PCSC1
				ON PCSC1.SUPPLIER_CD 	 = PCBS.SUPPLIER_CD
				AND PCSC1.CLAIM_CD 	  	 = PCBS.CLAIM_CD
				LEFT OUTER JOIN PS_CLAIM_SUPPLY_CTGRY PCSC2
				ON PCSC2.SUPPLIER_CD 	 = PCBS.NON_SUPPLIER_CD
				AND PCSC2.CLAIM_CD 	  	 = PCBS.NON_CLAIM_CD
				LEFT OUTER JOIN OD_CLAIM_ACCOUNT OCA
				ON OC.OD_CLAIM_ID		 = OCA.OD_CLAIM_ID
				LEFT OUTER JOIN OD_RETURN_TRACKING_NUMBER otn ON OCD.OD_CLAIM_DETL_ID = otn.OD_CLAIM_DETL_ID
				LEFT OUTER JOIN PS_SHIPPING_COMP psc ON otn.PS_SHIPPING_COMP_ID = psc.PS_SHIPPING_COMP_ID
				LEFT OUTER JOIN PS_CONFIG PC1 ON otn.PS_SHIPPING_COMP_ID = PC1.PS_KEY AND PS_GRP_TP = 'DELIVERY_TRACKING_SEARCH'
				/* 클레임 테이블 END */
			</when>
			<when test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(claimState)">
				/* 클레임 테이블 START */
				LEFT OUTER JOIN OD_CLAIM_DETL OCD ON OCD.OD_ORDER_DETL_ID = OOD.OD_ORDER_DETL_ID
                LEFT OUTER JOIN OD_CLAIM OC ON OCD.OD_CLAIM_ID = OC.OD_CLAIM_ID AND OOD.OD_ORDER_ID = OC.OD_ORDER_ID
				/* 클레임 테이블 END */
			</when>
			<when test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(missStockStatus)">
				/* 미출정보 테이블 START */
				LEFT OUTER JOIN IF_UNRELEASED_INFO IUI ON OD.ODID = IUI.ODID AND OOD.OD_ORDER_DETL_SEQ = IUI.OD_ORDER_DETL_SEQ
				LEFT OUTER JOIN OD_CLAIM_DETL OCD ON OCD.OD_ORDER_DETL_ID = OOD.OD_ORDER_DETL_ID AND IUI.IF_UNRELEASED_INFO_ID = OCD.IF_UNRELEASED_INFO_ID
				LEFT OUTER JOIN OD_CLAIM OC ON OCD.OD_CLAIM_ID = OC.OD_CLAIM_ID AND OOD.OD_ORDER_ID = OC.OD_ORDER_ID AND OC.CLAIM_YN = 'Y'
				LEFT OUTER JOIN (
				SELECT
				OC.OD_ORDER_ID
				, OCD.OD_ORDER_DETL_ID
				, SUM(OCD.CLAIM_CNT) AS MISS_CLAIM_CNT
				, MIN(OCD.CA_DT) AS CA_DT
				, MIN(OCD.EC_DT) AS EC_DT
				, MIN(OCD.OD_CLAIM_ID) AS OD_CLAIM_ID
				, MIN(OCD.OD_CLAIM_DETL_ID) AS OD_CLAIM_DETL_ID
				, MIN(OC.CLAIM_STATUS_TP) AS CLAIM_STATUS_TP
				, MIN(OCD.CLAIM_STATUS_CD) AS CLAIM_STATUS_CD
				, MIN(OCD.BOS_CLAIM_LARGE_ID) AS BOS_CLAIM_LARGE_ID
				, MIN(OCD.BOS_CLAIM_MIDDLE_ID) AS BOS_CLAIM_MIDDLE_ID
				, MIN(OCD.BOS_CLAIM_SMALL_ID) AS BOS_CLAIM_SMALL_ID
				FROM OD_CLAIM OC
				INNER JOIN OD_CLAIM_DETL OCD ON OC.OD_CLAIM_ID = OCD.OD_CLAIM_ID AND OCD.PRIORITY_UNDELIVERED_YN = 'Y'
				WHERE OC.CLAIM_YN = 'Y'
				GROUP BY OC.OD_ORDER_ID, OCD.OD_ORDER_DETL_ID
				) IOCD ON OOD.OD_ORDER_ID = IOCD.OD_ORDER_ID AND OOD.OD_ORDER_DETL_ID = IOCD.OD_ORDER_DETL_ID
				/* 미출정보 테이블 END */
			</when>
			<otherwise>
				/* 클레임 테이블 START */
				LEFT OUTER JOIN OD_CLAIM_DETL OCD ON OCD.OD_ORDER_DETL_ID = OOD.OD_ORDER_DETL_ID
				LEFT OUTER JOIN OD_CLAIM OC ON OC.OD_CLAIM_ID = OCD.OD_CLAIM_ID AND OOD.OD_ORDER_ID = OC.OD_ORDER_ID
				/* 클레임 테이블 END */
			</otherwise>
		</choose>
		LEFT OUTER JOIN
		IL_ITEM II ON OOD.IL_ITEM_CD = II.IL_ITEM_CD
		LEFT OUTER JOIN OD_ORDER_DETL_DISCOUNT OODC ON OD.OD_ORDER_ID = OODC.OD_ORDER_ID AND OOD.OD_ORDER_DETL_ID = OODC.OD_ORDER_DETL_ID AND OODC.DISCOUNT_TP = 'GOODS_DISCOUNT_TP.EMPLOYEE'
		LEFT OUTER JOIN	(
						SELECT 	OODG.OD_ORDER_ID
							,	OODG.OD_ORDER_DETL_SEQ
						FROM 	OD_ORDER_DETL OODG
						WHERE 	OODG.PROMOTION_TP = 'CART_PROMOTION_TP.GREENJUICE_SELECT'
						)	OODG		ON 	OODG.OD_ORDER_ID		= OOD.OD_ORDER_ID
										AND	OODG.OD_ORDER_DETL_SEQ 	= OOD.OD_ORDER_DETL_SEQ /* 녹즙, 내맘대로 주문 */
		WHERE
		1 = 1
		<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(urUserId)">
			AND EXISTS ( SELECT 'X'
			FROM UR_USER
			WHERE UR_USER_ID = OD.UR_USER_ID
			AND UR_USER_ID LIKE CONCAT(#{urUserId}, '%') )
		</if>
		<include refid="searchOrderDetailItem" />
		<choose>
			<when test="@kr.co.pulmuone.v1.comm.util.StringUtil@isEmpty(missStockStatus)">
				GROUP BY OOD.OD_ORDER_DETL_ID
			</when>
			<otherwise>
				GROUP BY IUI.IF_UNRELEASED_INFO_ID, OOD.OD_ORDER_DETL_ID
			</otherwise>
		</choose>
		) x
	</select>

	<select id="getOrderDetailList" resultMap="getOrderDetailListResultMap" parameterType="kr.co.pulmuone.v1.order.order.dto.OrderListRequestDto">
		/*	order.getOrderDetailList  */
		SELECT
			OOD.OD_ORDER_ID																	/* 주문 PK */
		  , OOD.ODID																		/* 주문번호 */
		  , OOD.OD_ORDER_DETL_ID															/* 주문상세 PK */
		  , OOD.OD_ORDER_DETL_SEQ
		  , UW.WAREHOUSE_NM																	/* 출고처명 */
		  , IFNULL(OS.SELLERS_NM, '') AS OM_SELLERS_NM /* 판매처명 */
		  , UW.CUTOFF_TIME
		  , FN_DECRYPT(OOD.BUYER_NM)									AS BUYER_NM			/* 구매자명 */
		  , FN_DECRYPT(OOD.BUYER_HP)                                    AS BUYER_HP         /* 구매자 핸드폰번호 */
		  , UU.LOGIN_ID 																	/* 로그인ID */
		  , UU.UR_USER_ID
		  , OOD.GUEST_CI 																	/* 비회원CI */
		  , OOD.COLLECTION_MALL_ID
		  , OOD.OUTMALL_ID																	/* 외부몰주문번호 */
		  , FN_DECRYPT(OSZ.RECV_NM)										AS RECV_NM			/* 수령인명 */
		  , FN_DECRYPT(OSZ.RECV_HP)	                                    AS RECV_HP          /* 수령인 핸드폰번호 */
		  , OOD.GOODS_NM																	/* 상품명 */
		  , OOD.ORDER_CNT																	/* 주문수량 */
		  , OOD.CANCEL_CNT																	/* 취소수량 */
		  , FN_ORDER_DETAIL_STATUS_NM(OOD.ORDER_STATUS_CD)				AS ORDER_STATUS		/* 주문상태 */
		  , IFNULL(OODT.IC_DT, '')										AS IC_DT			/* 결제완료일자 */
		  , IFNULL(OOD.DR_DT, '')										AS DR_DT			/* 배송준비중일자 */
		  , IFNULL(OOD.DI_DT, '')										AS DI_DT			/* 배송중일자 */
		  , IFNULL(CONCAT(DATE_FORMAT(OOD.ORDER_IF_DT,'%Y-%m-%d')), '')	AS ORDER_IF_DT		/* 주문I/F일자 */
		  , IFNULL(CONCAT(DATE_FORMAT(OOD.SHIPPING_DT,'%Y-%m-%d')), '')	AS SHIPPING_DT		/* 출고예정일일자 */
		  , IFNULL(CONCAT(DATE_FORMAT(OOD.DELIVERY_DT,'%Y-%m-%d')), '')	AS DELIVERY_DT		/* 도착예정일일자 */
		  , CASE OOD.GOODS_DELIVERY_TYPE
		   		 WHEN 'GOODS_DELIVERY_TYPE.RESERVATION' THEN CONCAT(FN_COMN_CODE_DIC(OOD.GOODS_TP_CD), '(예약)')
		    ELSE FN_COMN_CODE_DIC(OOD.GOODS_TP_CD)
		    END AS GOODS_TP 																/* 상품타입 */
		  , OOD.IL_ITEM_CD																	/* 품목코드 */
		  , IFNULL(OOD.ITEM_BARCODE, '')								AS ITEM_BARCODE		/* 품목바코드 */
		  , OOD.IL_GOODS_ID																	/* 상품PK */
		  , IFNULL(OOD.GOODS_DISCOUNT_TP, '')							AS GOODS_DISCOUNT_TP/* 상품할인타입 */
		  , IFNULL(FN_COMN_CODE_DIC(OOD.STORAGE_TYPE_CD), '')			AS STORAGE_TYPE		/* 상품보관방법 */
		  , OSZ.OD_SHIPPING_ZONE_ID															/* 주문배송지 PK */
		  , IFNULL(OTN.TRACKING_NO, '')									AS TRACKING_NO		/* 송장번호 */
		  , IFNULL(PSC.PS_SHIPPING_COMP_ID, 0)							AS PS_SHIPPING_COMP_ID	/* 택배사 PK */
		  , IFNULL(PSC.SHIPPING_COMP_NM, '')							AS SHIPPING_COMP_NM	/* 택배사명 */
		  , OOD.STANDARD_PRICE																/* 원가 */
		  , OOD.RECOMMENDED_PRICE															/* 정상가 */
		  , OOD.SALE_PRICE																	/* 판매가 */
		  , IFNULL(IFNULL(OOD.RECOMMENDED_PRICE, 0) * IFNULL(OOD.ORDER_CNT, 0), 0)	AS ORDER_PRICE	/* 주문금액 (정상가 : IL_GOODS.RECOMMENDED_PRICE * 주문수량) */
		  , OOD.PAID_PRICE																	/* 결제금액-쿠폰까지할인된 금액 */
		  , FN_COMN_CODE_DIC(OOD.SELLERS_GROUP_CD)						AS SELLERS_GROUP_CD_NM	/* 판매처명 */
		  , OOD.COUPON_PRICE																/* 쿠폰할인금액 */
		  , FN_COMN_CODE_DIC(OOD.PAY_TP)									AS PAY_TP			/* 결제방법 */
		  , FN_COMN_CODE_DIC(OOD.AGENT_TYPE_CD)							AS AGENT_TYPE		/* 유형 */
		  , OOD.UR_WAREHOUSE_ID																/* 출고처 PK : UR_WAREHOUSE.UR_WAREHOUSE_ID */
		  , OOD.CLAIM_STATUS_CD																/* 클레임 주문상태 : OD_STATUS.STATUS_CD */
		  , OOD.LAST_CLAIM_STATUS_CD
		  <if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(claimState)">
		  /* 클레임 항목 START */
		  , OOD.OD_CLAIM_ID																	/* 클레임 PK */
		  , OOD.OD_CLAIM_DETL_ID															/* 클레임상세 PK */
		  , OOD.CA_DT																		/* 취소요청일자 */
		  , OOD.CR_DT																		/* 클레임요청일자 */
		  , OOD.CE_DT																		/* 클레임승인일자 */
		  , OOD.CC_DT																		/* 취소완료일자 */
		  , OOD.RC_DT																		/* 반품완료일자 */
		  , OOD.CLAIM_CNT																	/* 클레임수량 */
		  , FN_ORDER_DETAIL_STATUS_NM(IF(OOD.PAY_TP = 'PAY_TP.COLLECTION', 'FC', OOD.REFUND_STATUS_CD))				AS REFUND_STATUS_CD	/* 환불상태 */
		  , FN_ORDER_DETAIL_STATUS_NM(OOD.CLAIM_STATUS_CD)				AS ORDER_CLAIM_STATUS	/* 클레임상태 */
		  , FN_ORDER_DETAIL_STATUS_NM(OOD.LAST_CLAIM_STATUS_CD)			AS LAST_ORDER_CLAIM_STATUS
		  , OOD.CLAIM_REASON_CD											AS CLAIM_REASON_CD_NM /* 클레임사유 */
		  , OOD.CLAIM_REASON_MSG															/* 클레임상세사유 */
		  , OOD.RETURNS_YN																	/* 반품회수여부 */
		  , OOD.REFUND_PRICE																/* 환불금액 */
		  , OOD.CLAIM_ATTC_CNT																/* 첨부파일등록 수 */
		  , OOD.PS_CLAIM_MALL_ID															/* MALL 클레임 사유 PK */
		  , OOD.PS_CLAIM_MALL_MSG															/* MALL 클레임 사유 */
		  , OOD.CLAIM_GOODS_PRICE															/* 클레임 상품금액 */
		  , OOD.CLAIM_GOODS_COUPON_PRICE													/* 클레임 상품쿠폰 금액 */
		  , OOD.CLAIM_CART_COUPON_PRICE														/* 클레임 장바구니쿠폰금액 */
		  , OOD.CLAIM_SHIPPING_PRICE														/* 배송비 */
		  , OOD.PS_CLAIM_BOS_ID																/* BOS 클레임 사유 PK */
          , OOD.PS_CLAIM_BOS_SUPPLY_ID														/* BOS 클레임 사유 공급업체 PK */
          , OOD.RECALL_TYPE
          /* 클레임 항목 END */
		  </if>
		  <if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isEmpty(orderState) and @kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(claimState)">
		  /* CS환불 항목  START */
          , OOD.L_CLAIM_NAME																/* 클레임 사유(대) 사유명 */
          , OOD.M_CLAIM_NAME																/* 클레임 사유(중) 사유명 */
	      , OOD.S_CLAIM_NAME																/* 귀책처 사유명 */
	      , OOD.TARGET_TP																	/* 귀책 유형 */
	      , OOD.COMP_NM																		/* 공급업체 */
	      , OOD.CLAIM_NAME																	/* 반품회수여부(회수/미회수)에 따른 클레임사유 */
	      , OOD.CS_REFUND_TP																/* CS환불구분 */
	      , OOD.CS_REFUND_APPROVE_CD 														/* CS환불승인상태 */
	      , IFNULL(FN_COMN_CODE_DIC(OOD.CS_REFUND_APPROVE_CD), '')	AS CS_REFUND_APPROVE_NM	/* CS환불승인상태명 */
	      , OOD.REFUND_TYPE																	/* 환불수단 D: 원결제 내역 C : 무통장입금 */
	      , FN_COMN_CODE_DIC(OOD.REFUND_BANK_CD)	AS REFUND_BANK_NM						/* 환불 은행코드 */
	      , FN_DECRYPT(OOD.REFUND_ACCOUNT_HOLDER)	AS REFUND_ACCOUNT_HOLDER				/* 환불 예금주 */
	      , FN_DECRYPT(OOD.REFUND_ACCOUNT_NUMBER)	AS REFUND_ACCOUNT_NUMBER				/* 환불 계좌번호 */
	      , OOD.CLAIM_CREATE_ID																/* 클레임 등록자 ID */
	      , OOD.CLAIM_REFUND_YN																/* 클레임 환불완료여부 */
	      , OOD.SHIPPING_INFO
		  /* CS환불 항목 END */
		  </if>
		  , OOD.GOODS_TP_CD
		  , IFNULL(FN_COMN_CODE_DIC(OSZ.DELIVERY_TYPE), '') AS  DELIVERY_TYPE_NM				/* 배송타입명 */
		  , IFNULL(OOD.EV_EXHIBIT_ID, 0) AS EV_EXHIBIT_ID
		  , IFNULL(OOD.PROMOTION_TP, '') AS PROMOTION_TP
		  , FN_COMN_CODE_DIC(IFNULL(OODD.GOODS_CYCLE_TP, '')) AS GOODS_CYCLE_TP /* 배송주기 */
		  , FN_COMN_CODE_DIC(IFNULL(OODD.GOODS_CYCLE_TERM_TP, '')) AS GOODS_CYCLE_TERM_TP /* 배송기간 */
		  , IFNULL(OODD.MON_CNT, 0) AS MON_CNT
		  , IFNULL(OODD.TUE_CNT, 0) AS TUE_CNT
		  , IFNULL(OODD.WED_CNT, 0) AS WED_CNT
		  , IFNULL(OODD.THU_CNT, 0) AS THU_CNT
		  , IFNULL(OODD.FRI_CNT, 0) AS FRI_CNT
		  , IFNULL(OODD.ALLERGY_YN, 'N') AS ALLERGY_YN /* 알러지 식단 여부 */
		  , IFNULL(OODD.SET_CNT, 0) AS SET_CNT /* 세트수량 : 일괄배송 해당 */
		  , IFNULL(OODD.DAILY_BULK_YN, 'N') AS DAILY_BULK_YN /* 일괄배송 여부 */
		  , IFNULL(OODD.SCHEDULE_YN, 'N') AS SCHEDULE_YN /* 스케쥴 생성 여부 / 베이비밀은 I/F여부 */
		  , OOD.GOODS_DAILY_TP
		  <if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(missStockStatus)">
		  /* 미출 항목 START */
		  , OOD.MISS_DT												/* 미출일자 */
		  , FN_COMN_CODE_DIC(OOD.MISS_REASON) AS MISS_REASON		/* 미출 사유 */
		  , OOD.MISS_MSG											/* 미출 상세사유 */
		  , OOD.OD_CLAIM_ID											/* 주문 클레임 PK */
		  , OOD.OD_CLAIM_DETL_ID									/* 주문 클레임 상세 PK */
		  , OOD.MISS_CNT
		  , OOD.CLAIM_CNT
		  , OOD.CLAIM_STATUS_TP										/* 클레임상태구분 (CANCEL : 취소, RETURN : 반품, CS_REFUND: CS환불, RETURN_DELIVERY: 재배송 ) */
		  , IFNULL(FN_COMN_CODE_DIC(OOD.CLAIM_STATUS_TP), '') AS CLAIM_STATUS_TP_NM
		  , OOD.IF_UNRELEASED_INFO_ID                               /* 미출정보 PK  */
		  , OOD.MISS_CLAIM_CNT
		  , OOD.MISS_IF_UNRELEASED_INFO_ID
		  , OOD.PROCESS_YN
		  , CASE
		     WHEN BOS_CLAIM_LARGE_NM != '' THEN CONCAT(BOS_CLAIM_LARGE_NM, '>', BOS_CLAIM_MIDDLE_NM, '>', BOS_CLAIM_SMALL_NM)
		     ELSE ''
		    END AS BOS_CLAIM_NM
		  , OOD.SCH_DELIVERY_DT
		  , OOD.OD_ORDER_DETL_DAILY_SCH_SEQ
		  /* 미출 항목 END */
		  </if>
		  , OOD.ITEM_TP                                 /*품목유형(공통, 매장전용, 무형, 렌탈)*/
          , OOD.ERP_IF_YN                               /*품목 ERP 연동 여부*/
			, IFNULL((
				SELECT
					GROUP_CONCAT(DISTINCT B.DIC_MST_NM)
				FROM
					ST_COMN_CODE A
					INNER JOIN GB_DIC_MST B ON A.GB_DIC_MST_ID = B.GB_DIC_MST_ID
					INNER JOIN OD_ORDER_DETL_DISCOUNT C ON TRIM(A.ST_COMN_CODE_ID) = TRIM(C.DISCOUNT_TP)
				WHERE
						C.OD_ORDER_DETL_ID = OOD.OD_ORDER_DETL_ID
					AND A.ST_COMN_CODE_MST_CD = 'GOODS_DISCOUNT_TP'
					AND A.ATTR1 = 'Y'
			), '') AS GOODS_DISCOUNT_TP_NM
			, IFNULL(OSS.BOS_JSON, '') AS BOS_JSON
			, IFNULL(FN_COMN_CODE_DIC(OOD.BUYER_TYPE_CD), '') AS BUYER_TYPE_CD_NM 				  /*주문자 유형*/
			, OOD.CLAIM_ABLE_CNT																 /* 클레임가능수량 */
			, IFNULL(FN_COMN_CODE_DIC(OOD.ORDER_STATUS_DELI_TP), '')  AS ORDER_STATUS_DELI_TP_NM /* 배송유형 */
			, OOD.UR_GROUP_ID																	 /* 회원 그룹 ID */
			, OOD.DISCOUNT_EMPLOYEE_PRICE 														/*임직원할인*/
			, OOD.DIRECT_PRICE 			  														/*즉시할인*/
			, IFNULL(UC.COMP_NM, '') AS UR_SUPPLIER_NM											/* 공급업체 */
			, IF(OOD.ORDER_STATUS_DELI_TP = 'ORDER_STATUS_DELI_TP.RENTAL', OST.BOS_JSON, '') AS ORDER_BOS_JSON /*렌탈주문 > 주문상태*/
			, IF(OOD.ORDER_STATUS_DELI_TP = 'ORDER_STATUS_DELI_TP.RENTAL', IFNULL(OSS.BOS_JSON, ''), '') AS CLAIM_BOS_JSON /*렌탈주문 > 클레임상태*/
			, CASE WHEN OOD.PROMOTION_TP = 'CART_PROMOTION_TP.GREENJUICE_SELECT'	THEN 'Y' ELSE 'N' END  SELECT_GREENJUICE/* 내맘대로 녹즙 */
		FROM
		(
			SELECT
				OOD.OD_ORDER_ID
			  , OD.ODID
			  , OOD.OD_ORDER_DETL_ID
			  , OOD.OD_ORDER_DETL_SEQ
			  , OOD.OD_ORDER_DETL_STEP_ID
			  , OOD.OD_SHIPPING_ZONE_ID
			  , OOD.UR_WAREHOUSE_ID
			  , OOD.UR_SUPPLIER_ID
			  , OD.BUYER_NM
			  , OD.BUYER_HP
			  , OD.GUEST_CI
			  , OD.OM_SELLERS_ID
			  , OD.SELLERS_GROUP_CD
			  , OD.UR_USER_ID
			  , IFNULL(OD.COLLECTION_MALL_ID, '') AS COLLECTION_MALL_ID
			  , IFNULL(OD.OUTMALL_ID, '') AS OUTMALL_ID
			  , OD.AGENT_TYPE_CD
			  , OOD.GOODS_NM
			  , OOD.ORDER_CNT
			  , OOD.CANCEL_CNT
			  , OOD.ORDER_STATUS_CD
			  , OOD.DR_DT
			  , OOD.DI_DT
			  , OOD.ORDER_IF_DT
			  , OOD.SHIPPING_DT
			  , OOD.DELIVERY_DT
			  , OOD.GOODS_TP_CD
			  , OOD.GOODS_DELIVERY_TYPE
			  , OOD.IL_ITEM_CD
			  , OOD.ITEM_BARCODE
			  , OOD.IL_GOODS_ID
			  , OOD.GOODS_DISCOUNT_TP
			  , OOD.STORAGE_TYPE_CD
			  , OOD.STANDARD_PRICE
			  , OOD.RECOMMENDED_PRICE
			  , OOD.SALE_PRICE
			  , IFNULL(IFNULL(OOD.RECOMMENDED_PRICE, 0) * IFNULL(OOD.ORDER_CNT, 0), 0)	AS ORDER_PRICE	/* 주문금액 (정상가 : IL_GOODS.RECOMMENDED_PRICE * 주문수량) */
			  , OOD.PAID_PRICE
			  , (OOD.CART_COUPON_PRICE + OOD.GOODS_COUPON_PRICE) AS COUPON_PRICE
			  , OCD.CLAIM_STATUS_CD
			  , IFNULL((
					SELECT
						OCD.CLAIM_STATUS_CD
					FROM
						OD_CLAIM OC
					INNER JOIN OD_CLAIM_DETL OCD ON OC.OD_CLAIM_ID = OCD.OD_CLAIM_ID
					WHERE
						OC.OD_ORDER_ID = OD.OD_ORDER_ID
					AND OOD.OD_ORDER_DETL_ID = OCD.OD_ORDER_DETL_ID
					ORDER BY OC.OD_CLAIM_ID DESC
					LIMIT 1
			  ), '') AS LAST_CLAIM_STATUS_CD
			  <if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(claimState)">
			  /* 클레임 항목 START */
			  , OCD.OD_CLAIM_ID
			  , OCD.OD_CLAIM_DETL_ID
			  , OCD.CA_DT
			  , OCD.CR_DT
			  , OCD.CE_DT
			  , OCD.CC_DT
			  , OCD.RC_DT
			  , OCD.CLAIM_CNT
			  , IF(IFNULL(OCD.FC_DT, '') = '', 'FA', 'FC') AS REFUND_STATUS_CD
			  , OC.CLAIM_REASON_CD
			  , OC.CLAIM_REASON_MSG
			  , OC.RETURNS_YN
			  , OC.REFUND_PRICE
			  , (
					SELECT COUNT(1)
					FROM   OD_CLAIM_ATTC OCA
					WHERE  1 = 1
					AND    OC.OD_CLAIM_ID = OCA.OD_CLAIM_ID
				) AS CLAIM_ATTC_CNT
			  , OC.PS_CLAIM_MALL_ID
			  , (SELECT PCM.REASON_MSG
		  		   FROM PS_CLAIM_MALL PCM			/* MALL 클레임 사유 */
		 		  WHERE PCM.PS_CLAIM_MALL_ID = OC.PS_CLAIM_MALL_ID) AS PS_CLAIM_MALL_MSG
		 	  , OC.GOODS_PRICE			AS CLAIM_GOODS_PRICE
		 	  , OC.GOODS_COUPON_PRICE	AS CLAIM_GOODS_COUPON_PRICE
		 	  , OC.CART_COUPON_PRICE	AS CLAIM_CART_COUPON_PRICE
		 	  , OC.SHIPPING_PRICE		AS CLAIM_SHIPPING_PRICE
		 	  , OCD.PS_CLAIM_BOS_ID			AS PS_CLAIM_BOS_ID			/* BOS 클레임 사유 PK */
              , OCD.PS_CLAIM_BOS_SUPPLY_ID	AS PS_CLAIM_BOS_SUPPLY_ID	/* BOS 클레임 사유 공급업체 PK */
              , OCD.RECALL_TYPE AS RECALL_TYPE
              /* 클레임 항목 END */
			  </if>
			  <if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isEmpty(orderState) and @kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(claimState)">
			  /* CS환불 항목  START */
              , PCC1.CLAIM_NM 				AS L_CLAIM_NAME				/* 클레임 사유(대) 사유명 */
              , PCC2.CLAIM_NM 				AS M_CLAIM_NAME				/* 클레임 사유(중) 사유명 */
	          , PCC3.CLAIM_NM 				AS S_CLAIM_NAME				/* 귀책처 사유명 */
	          , PCC3.TARGET_TP				AS TARGET_TP				/* 귀책 유형 */
	          , (SELECT C.COMP_NM
	   	           FROM UR_SUPPLIER US
	   	          INNER JOIN UR_COMPANY C ON C.UR_COMPANY_ID = US.UR_COMPANY_ID
	   	      		 					 AND C.USE_YN = 'Y'
	   	      		  					 AND C.COMP_TP IN ('COMPANY_TYPE.HEADQUARTERS','COMPANY_TYPE.SUPPLIER')
	   	       	  WHERE PCBS.SUPPLIER_CD = US.SUPPLIER_CD
	            ) 							AS COMP_NM					/* 공급업체 */
	          , CASE WHEN OC.RETURNS_YN = 'Y' THEN PCSC1.CLAIM_NM ELSE PCSC2.CLAIM_NM END AS CLAIM_NAME	/* 반품회수여부(회수/미회수)에 따른 클레임사유 */
	          , OC.CS_REFUND_TP 			AS CS_REFUND_TP				/* CS환불구분 */
	          , OC.CS_REFUND_APPROVE_CD 	AS CS_REFUND_APPROVE_CD		/* CS환불승인상태 */
	          , OC.REFUND_TYPE				AS REFUND_TYPE				/* 환불수단 D: 원결제 내역 C : 무통장입금 */
	          , OCA.BANK_CD					AS REFUND_BANK_CD			/* 환불 은행코드 */
	          , OCA.ACCOUNT_HOLDER			AS REFUND_ACCOUNT_HOLDER	/* 환불 예금주 */
	          , OCA.ACCOUNT_NUMBER			AS REFUND_ACCOUNT_NUMBER	/* 환불 계좌번호 */
	          , OC.CREATE_ID				AS CLAIM_CREATE_ID			/* 클레임 등록자 ID */
	          , CASE WHEN (SELECT COUNT(OD_PAYMENT_MASTER_ID)
		                     FROM OD_PAYMENT_MASTER OPM
		                    WHERE OPM.APPROVAL_DT IS NOT NULL
		                      AND OPM.OD_PAYMENT_MASTER_ID IN (SELECT OP.OD_PAYMENT_MASTER_ID
		                                                        FROM OD_PAYMENT OP
		                                                       WHERE OP.OD_ORDER_ID = OOD.OD_ORDER_ID
		                                                         AND OP.OD_CLAIM_ID = OCD.OD_CLAIM_ID
		                                                     )
		                  ) > 0 THEN 'Y' ELSE 'N' END
		                                    AS CLAIM_REFUND_YN			/* 클레임 환불완료여부 */
				  , GROUP_CONCAT(
					  DISTINCT CONCAT(
					  IFNULL(psc.SHIPPING_COMP_NM, "-"), ",",
					  IFNULL(otn.TRACKING_NO, "-"), ",",
					  IFNULL(psc.PS_SHIPPING_COMP_ID, 0), ",",
					  IFNULL(psc.TRACKING_URL,"-"), ",",
					  IF(psc.HTTP_REQUEST_TP = 'P', 'POST', 'GET'), ",",
					  IFNULL(psc.INVOICE_PARAM,"-"), ",",
					  CASE WHEN IFNULL(PC1.PS_NM, '') != '' THEN
					  CASE WHEN psc.LOGISTICS_CD = 'LOTTE' THEN
					  CASE WHEN OOD.UR_WAREHOUSE_GRP_CD = 'WAREHOUSE_GROUP.OWN' AND psc.LOGISTICS_CD = 'LOTTE' THEN 'Y'
					  ELSE 'N'
					  END
					  ELSE 'N' END /* 반품 송장은 API지원이 안됨 */
					  ELSE 'N' END, ",",
					  IFNULL(psc.LOGISTICS_CD,"")
					  ) SEPARATOR '∀'
					  ) AS SHIPPING_INFO
		      /* CS환불 항목 END */
			  </if>
			  , OOD.EV_EXHIBIT_ID, OOD.PROMOTION_TP, OOD.GOODS_DAILY_TP
			  <if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(missStockStatus)">
			  /* 미출 항목 START */
			  , IFNULL(IUI.MISS_DT, IFNULL(DATE_FORMAT(IOCD.CA_DT,'%Y%m%d'), DATE_FORMAT(IOCD.EC_DT,'%Y%m%d'))) AS MISS_DT  /* 미출일자 */
			  , IUI.MISS_REASON											/* 미출 사유 */
			  , IUI.MISS_MSG											/* 미출 상세사유 */
			  , IFNULL(OCD.OD_CLAIM_ID, IOCD.OD_CLAIM_ID) AS OD_CLAIM_ID /* 주문 클레임 PK */
			  , IFNULL(OCD.OD_CLAIM_DETL_ID, IOCD.OD_CLAIM_DETL_ID) AS OD_CLAIM_DETL_ID	/* 주문 클레임 상세 PK */
			  , IUI.MISS_CNT
			  , IFNULL(OCD.CLAIM_CNT, 0) AS CLAIM_CNT
			  , (SELECT
				  	CLAIM_STATUS_TP
				  FROM OD_CLAIM oc
				  INNER JOIN OD_CLAIM_DETL ocd ON oc.OD_CLAIM_ID = ocd.OD_CLAIM_ID
				  WHERE ocd.OD_CLAIM_DETL_ID = IFNULL(OCD.OD_CLAIM_DETL_ID, IOCD.OD_CLAIM_DETL_ID)) AS CLAIM_STATUS_TP		/* 클레임상태구분 (CANCEL : 취소, RETURN : 반품, CS_REFUND: CS환불, RETURN_DELIVERY: 재배송 ) */
			  , IUI.IF_UNRELEASED_INFO_ID                               /* 미출정보 PK  */
			  , IFNULL(IOCD.MISS_CLAIM_CNT, 0) AS MISS_CLAIM_CNT
			  , OCD.IF_UNRELEASED_INFO_ID AS MISS_IF_UNRELEASED_INFO_ID                         /* 미출정보 PK  */
			  , CASE
				  WHEN NULLIF(OCD.IF_UNRELEASED_INFO_ID, '') IS NOT NULL THEN 'NONE'
				  WHEN OOD.ORDER_CNT-OOD.CANCEL_CNT = 0 THEN 'NONE'
				  WHEN IFNULL(IOCD.MISS_CLAIM_CNT, 0) > 0 AND IFNULL(IOCD.MISS_CLAIM_CNT, 0) = IFNULL(IUI.MISS_CNT, 0) THEN 'NONE'
				  WHEN IFNULL(IUI.MISS_CNT, 0) = 0 THEN 'NONE'
				  ELSE 'PROCESS'
			    END AS PROCESS_YN
			  , IFNULL(IFNULL(FN_CLAIM_BOS_ID(OCD.BOS_CLAIM_LARGE_ID, 10), FN_CLAIM_BOS_ID(IOCD.BOS_CLAIM_LARGE_ID, 10)), '') AS BOS_CLAIM_LARGE_NM
			  , IFNULL(IFNULL(FN_CLAIM_BOS_ID(OCD.BOS_CLAIM_MIDDLE_ID , 20), FN_CLAIM_BOS_ID(IOCD.BOS_CLAIM_MIDDLE_ID, 20)), '') AS BOS_CLAIM_MIDDLE_NM
			  , IFNULL(IFNULL(FN_CLAIM_BOS_ID(OCD.BOS_CLAIM_SMALL_ID, 30), FN_CLAIM_BOS_ID(IOCD.BOS_CLAIM_SMALL_ID, 30)), '') AS BOS_CLAIM_SMALL_NM
			  , (
				  SELECT
				  	MAX(DATE_FORMAT(oodds.DELIVERY_DT,'%Y-%m-%d'))
				  FROM OD_ORDER_DETL_DAILY oodd
				  INNER JOIN OD_ORDER_DETL_DAILY_SCH oodds ON oodd.OD_ORDER_DETL_DAILY_ID = oodds.OD_ORDER_DETL_DAILY_ID
				  WHERE oodd.OD_ORDER_ID = OD.OD_ORDER_ID
				  AND oodd.OD_ORDER_DETL_SEQ = IUI.OD_ORDER_DETL_SEQ
				  AND oodds.OD_ORDER_DETL_DAILY_SCH_SEQ = IUI.OD_ORDER_DETL_DAILY_SCH_SEQ
				  AND oodds.USE_YN = 'Y'
				) AS SCH_DELIVERY_DT
			  , IUI.OD_ORDER_DETL_DAILY_SCH_SEQ
			  /* 미출 항목 END */
			  </if>
			  , II.ITEM_TP                                              /*품목유형(공통, 매장전용, 무형, 렌탈)*/
              , II.ERP_IF_YN                                            /*품목 ERP 연동 여부*/
			  , OD.BUYER_TYPE_CD										/* 주문자 유형 */
			  , (OOD.ORDER_CNT - OOD.CANCEL_CNT) AS CLAIM_ABLE_CNT      /* 클레임 가능 수량 */
			  , OOD.ORDER_STATUS_DELI_TP 								/* 배송유형 */
			  , OD.UR_GROUP_ID											/* 회원 그룹 ID */
			  , IF(OOD.OD_ORDER_DETL_DEPTH_ID != 3, IFNULL(OODC.DISCOUNT_PRICE,0), 0) AS DISCOUNT_EMPLOYEE_PRICE
			  , IF(OOD.OD_ORDER_DETL_DEPTH_ID != 3,
					CASE WHEN IFNULL(OODC.DISCOUNT_PRICE,0) > 0 THEN 0
					WHEN IFNULL(OODC.DISCOUNT_PRICE,0) = 0 THEN IFNULL(OOD.DIRECT_PRICE,0) END , IFNULL(OOD.DIRECT_PRICE,0)) AS DIRECT_PRICE
		      , IFNULL((
					SELECT
						OPM.PAY_TP
					FROM
						OD_PAYMENT OP
					INNER JOIN
						OD_PAYMENT_MASTER OPM ON OP.OD_PAYMENT_MASTER_ID = OPM.OD_PAYMENT_MASTER_ID
					WHERE
						OP.OD_ORDER_ID = OD.OD_ORDER_ID
					AND
						OPM.TYPE = 'G'
			    ), '') AS PAY_TP
			,	CASE PROMOTION_TP WHEN 'CART_PROMOTION_TP.GREENJUICE_SELECT' THEN 'Y' ELSE 'N' END AS GREENJUICE_SELECT	/* 내맘대로 녹즙 */
			FROM
				OD_ORDER OD
			INNER JOIN
				OD_ORDER_DETL OOD ON OOD.OD_ORDER_ID = OD.OD_ORDER_ID
			INNER JOIN
				OD_SHIPPING_ZONE OSZ ON OSZ.OD_SHIPPING_ZONE_ID = OOD.OD_SHIPPING_ZONE_ID
			<choose>
				<when test="@kr.co.pulmuone.v1.comm.util.StringUtil@isEmpty(orderState) and @kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(claimState)">
					/* 클레임 테이블 START */
					INNER JOIN OD_CLAIM OC ON OOD.OD_ORDER_ID = OC.OD_ORDER_ID
					INNER JOIN OD_CLAIM_DETL OCD ON OC.OD_CLAIM_ID = OCD.OD_CLAIM_ID AND OCD.OD_ORDER_DETL_ID = OOD.OD_ORDER_DETL_ID
					LEFT OUTER JOIN PS_CLAIM_BOS PCB
		  	  		   		     ON OCD.PS_CLAIM_BOS_ID = PCB.PS_CLAIM_BOS_ID
		  	 					AND PCB.DEL_YN = 'N'
		  	 					AND PCB.USE_YN = 'Y'
 					LEFT OUTER JOIN PS_CLAIM_BOS_SUPPLY PCBS
  		      		   		     ON OCD.PS_CLAIM_BOS_ID 	   = PCBS.PS_CLAIM_BOS_ID
  		     					AND OCD.PS_CLAIM_BOS_SUPPLY_ID = PCBS.PS_CLAIM_BOS_SUPPLY_ID
 					LEFT OUTER JOIN PS_CLAIM_CTGRY PCC1
 			  		  		     ON PCB.L_CLAIM_CTGRY_ID = PCC1.PS_CLAIM_CTGRY_ID
 					LEFT OUTER JOIN PS_CLAIM_CTGRY PCC2
              				     ON PCB.M_CLAIM_CTGRY_ID = PCC2.PS_CLAIM_CTGRY_ID
 					LEFT OUTER JOIN PS_CLAIM_CTGRY PCC3
 			  		  		     ON PCB.S_CLAIM_CTGRY_ID = PCC3.PS_CLAIM_CTGRY_ID
 					LEFT OUTER JOIN PS_CLAIM_SUPPLY_CTGRY PCSC1
              					 ON PCSC1.SUPPLIER_CD 	 = PCBS.SUPPLIER_CD
              				    AND PCSC1.CLAIM_CD 	  	 = PCBS.CLAIM_CD
 					LEFT OUTER JOIN PS_CLAIM_SUPPLY_CTGRY PCSC2
 			  		       		 ON PCSC2.SUPPLIER_CD 	 = PCBS.NON_SUPPLIER_CD
 			  					AND PCSC2.CLAIM_CD 	  	 = PCBS.NON_CLAIM_CD
 			  		LEFT OUTER JOIN OD_CLAIM_ACCOUNT OCA
 			  					 ON OC.OD_CLAIM_ID		 = OCA.OD_CLAIM_ID
					LEFT OUTER JOIN OD_RETURN_TRACKING_NUMBER otn ON OCD.OD_CLAIM_DETL_ID = otn.OD_CLAIM_DETL_ID
					LEFT OUTER JOIN PS_SHIPPING_COMP psc ON otn.PS_SHIPPING_COMP_ID = psc.PS_SHIPPING_COMP_ID
					LEFT OUTER JOIN PS_CONFIG PC1 ON otn.PS_SHIPPING_COMP_ID = PC1.PS_KEY AND PS_GRP_TP = 'DELIVERY_TRACKING_SEARCH'
					/* 클레임 테이블 END */
				</when>
				<when test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(claimState)">
					/* 클레임 테이블 START */
					LEFT OUTER JOIN OD_CLAIM_DETL OCD ON OCD.OD_ORDER_DETL_ID = OOD.OD_ORDER_DETL_ID
					LEFT OUTER JOIN OD_CLAIM OC ON OC.OD_CLAIM_ID = OCD.OD_CLAIM_ID AND OOD.OD_ORDER_ID = OC.OD_ORDER_ID
					/* 클레임 테이블 END */
				</when>
				<when test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(missStockStatus)">
					/* 미출정보 테이블 START */
					LEFT OUTER JOIN IF_UNRELEASED_INFO IUI ON OD.ODID = IUI.ODID AND OOD.OD_ORDER_DETL_SEQ = IUI.OD_ORDER_DETL_SEQ
					LEFT OUTER JOIN OD_CLAIM_DETL OCD ON OCD.OD_ORDER_DETL_ID = OOD.OD_ORDER_DETL_ID AND IUI.IF_UNRELEASED_INFO_ID = OCD.IF_UNRELEASED_INFO_ID
					LEFT OUTER JOIN OD_CLAIM OC ON OCD.OD_CLAIM_ID = OC.OD_CLAIM_ID AND OOD.OD_ORDER_ID = OC.OD_ORDER_ID AND OC.CLAIM_YN = 'Y'
					LEFT OUTER JOIN (
						SELECT
						OC.OD_ORDER_ID
						, OCD.OD_ORDER_DETL_ID
						, SUM(OCD.CLAIM_CNT) AS MISS_CLAIM_CNT
						, MIN(OCD.CA_DT) AS CA_DT
						, MIN(OCD.EC_DT) AS EC_DT
						, MIN(OCD.OD_CLAIM_ID) AS OD_CLAIM_ID
						, MIN(OCD.OD_CLAIM_DETL_ID) AS OD_CLAIM_DETL_ID
						, MIN(OC.CLAIM_STATUS_TP) AS CLAIM_STATUS_TP
						, MIN(OCD.CLAIM_STATUS_CD) AS CLAIM_STATUS_CD
						, MIN(OCD.BOS_CLAIM_LARGE_ID) AS BOS_CLAIM_LARGE_ID
						, MIN(OCD.BOS_CLAIM_MIDDLE_ID) AS BOS_CLAIM_MIDDLE_ID
						, MIN(OCD.BOS_CLAIM_SMALL_ID) AS BOS_CLAIM_SMALL_ID
						FROM OD_CLAIM OC
						INNER JOIN OD_CLAIM_DETL OCD ON OC.OD_CLAIM_ID = OCD.OD_CLAIM_ID AND OCD.PRIORITY_UNDELIVERED_YN = 'Y'
						WHERE OC.CLAIM_YN = 'Y'
						GROUP BY OC.OD_ORDER_ID, OCD.OD_ORDER_DETL_ID
					) IOCD ON OOD.OD_ORDER_ID = IOCD.OD_ORDER_ID AND OOD.OD_ORDER_DETL_ID = IOCD.OD_ORDER_DETL_ID
					/* 미출정보 테이블 END */
				</when>
				<otherwise>
					/* 클레임 테이블 START */
					LEFT OUTER JOIN OD_CLAIM_DETL OCD ON OCD.OD_ORDER_DETL_ID = OOD.OD_ORDER_DETL_ID
					LEFT OUTER JOIN OD_CLAIM OC ON OC.OD_CLAIM_ID = OCD.OD_CLAIM_ID AND OOD.OD_ORDER_ID = OC.OD_ORDER_ID
					/* 클레임 테이블 END */
				</otherwise>
			</choose>
		    LEFT OUTER JOIN
                IL_ITEM II ON OOD.IL_ITEM_CD = II.IL_ITEM_CD
		    LEFT OUTER JOIN OD_ORDER_DETL_DISCOUNT OODC ON OD.OD_ORDER_ID = OODC.OD_ORDER_ID AND OOD.OD_ORDER_DETL_ID = OODC.OD_ORDER_DETL_ID AND OODC.DISCOUNT_TP = 'GOODS_DISCOUNT_TP.EMPLOYEE'
			WHERE
				1 = 1
			<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(urUserId)">
				AND EXISTS ( SELECT 'X'
				FROM UR_USER
				WHERE UR_USER_ID = OD.UR_USER_ID
				AND UR_USER_ID LIKE CONCAT(#{urUserId}, '%') )
			</if>
				<include refid="searchOrderDetailItem" />
			<choose>
				<when test="@kr.co.pulmuone.v1.comm.util.StringUtil@isEmpty(missStockStatus)">
					GROUP BY OOD.OD_ORDER_DETL_ID
				</when>
				<otherwise>
					GROUP BY IUI.IF_UNRELEASED_INFO_ID, OOD.OD_ORDER_DETL_ID
				</otherwise>
			</choose>

				<include refid="searchOrderOrderBy" />

				<if test='@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEquals(excelYn, "Y")'>
					<include refid="_common.pageLimit"/>
				</if>
		) OOD
		INNER JOIN OD_ORDER_DT OODT ON OOD.OD_ORDER_ID = OODT.OD_ORDER_ID
		INNER JOIN OD_SHIPPING_ZONE OSZ ON OOD.OD_SHIPPING_ZONE_ID = OSZ.OD_SHIPPING_ZONE_ID
		INNER JOIN UR_WAREHOUSE UW ON OOD.UR_WAREHOUSE_ID = UW.UR_WAREHOUSE_ID
		INNER JOIN OD_STATUS OST ON OOD.ORDER_STATUS_CD = OST.STATUS_CD
		LEFT OUTER JOIN OM_SELLERS OS ON OOD.OM_SELLERS_ID = OS.OM_SELLERS_ID
		LEFT OUTER JOIN UR_USER UU ON OOD.UR_USER_ID = UU.UR_USER_ID
		LEFT OUTER JOIN OD_TRACKING_NUMBER OTN ON OOD.OD_ORDER_DETL_ID = OTN.OD_ORDER_DETL_ID
		LEFT OUTER JOIN PS_SHIPPING_COMP PSC ON OTN.PS_SHIPPING_COMP_ID = PSC.PS_SHIPPING_COMP_ID
		LEFT OUTER JOIN OD_ORDER_DETL_DAILY OODD ON OOD.OD_ORDER_ID = OODD.OD_ORDER_ID AND OOD.OD_ORDER_DETL_ID = OODD.OD_ORDER_DETL_ID
		/* LEFT OUTER JOIN OD_STATUS OSS ON OOD.CLAIM_STATUS_CD = OSS.STATUS_CD */
		LEFT OUTER JOIN OD_STATUS OSS ON OOD.LAST_CLAIM_STATUS_CD = OSS.STATUS_CD
		LEFT OUTER JOIN UR_SUPPLIER US ON OOD.UR_SUPPLIER_ID = US.UR_SUPPLIER_ID
		LEFT OUTER JOIN UR_COMPANY UC ON US.UR_COMPANY_ID = UC.UR_COMPANY_ID AND UC.USE_YN = 'Y' AND UC.COMP_TP IN ('COMPANY_TYPE.HEADQUARTERS','COMPANY_TYPE.SUPPLIER')
		<include refid="searchOutOrderOrderBy" />
	</select>

	<select id="getOrderDetailExcelList" resultType="kr.co.pulmuone.v1.order.order.dto.OrderDetailExcelListDto">
		/*	orderList.getOrderDetailExcelList  */
		SELECT OOD.OD_ORDER_ID																/* 주문 PK */
			 , OOD.ODID																		/* 주문번호 */
			 , OOD.OD_CLAIM_ID																/* 주문 클레임 PK */
		  	 , OOD.OD_ORDER_DETL_ID															/* 주문상세 PK */
		  	 , OOD.OD_ORDER_DETL_SEQ														/* 주문상세 순번(라인번호) 주문번호에 대한 순번 */
		  	 , OOD.OM_SELLERS_ID															/* 판매처 PK */
		     , IFNULL(OS.SELLERS_NM, '')					AS SELLERS_NM 					/* 판매처명 */
		     , IFNULL(OOD.COLLECTION_MALL_ID, '')			AS COLLECTION_MALL_ID			/* 수집몰주문번호 (이지어드민 PACK, SEQ 조합) */
		     , IFNULL(OOD.OUTMALL_ID, '')					AS OUTMALL_ID					/* 외부몰주문번호(이지어드민 ORDER_ID) */
		     , IFNULL(OOD.UR_GROUP_NM, '')					AS UR_GROUP_NM					/* 회원 그룹명 : UR_GROUP.UR_GROUP_NM */
		     , IFNULL(OOD.UR_USER_ID, '')					AS UR_USER_ID					/* 회원 PK : UR_USER.UR_USER_ID */
			 , IFNULL(OOD.LOGIN_ID, '')					    AS LOGIN_ID						/* 회원 로그인 ID : UR_USER.LOGIN_ID */
		     , IFNULL(OOD.UR_EMPLOYEE_CD, '')				AS UR_EMPLOYEE_CD				/* 임직원사번 : UR_EMPLOYEE.UR_EMPLOYEE_CD */
		     , IFNULL(OOD.BUYER_NM	, '') 					AS BUYER_NM						/* 주문자 명 */
		     , CASE WHEN IFNULL(OOD.BUYER_HP	, '') LIKE ('%-%') THEN IFNULL(OOD.BUYER_HP	, '')
					WHEN IFNULL(OOD.BUYER_HP	, '') NOT LIKE ('%-%') THEN
						CASE LENGTH(IFNULL(OOD.BUYER_HP	, ''))
							WHEN 11 THEN CONCAT(LEFT(IFNULL(OOD.BUYER_HP	, ''), 3), '-', MID(IFNULL(OOD.BUYER_HP	, ''), 4, 4), '-', RIGHT(IFNULL(OOD.BUYER_HP	, ''), 4))
							WHEN 10 THEN CONCAT(LEFT(IFNULL(OOD.BUYER_HP	, ''), 3), '-', MID(IFNULL(OOD.BUYER_HP	, ''), 4, 3), '-', RIGHT(IFNULL(OOD.BUYER_HP	, ''), 4))
							ELSE IFNULL(OOD.BUYER_HP	, '') END
					END AS BUYER_HP 				/* 주문자 핸드폰 */
		  	 , CASE WHEN IFNULL(OOD.BUYER_TEL	, '') LIKE ('%-%') THEN IFNULL(OOD.BUYER_TEL	, '')
					WHEN IFNULL(OOD.BUYER_TEL	, '') NOT LIKE ('%-%') THEN
						CASE LENGTH(IFNULL(OOD.BUYER_TEL	, ''))
							WHEN 11 THEN CONCAT(LEFT(IFNULL(OOD.BUYER_TEL	, ''), 3), '-', MID(IFNULL(OOD.BUYER_TEL	, ''), 4, 4), '-', RIGHT(IFNULL(OOD.BUYER_TEL	, ''), 4))
							WHEN 10 THEN CONCAT(LEFT(IFNULL(OOD.BUYER_TEL	, ''), 3), '-', MID(IFNULL(OOD.BUYER_TEL	, ''), 4, 3), '-', RIGHT(IFNULL(OOD.BUYER_TEL	, ''), 4))
							ELSE IFNULL(OOD.BUYER_TEL	, '') END
					END AS BUYER_TEL 				/* 주문자 연락처 */
		     , IFNULL(OOD.BUYER_MAIL, '') 					AS BUYER_MAIL					/* 주문자 이메일 */
		     , IFNULL((SELECT GDM.DIC_MST_NM
		         		FROM GB_DIC_MST GDM
		        	   WHERE GDM.GB_DIC_MST_ID = SCC1.GB_DIC_MST_ID), '') AS DELIVERY_TYPE	/* 배송타입명 */
		     , CASE WHEN OOD.SHIPPING_TYPE = '1' THEN '배송'
		            WHEN OOD.SHIPPING_TYPE = '2' THEN '교환배송'
		            WHEN OOD.SHIPPING_TYPE = '3' THEN '반품(역배송)'
		            WHEN OOD.SHIPPING_TYPE = '4' THEN '수거' ELSE '' END AS SHIPPING_TYPE		/* 주문타입명(배송등록타입명) */
			 , IFNULL(OOD.RECV_NM		, '')				AS RECV_NM						/* 수령인 명 */
			 , CASE WHEN IFNULL(OOD.RECV_HP	, '') LIKE ('%-%') THEN IFNULL(OOD.RECV_HP	, '')
					WHEN IFNULL(OOD.RECV_HP	, '') NOT LIKE ('%-%') THEN
						CASE LENGTH(IFNULL(OOD.RECV_HP	, ''))
							WHEN 11 THEN CONCAT(LEFT(IFNULL(OOD.RECV_HP	, ''), 3), '-', MID(IFNULL(OOD.RECV_HP	, ''), 4, 4), '-', RIGHT(IFNULL(OOD.RECV_HP	, ''), 4))
							WHEN 10 THEN CONCAT(LEFT(IFNULL(OOD.RECV_HP	, ''), 3), '-', MID(IFNULL(OOD.RECV_HP	, ''), 4, 3), '-', RIGHT(IFNULL(OOD.RECV_HP	, ''), 4))
							ELSE IFNULL(OOD.RECV_HP	, '') END
					END AS RECV_HP						/* 수령인 핸드폰 */
			 , CASE WHEN IFNULL(OOD.RECV_TEL	, '') LIKE ('%-%') THEN IFNULL(OOD.RECV_TEL	, '')
					WHEN IFNULL(OOD.RECV_TEL	, '') NOT LIKE ('%-%') THEN
						CASE LENGTH(IFNULL(OOD.RECV_TEL	, ''))
							WHEN 11 THEN CONCAT(LEFT(IFNULL(OOD.RECV_TEL	, ''), 3), '-', MID(IFNULL(OOD.RECV_TEL	, ''), 4, 4), '-', RIGHT(IFNULL(OOD.RECV_TEL	, ''), 4))
							WHEN 10 THEN CONCAT(LEFT(IFNULL(OOD.RECV_TEL	, ''), 3), '-', MID(IFNULL(OOD.RECV_TEL	, ''), 4, 3), '-', RIGHT(IFNULL(OOD.RECV_TEL	, ''), 4))
							ELSE IFNULL(OOD.RECV_TEL	, '') END
					END AS RECV_TEL 					/* 수령인 연락처 */
		     , IFNULL(OOD.RECV_MAIL		, '') 				AS RECV_MAIL					/* 수령인 이메일 */
		     , IFNULL(OOD.RECV_ZIP_CD	, '') 				AS RECV_ZIP_CD					/* 수령인 우편번호 */
		  	 , IFNULL(OOD.RECV_ADDR1	, '')				AS RECV_ADDR1					/* 수령인 주소 1 */
		  	 , IFNULL(OOD.RECV_ADDR2	, '')				AS RECV_ADDR2   				/* 수령인 주소 2 */
		  	 , IFNULL(OOD.RECV_BLD_NO	, '') 				AS RECV_BLD_NO					/* 건물번호 */
		  	 , IFNULL(OOD.DELIVERY_MSG	, '') 				AS DELIVERY_MSG					/* 배송요청사항 */
		  	 , IFNULL((SELECT GDM.DIC_MST_NM
		         		FROM GB_DIC_MST GDM
		        	   WHERE GDM.GB_DIC_MST_ID = SCC2.GB_DIC_MST_ID), '') AS DOOR_MSG_CD	/* 출입정보타입명 */
			 , IFNULL(OOD.DOOR_MSG	, '')					AS DOOR_MSG						/* 배송출입 현관 비밀번호(출입정보) */
  		     , OOD.PAY_TP									AS PAY_TP						/* 결제수단 : 공통코드(PAY_TP) */
  		     , IFNULL((SELECT GDM.DIC_MST_NM
		         		FROM GB_DIC_MST GDM
		        	   WHERE GDM.GB_DIC_MST_ID = SCC3.GB_DIC_MST_ID), '') 	AS ORDER_PAYMENT_TYPE_NM	/* 결제수단명 */
  		     , CAST(IFNULL(OOD.RECOMMENDED_PRICE, 0) * IFNULL(OOD.ORDER_CNT, 0) AS SIGNED INTEGER)		AS ORDER_PRICE	/* 주문금액 (정상가 : IL_GOODS.RECOMMENDED_PRICE * 주문수량) */
  		     , CAST(CASE WHEN SHIPPING_PRICE_RNK = 1 THEN IFNULL((SELECT OSP.SHIPPING_PRICE
  				  		 FROM OD_SHIPPING_PRICE OSP
 				 		WHERE OSP.OD_SHIPPING_PRICE_ID = OOD.OD_SHIPPING_PRICE_ID), 0)
 				 			ELSE 0 END AS  UNSIGNED INTEGER) AS SHIPPING_PRICE /* 배송비 */
		     , CAST(IFNULL(OOD.DIRECT_PRICE, 0) AS SIGNED INTEGER) AS DIRECT_PRICE 						/* 즉시할인금액 */
		     , CAST(IFNULL(OOD.DISCOUNT_EMPLOYEE_PRICE, 0) AS SIGNED INTEGER) AS DISCOUNT_EMPLOYEE_PRICE /*임직원 할인*/
  		     , CAST(IFNULL(OOD.COUPON_PRICE, 0) AS SIGNED INTEGER)		AS COUPON_PRICE					/* 쿠폰할인금액 */
-- 			 , CAST(IFNULL(OOD.DIRECT_PRICE, 0) AS SIGNED INTEGER)		AS DIRECT_PRICE
			 , CASE WHEN IFNULL(OOD.DIRECT_PRICE, 0) > 0 THEN
				(SELECT
					GROUP_CONCAT(DISTINCT FN_COMN_CODE_DIC(DISCOUNT_TP))
				FROM
					OD_ORDER_DETL_DISCOUNT
				WHERE
						OD_ORDER_DETL_ID = OOD.OD_ORDER_DETL_ID
					AND DISCOUNT_TP NOT IN ('GOODS_DISCOUNT_TP.GOODS_COUPON', 'GOODS_DISCOUNT_TP.CART_COUPON')
					)
				ELSE '' END
				AS DIRECT_PRICE_NM				/* 즉시할인명칭 */
  		     , CAST(IFNULL(OOD.PAID_PRICE, 0) AS SIGNED INTEGER)			AS PAID_PRICE					/* 결제금액 (쿠폰까지 할인된 금액) */
  		     , IFNULL(OS1.STATUS_NM, '') 					AS ORDER_STATUS_NM				/* 주문상태 명 */
  		     , IFNULL(OS2.STATUS_NM, '') 					AS CLAIM_STATUS_NM				/* 클레임상태 명 */
			 , IFNULL(OOD.IC_DT, '')						AS ORDER_IC_DT					/* 결제완료일자 */
			 , IFNULL(OOD.CREATE_DT, '') 					AS ORDER_CREATE_DT				/* 주문등록일자 */
			 , IFNULL(OOD.OD_ORDER_DETL_SEQ, '')			AS OD_ORDER_DETL_SEQ			/* 주문상세 순번(라인번호) 주문번호에 대한 순번 */
			 , OOD.WAREHOUSE_GRP_CD							AS WAREHOUSE_GRP_CD				/* 출고처그룹 코드 */
			 , IFNULL((SELECT GDM.DIC_MST_NM
		         		 FROM GB_DIC_MST GDM
		        	    WHERE GDM.GB_DIC_MST_ID = SCC4.GB_DIC_MST_ID), '') 	AS UR_WAREHOUSE_GRP_NM		/* 출고처그룹 명 */
			 , OOD.STORAGE_TYPE_CD							AS STORAGE_TYPE_CD							/* 상품보관방법 IL_ITEM.STORAGE_METHOD_TP 공통코드(ERP_STORAGE_TYPE) */
			 , IFNULL((SELECT GDM.DIC_MST_NM
		         		 FROM GB_DIC_MST GDM
		        	    WHERE GDM.GB_DIC_MST_ID = SCC5.GB_DIC_MST_ID), '') 	AS STORAGE_TYPE_NM			/* 보관방법명 */
  		     , OOD.GOODS_TP_CD								AS GOODS_TP_CD								/* 상품유형 IL_GOODS.GOODS_TP 공통코드(GOODS_TYPE) */
			 , IFNULL((SELECT IF(OOD.GOODS_DELIVERY_TYPE = 'GOODS_DELIVERY_TYPE.RESERVATION', CONCAT(GDM.DIC_MST_NM, '(예약)'), GDM.DIC_MST_NM)
		         		 FROM GB_DIC_MST GDM
		        	    WHERE GDM.GB_DIC_MST_ID = SCC6.GB_DIC_MST_ID), '') 	AS GOODS_TP_NM				/* 상품유형명 */
  		     , OOD.ORDER_STATUS_DELI_TP										AS ORDER_STATUS_DELI_TP		/* 주문상태 배송유형 공통코드: ORDER_STATUS_DELI_TP */
  		     , IFNULL((SELECT GDM.DIC_MST_NM
		         		 FROM GB_DIC_MST GDM
		        	    WHERE GDM.GB_DIC_MST_ID = SCC7.GB_DIC_MST_ID), '') 	AS ORDER_STATUS_DELI_TP_NM	/* 배송유형명 */
			 , OOD.SALE_TP_CD												AS SALE_TP_CD				/* 판매유형 IL_GOODS.SALE_TP 공통코드(SALE_TYPE) */
			 , IFNULL((SELECT GDM.DIC_MST_NM
		         		 FROM GB_DIC_MST GDM
		        	    WHERE GDM.GB_DIC_MST_ID = SCC8.GB_DIC_MST_ID), '') 	AS SALE_TP_NM				/* 판매유형명 */
			 , OOD.IL_CTGRY_STD_ID											AS IL_CTGRY_STD_ID			/* 표준카테고리 : IL_ITEM.IL_CTGRY_STD_ID */
			 , IFNULL((SELECT CONCAT(IF(IFNULL(IC1.CTGRY_NM, '') != '', IC1.CTGRY_NM, ''),
		       				  IF(IFNULL(IC2.CTGRY_NM, '') != '', CONCAT ('>', IC2.CTGRY_NM), ''),
		       				  IF(IFNULL(IC3.CTGRY_NM, '') != '', CONCAT ('>', IC3.CTGRY_NM), ''),
		       				  IF(IFNULL(IC4.CTGRY_NM, '') != '', CONCAT ('>', IC4.CTGRY_NM), ''),
		       				  IF(IFNULL(IC5.CTGRY_NM, '') != '', CONCAT ('>', IC5.CTGRY_NM), ''))
  				  		 FROM IL_CTGRY_PRNTS_INFO ICPI
				  		 LEFT OUTER JOIN IL_CTGRY IC1 ON ICPI.CTGRY_ID_DEPTH1 = IC1.IL_CTGRY_ID
				  		 LEFT OUTER JOIN IL_CTGRY IC2 ON ICPI.CTGRY_ID_DEPTH2 = IC2.IL_CTGRY_ID
				  		 LEFT OUTER JOIN IL_CTGRY IC3 ON ICPI.CTGRY_ID_DEPTH3 = IC3.IL_CTGRY_ID
				  		 LEFT OUTER JOIN IL_CTGRY IC4 ON ICPI.CTGRY_ID_DEPTH4 = IC4.IL_CTGRY_ID
				  		 LEFT OUTER JOIN IL_CTGRY IC5 ON ICPI.CTGRY_ID_DEPTH5 = IC5.IL_CTGRY_ID
				 		WHERE ICPI.IL_CTGRY_ID = OOD.IL_CTGRY_DISPLAY_ID), '')	AS IL_CTGRY_STD_NM		/* 표준카테고리명 */
			 , OOD.IL_CTGRY_DISPLAY_ID											AS IL_CTGRY_DISPLAY_ID	/* 전시카테고리 : IL_GOODS_CTGRY.IL_CTGRY_ID */
			 , IFNULL((SELECT CONCAT(IF(IFNULL(IC1.CTGRY_NM, '') != '', IC1.CTGRY_NM, ''),
		       				  IF(IFNULL(IC2.CTGRY_NM, '') != '', CONCAT ('>', IC2.CTGRY_NM), ''),
		       				  IF(IFNULL(IC3.CTGRY_NM, '') != '', CONCAT ('>', IC3.CTGRY_NM), ''),
		       				  IF(IFNULL(IC4.CTGRY_NM, '') != '', CONCAT ('>', IC4.CTGRY_NM), ''),
		       				  IF(IFNULL(IC5.CTGRY_NM, '') != '', CONCAT ('>', IC5.CTGRY_NM), ''))
  				  		 FROM IL_CTGRY_PRNTS_INFO ICPI
				  		 LEFT OUTER JOIN IL_CTGRY IC1 ON ICPI.CTGRY_ID_DEPTH1 = IC1.IL_CTGRY_ID
				  		 LEFT OUTER JOIN IL_CTGRY IC2 ON ICPI.CTGRY_ID_DEPTH2 = IC2.IL_CTGRY_ID
				 		 LEFT OUTER JOIN IL_CTGRY IC3 ON ICPI.CTGRY_ID_DEPTH3 = IC3.IL_CTGRY_ID
				  		 LEFT OUTER JOIN IL_CTGRY IC4 ON ICPI.CTGRY_ID_DEPTH4 = IC4.IL_CTGRY_ID
				  		 LEFT OUTER JOIN IL_CTGRY IC5 ON ICPI.CTGRY_ID_DEPTH5 = IC5.IL_CTGRY_ID
				 		WHERE ICPI.IL_CTGRY_ID = OOD.IL_CTGRY_DISPLAY_ID), '')	AS IL_CTGRY_DISPLAY_NM	/* 전시카테고리명 */
			 , OOD.IL_CTGRY_MALL_ID												AS IL_CTGRY_MALL_ID		/* 몰인몰카테고리 : IL_GOODS_CTGRY.IL_CTGRY_ID */
			 , IFNULL((SELECT CONCAT(IF(IFNULL(IC1.CTGRY_NM, '') != '', IC1.CTGRY_NM, ''),
		       				  IF(IFNULL(IC2.CTGRY_NM, '') != '', CONCAT ('>', IC2.CTGRY_NM), ''),
		       				  IF(IFNULL(IC3.CTGRY_NM, '') != '', CONCAT ('>', IC3.CTGRY_NM), ''),
		       				  IF(IFNULL(IC4.CTGRY_NM, '') != '', CONCAT ('>', IC4.CTGRY_NM), ''),
		       				  IF(IFNULL(IC5.CTGRY_NM, '') != '', CONCAT ('>', IC5.CTGRY_NM), ''))
  				  		 FROM IL_CTGRY_PRNTS_INFO ICPI
				  		 LEFT OUTER JOIN IL_CTGRY IC1 ON ICPI.CTGRY_ID_DEPTH1 = IC1.IL_CTGRY_ID
				 		 LEFT OUTER JOIN IL_CTGRY IC2 ON ICPI.CTGRY_ID_DEPTH2 = IC2.IL_CTGRY_ID
				  		 LEFT OUTER JOIN IL_CTGRY IC3 ON ICPI.CTGRY_ID_DEPTH3 = IC3.IL_CTGRY_ID
				 		 LEFT OUTER JOIN IL_CTGRY IC4 ON ICPI.CTGRY_ID_DEPTH4 = IC4.IL_CTGRY_ID
				 		 LEFT OUTER JOIN IL_CTGRY IC5 ON ICPI.CTGRY_ID_DEPTH5 = IC5.IL_CTGRY_ID
				 		WHERE ICPI.IL_CTGRY_ID = OOD.IL_CTGRY_MALL_ID), '')		AS IL_CTGRY_MALL_NM		/* 몰인몰카테고리명 */
			 , IFNULL(OOD.IL_ITEM_CD, '') 										AS IL_ITEM_CD			/* 품목코드 PK : IL_ITEM.IL_ITEM_CD */
		  	 , IFNULL(OOD.ITEM_BARCODE, '') 									AS ITEM_BARCODE			/* 품목바코드 : IL_ITEM.ITEM_BARCODE */
			 , IFNULL(II.ITEM_NM, '') 											AS ITEM_NM				/* 마스터 품목명 */
			 , IFNULL(OOD.IL_GOODS_ID, '') 										AS IL_GOODS_ID			/* 상품 PK : IL_GOODS.IL_GOODS_ID */
			 , IFNULL(OOD.GOODS_NM, '')											AS GOODS_NM				/* 상품명 : IL_GOODS.GOODS_NM */
			 , OOD.GOODS_DELIVERY_TYPE											AS GOODS_DELIVERY_TYPE	/* 배송유형 공통코드(GOODS_DELIVERY_TYPE) */
			 , IFNULL((SELECT GDM.DIC_MST_NM
		         		 FROM GB_DIC_MST GDM
		        	    WHERE GDM.GB_DIC_MST_ID = SCC9.GB_DIC_MST_ID), '') 		AS SCHEDULE_TYPE		/* 배송유형명 */
			 , OODD.GOODS_CYCLE_TP												AS GOODS_CYCLE_TP		/* 배송주기 공통코드:GOODS_CYCLE_TP */
			 , IFNULL((SELECT GDM.DIC_MST_NM
		         		 FROM GB_DIC_MST GDM
		        	    WHERE GDM.GB_DIC_MST_ID = SCC10.GB_DIC_MST_ID), '') 	AS ONE_DELIVERY_TERM_CD	/* 배송주기명 */
			 , OODD.GOODS_CYCLE_TERM_TP											AS GOODS_CYCLE_TERM_TP	/* 배송기간 공통코드:GOODS_CYCLE_TERM_TP */
			 , IFNULL((SELECT GDM.DIC_MST_NM
		         		 FROM GB_DIC_MST GDM
		        	    WHERE GDM.GB_DIC_MST_ID = SCC11.GB_DIC_MST_ID), '') 	AS ONE_CYCLE_TERM_TYPE_CD	/* 배송기간명 */
  		     , REGEXP_REPLACE(CONCAT(IF(IFNULL(MON_CNT, 0) > 0, '월', ''),
									 IF(IFNULL(TUE_CNT, 0) > 0, '/화', ''),
									 IF(IFNULL(WED_CNT, 0) > 0, '/수', ''),
									 IF(IFNULL(THU_CNT, 0) > 0, '/목', ''),
									 IF(IFNULL(FRI_CNT, 0) > 0, '/금', '')),'^/', '')	 AS DELIVERY_WEEK_NM	/* 배송요일 */
			 , IFNULL(OODD.ALLERGY_YN, 'N') 									AS ALLERGY_DIET_YN 		/* 알러지 식단 여부 */
			 , CAST(IFNULL(OOD.ORDER_CNT, 0) AS SIGNED INTEGER)								AS ORDER_CNT 			/* 주문 수량 */
			 , CAST(IFNULL(OOD.CLAIM_CNT, 0)AS SIGNED INTEGER) 								AS CANCEL_CNT 			/* 클레임 수량 */
			 , CAST(IFNULL(OOD.ORDER_CNT, 0) - IFNULL(OOD.CANCEL_CNT, 0) AS SIGNED INTEGER)	AS CANCEL_ABLE_CNT		/* 클레임 가능 수량 */
			 , CAST(IFNULL(OOD.ORDER_CNT, 0) - IFNULL(OOD.CANCEL_CNT, 0) AS SIGNED INTEGER)	AS WAREHOUSE_REQ_CNT		/* 출고요청수량 */
			 , CASE WHEN OOD.TAX_YN = 'Y' THEN '과세'
		  	 		WHEN OOD.TAX_YN = 'N' THEN '면세' ELSE '' END	AS TAX_NM					/* 과세 여부 */
			 , OOD.GOODS_DISCOUNT_TP								AS GOODS_DISCOUNT_TP	/* 할인유형(NONE, 우선, 올가, 즉시, 적용불가) : 공통코드(GOODS_DISCOUNT_TP) */
 			 , IFNULL((SELECT GDM.DIC_MST_NM
		         		 FROM GB_DIC_MST GDM
		        	    WHERE GDM.GB_DIC_MST_ID = SCC12.GB_DIC_MST_ID), '') AS GOODS_DISCOUNT_TP_NM		/* 할인유형 명 */
  		     , CAST(IFNULL(OOD.STANDARD_PRICE, 0) AS SIGNED INTEGER)				AS STANDARD_PRICE					/* 원가 : IL_GOODS.STANDARD_PRICE */
  		     , CAST(IFNULL(OOD.RECOMMENDED_PRICE, 0) AS SIGNED INTEGER)			AS RECOMMENDED_PRICE				/* 정상가 : IL_GOODS.RECOMMENDED_PRICE */
			 , CAST(IFNULL(OOD.SALE_PRICE, 0) AS SIGNED INTEGER)					AS SALE_PRICE						/* 판매가 : IL_GOODS.SALE_PRICE */
			 , OOD.ORDER_STATUS_CD									AS ORDER_DETAIL_STATUS_CD			/* 주문상세 상태 */
			 , IFNULL(OS3.STATUS_NM, '') 							AS ORDER_DETL_STATUS_NM				/* 주문상태 명 */
			 , OOD.CLAIM_STATUS_CD									AS CLAIM_DETAIL_STATUS_CD			/* 클레임상세 상태 */
			 , IFNULL(OS4.STATUS_NM, '') 							AS CLAIM_DETL_STATUS_NM				/* 클레임상세 상태명 */
			 , IFNULL(OS5.STATUS_NM, '') 							AS REFUND_STATUS_NM					/* 클레임상세 환불 상태명 */
			 , IFNULL(PCM.REASON_MSG, '')							AS CLAIM_REASON_NM					/* 클레임 사유 명 */
			 , IFNULL(OOD.CLAIM_REASON_MSG, '') 					AS CLAIM_REASON_MSG					/* 클레임상세 사유 */
			 , IFNULL(CAST(AES_DECRYPT(UNHEX(UU1.USER_NM)		, 'lssCSGhjyCBS!@34')AS CHAR), '')	AS DR_ID		/* 배송준비중 등록자명 */
			 , IFNULL(OOD.DR_DT, '')																AS DR_DT		/* 배송준비중 일자*/
			 , IFNULL(CAST(AES_DECRYPT(UNHEX(UU2.USER_NM)		, 'lssCSGhjyCBS!@34')AS CHAR), '')	AS DI_ID		/* 배송중 등록자명 */
			 , IFNULL(OOD.DI_DT, '')																AS DI_DT		/* 배송중 일자*/
			 , IFNULL(CAST(AES_DECRYPT(UNHEX(UU3.USER_NM)		, 'lssCSGhjyCBS!@34')AS CHAR), '')	AS DC_ID		/* 배송완료 등록자명 */
			 , IFNULL(OOD.DC_DT, '')																AS DC_DT		/* 배송완료 일자*/
			 , IFNULL(CAST(AES_DECRYPT(UNHEX(UU4.USER_NM)		, 'lssCSGhjyCBS!@34')AS CHAR), '')	AS BF_ID		/* 구매확정 등록자명 */
			 , IFNULL(OOD.BF_DT, '')																AS BF_DT		/* 구매확정 일자*/
			 , IFNULL(CAST(AES_DECRYPT(UNHEX(UU5.USER_NM)		, 'lssCSGhjyCBS!@34')AS CHAR), '')	AS CA_ID		/* 취소요청  등록자명 */
			 , IFNULL(OOD.CA_DT, '')																AS CA_DT		/* 취소요청  일자*/
			 , IFNULL(CAST(AES_DECRYPT(UNHEX(UU6.USER_NM)		, 'lssCSGhjyCBS!@34')AS CHAR), '')	AS CC_ID		/* 취소완료 등록자명 */
			 , IFNULL(OOD.CC_DT, '')																AS CC_DT		/* 취소완료 일자*/
			 , IFNULL(CAST(AES_DECRYPT(UNHEX(UU7.USER_NM)		, 'lssCSGhjyCBS!@34')AS CHAR), '')	AS RA_ID		/* 반품요청  등록자명 */
			 , IFNULL(OOD.RA_DT, '')																AS RA_DT		/* 반품요청  일자*/
			 , IFNULL(CAST(AES_DECRYPT(UNHEX(UU8.USER_NM)		, 'lssCSGhjyCBS!@34')AS CHAR), '')	AS RI_ID		/* 반품승인 등록자명 */
			 , IFNULL(OOD.RI_DT, '')																AS RI_DT		/* 반품승인 일자*/
			 , IFNULL(CAST(AES_DECRYPT(UNHEX(UU9.USER_NM)		, 'lssCSGhjyCBS!@34')AS CHAR), '')	AS RF_ID		/* 반품보류 등록자명 */
			 , IFNULL(OOD.RF_DT, '')																AS RF_DT		/* 반품보류 일자*/
			 , IFNULL(CAST(AES_DECRYPT(UNHEX(UU10.USER_NM)		, 'lssCSGhjyCBS!@34')AS CHAR), '')	AS RC_ID		/* 반품완료 등록자명 */
			 , IFNULL(OOD.RC_DT, '')																AS RC_DT		/* 반품완료 일자*/
			 , IFNULL(CAST(AES_DECRYPT(UNHEX(UU11.USER_NM)		, 'lssCSGhjyCBS!@34')AS CHAR), '')	AS EC_ID		/* 재배송 등록자명 */
			 , IFNULL(OOD.EC_DT, '')																AS EC_DT		/* 재배송 일자*/
			 , IFNULL(CAST(AES_DECRYPT(UNHEX(UU12.USER_NM)		, 'lssCSGhjyCBS!@34')AS CHAR), '')	AS CS_ID		/* CS환불 등록자명 */
			 , IFNULL(OOD.CS_DT, '')																AS CS_DT		/* CS환불 일자*/
			 , IFNULL(CAST(AES_DECRYPT(UNHEX(UU13.USER_NM)		, 'lssCSGhjyCBS!@34')AS CHAR), '')	AS FA_ID		/* 환불요청 등록자명 */
			 , IFNULL(OOD.FA_DT, '')																AS FA_DT		/* 환불요청 일자*/
			 , IFNULL(CAST(AES_DECRYPT(UNHEX(UU14.USER_NM)		, 'lssCSGhjyCBS!@34')AS CHAR), '')	AS FC_ID		/* 환불완료 등록자명 */
			 , IFNULL(OOD.FC_DT, '')																AS FC_DT		/* 환불완료 일자*/
 			 , IFNULL(CAST(AES_DECRYPT(UNHEX(UU15.USER_NM)		, 'lssCSGhjyCBS!@34')AS CHAR), '')	AS CR_ID		/* 클레임요청 등록자명 */
			 , IFNULL(OOD.CR_DT, '')																AS CR_DT		/* 클레임요청 일자*/
			 , IFNULL(CAST(AES_DECRYPT(UNHEX(UU16.USER_NM)		, 'lssCSGhjyCBS!@34')AS CHAR), '')	AS CE_ID		/* 클레임승인 등록자명 */
			 , IFNULL(OOD.CE_DT, '')																AS CE_DT		/* 클레임승인 일자*/
			 , IFNULL(CAST(AES_DECRYPT(UNHEX(UU17.USER_NM)		, 'lssCSGhjyCBS!@34')AS CHAR), '')	AS ORDER_IF_ID	/* 주문 I/F 등록자명 */
			 , IFNULL(OOD.ORDER_IF_DT, '')															AS ORDER_IF_DT	/* 주문 I/F 일자*/
			 , IFNULL(CAST(AES_DECRYPT(UNHEX(UU18.USER_NM)		, 'lssCSGhjyCBS!@34')AS CHAR), '')	AS SHIPPING_ID	/* 출고예정일 등록자명 */
			 , IFNULL(OOD.SHIPPING_DT, '')															AS SHIPPING_DT	/* 출고예정일 일자*/
			 , IFNULL(CAST(AES_DECRYPT(UNHEX(UU19.USER_NM)		, 'lssCSGhjyCBS!@34')AS CHAR), '')	AS DELIVERY_ID	/* 도착예정일 등록자명 */
			 , IFNULL(OOD.DELIVERY_DT, '')															AS DELIVERY_DT	/* 도착예정일 일자*/
			 , IFNULL(OTN.TRACKING_NO, '')															AS OD_TRACKING_NUMBER_ID	/* 송장번호 */
		  	 , IFNULL(PSC.SHIPPING_COMP_NM, '')														AS PS_SHIPPING_COMP_ID		/* 택배사명 */
		  	 , '' 																					AS CASH_RECEIPT_ISSUE_GBN_CD 	/* 현금영수증발급번호구분(임시) */
		  	 , '' 																					AS ISSUE_NUM 					/* 현금영수증발급여부(임시) */
		  	 , '' 																					AS ISSUE_YN 					/* 현금영수증발급승인번호(임시) */
			 , IFNULL(IUI2.MISS_REASON_NM, '') AS MISS_REASON /* 미출사유 */
			 , IFNULL(IUI2.MISS_MSG, '') AS MISS_MSG /* 미출상세사유 */
			 , IFNULL(OTN.TRACKING_NO, '') AS RETURN_OD_TRACKING_NUMBER_ID /* 반품송장번호 */
			 , IFNULL(PSC.SHIPPING_COMP_NM, '') AS RETURN_PS_SHIPPING_COMP_ID /* 반품택배사명 */
			 , IFNULL((SELECT GDM.DIC_MST_NM
					FROM GB_DIC_MST GDM
					WHERE GDM.GB_DIC_MST_ID = SCC14.GB_DIC_MST_ID), '') 	AS AGENT_TYPE_CD_NM	/* 에이전트타 */
			 , IFNULL((SELECT GDM.DIC_MST_NM
					FROM GB_DIC_MST GDM
					WHERE GDM.GB_DIC_MST_ID = SCC15.GB_DIC_MST_ID), '') 	AS BUYER_TYPE_CD_NM	/* 주문자유형 */
			 , IFNULL(OOD.COLLECTION_MALL_DETAIL_ID, '') AS COLLECTION_MALL_DETAIL_ID /* 수집몰 주문상세번호 */
			 , IFNULL(OOD.OUTMALL_DETAIL_ID, '') AS OUTMALL_DETAIL_ID /* 외부몰 주문상세번호 */
			 , IFNULL(OOD.UR_WAREHOUSE_NM, '') AS UR_WAREHOUSE_NM /* 출고처명 */
			 , IFNULL(PSP.TITLE, '') AS PS_SHIPPING_PATTERN_NM /* 배송패턴명 */
			 , IFNULL(UC.COMP_NM, '') AS UR_SUPPLIER_NM /* 공급업체명 */
			 , IFNULL(OOD.SETTLE_DT, '') AS SETTLE_DT  /* 정산일자 */
			 , ROUND(CASE WHEN OOD.GOODS_TP_CD LIKE 'GOODS_TYPE.GIFT%' THEN 0
						  WHEN OOD.BUYER_TYPE_CD = 'BUYER_TYPE.EMPLOYEE' THEN CAST(OOD.RECOMMENDED_PRICE * (IFNULL(OOD.ORDER_CNT, 0) - IFNULL(OOD.CANCEL_CNT, 0))  AS SIGNED INTEGER)
						  ELSE CAST(OOD.SALE_PRICE * (IFNULL(OOD.ORDER_CNT, 0) - IFNULL(OOD.CANCEL_CNT, 0))  AS SIGNED INTEGER)
					 END, 0) AS FINAL_GOODS_PRICE_VAT /* 예상상품매출(VAT 포함) */
			 , ROUND(CASE WHEN OOD.GOODS_TP_CD LIKE 'GOODS_TYPE.GIFT%' THEN 0
						  WHEN OOD.BUYER_TYPE_CD = 'BUYER_TYPE.EMPLOYEE' AND OOD.TAX_YN = 'Y' THEN CAST(OOD.RECOMMENDED_PRICE * (IFNULL(OOD.ORDER_CNT, 0) - IFNULL(OOD.CANCEL_CNT, 0))  AS SIGNED INTEGER) / 1.1
						  WHEN OOD.BUYER_TYPE_CD = 'BUYER_TYPE.EMPLOYEE' AND OOD.TAX_YN != 'Y' THEN CAST(OOD.RECOMMENDED_PRICE * (IFNULL(OOD.ORDER_CNT, 0) - IFNULL(OOD.CANCEL_CNT, 0))  AS SIGNED INTEGER)
						  WHEN OOD.TAX_YN = 'Y' THEN CAST(OOD.SALE_PRICE * (IFNULL(OOD.ORDER_CNT, 0) - IFNULL(OOD.CANCEL_CNT, 0))  AS SIGNED INTEGER) / 1.1
						  ELSE CAST(OOD.SALE_PRICE * (IFNULL(OOD.ORDER_CNT, 0) - IFNULL(OOD.CANCEL_CNT, 0)) AS SIGNED INTEGER)
					 END, 0) AS FINAL_GOODS_PRICE_NOT_VAT /* 예상상품매출(VAT 제외) */
				<!-- ,
					CASE WHEN OOD.BUYER_TYPE_CD = 'BUYER_TYPE.EMPLOYEE' THEN
						ROUND(OOD.RECOMMENDED_PRICE * OOD.CANCEL_ABLE_CNT)
					ELSE
						ROUND(OOD.SALE_PRICE * OOD.CANCEL_ABLE_CNT)
					END
					AS FINAL_GOODS_PRICE_VAT /* 예상상품매출(VAT포함) */
				,
					CASE WHEN OOD.BUYER_TYPE_CD = 'BUYER_TYPE.EMPLOYEE' THEN
						CASE WHEN OOD.TAX_YN = 'Y' THEN
							ROUND((OOD.RECOMMENDED_PRICE * OOD.CANCEL_ABLE_CNT) / 1.1)
						ELSE
							ROUND(OOD.RECOMMENDED_PRICE * OOD.CANCEL_ABLE_CNT)
						END
					ELSE
						CASE WHEN OOD.TAX_YN = 'Y' THEN
								ROUND((OOD.SALE_PRICE * OOD.CANCEL_ABLE_CNT) / 1.1)
						ELSE
								ROUND(OOD.SALE_PRICE * OOD.CANCEL_ABLE_CNT)
						END
					END
					 AS FINAL_GOODS_PRICE_NOT_VAT /* 예상상품매출(VAT제외) */ -->
			 ,
			   CASE WHEN II.ERP_CTGRY_LV4_ID IS NULL AND II.ERP_CTGRY_LV3_ID IS NULL AND II.ERP_CTGRY_LV2_ID IS NULL AND II.ERP_CTGRY_LV1_ID IS NULL THEN ''
					WHEN II.ERP_CTGRY_LV4_ID = '' AND II.ERP_CTGRY_LV3_ID = '' AND II.ERP_CTGRY_LV2_ID  = '' AND II.ERP_CTGRY_LV1_ID  = '' THEN ''
					WHEN II.ERP_CTGRY_LV4_ID IS NOT NULL THEN CONCAT(II.ERP_CTGRY_LV1_ID, '>',II.ERP_CTGRY_LV2_ID,'>', II.ERP_CTGRY_LV3_ID,'>',II.ERP_CTGRY_LV4_ID)
					WHEN II.ERP_CTGRY_LV3_ID IS NOT NULL THEN CONCAT(II.ERP_CTGRY_LV1_ID, '>',II.ERP_CTGRY_LV2_ID,'>', II.ERP_CTGRY_LV3_ID)
					WHEN II.ERP_CTGRY_LV2_ID IS NOT NULL THEN CONCAT(II.ERP_CTGRY_LV1_ID, '>',II.ERP_CTGRY_LV2_ID)
					WHEN II.ERP_CTGRY_LV1_ID IS NOT NULL THEN CONCAT(II.ERP_CTGRY_LV1_ID)
				END ERP_CTGRY_NM	/* ERP 카테고리 */
				/* CS환불 항목  START */
				, OOD.L_CLAIM_NAME				/* 클레임 사유(대) 사유명 */
				, OOD.M_CLAIM_NAME				/* 클레임 사유(중) 사유명 */
				, OOD.S_CLAIM_NAME				/* 귀책처 사유명 */
				, OOD.TARGET_TP				/* 귀책구분 B: 구매자, S: 판매자 */
				/* CS환불 항목 END */
				<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(claimState)">
					, IFNULL(T1.CONSULT_MSG, '') AS OD_CONSULT_MSG
				</if>
		  FROM (
				SELECT OOD.OD_ORDER_ID
				     , OOD.ODID
				     , OCD.OD_CLAIM_ID
				     , OOD.OD_ORDER_DETL_ID
				     , OD.OM_SELLERS_ID
				     , OD.COLLECTION_MALL_ID
				     , OD.OUTMALL_ID
				     , OD.UR_GROUP_NM
				     , OD.UR_USER_ID
				     , UU.LOGIN_ID
				     , OD.UR_EMPLOYEE_CD
				     , CAST(AES_DECRYPT(UNHEX(OD.BUYER_NM)	, 'lssCSGhjyCBS!@34') AS CHAR) AS BUYER_NM
				     , CAST(AES_DECRYPT(UNHEX(OD.BUYER_HP)	, 'lssCSGhjyCBS!@34') AS CHAR) AS BUYER_HP
				     , CAST(AES_DECRYPT(UNHEX(OD.BUYER_TEL)	, 'lssCSGhjyCBS!@34') AS CHAR) AS BUYER_TEL
				     , CAST(AES_DECRYPT(UNHEX(OD.BUYER_MAIL), 'lssCSGhjyCBS!@34') AS CHAR) AS BUYER_MAIL
				     , OSZ.DELIVERY_TYPE
				     , OSZ.SHIPPING_TYPE
				     , CAST(AES_DECRYPT(UNHEX(OSZ.RECV_NM)		, 'lssCSGhjyCBS!@34') AS CHAR) AS RECV_NM
				     , CAST(AES_DECRYPT(UNHEX(OSZ.RECV_HP)		, 'lssCSGhjyCBS!@34') AS CHAR) AS RECV_HP
				     , CAST(AES_DECRYPT(UNHEX(OSZ.RECV_TEL)		, 'lssCSGhjyCBS!@34') AS CHAR) AS RECV_TEL
				     , CAST(AES_DECRYPT(UNHEX(OSZ.RECV_MAIL)	, 'lssCSGhjyCBS!@34') AS CHAR) AS RECV_MAIL
				     , CAST(AES_DECRYPT(UNHEX(OSZ.RECV_ZIP_CD)	, 'lssCSGhjyCBS!@34') AS CHAR) AS RECV_ZIP_CD
				     , CAST(AES_DECRYPT(UNHEX(OSZ.RECV_ADDR1)	, 'lssCSGhjyCBS!@34') AS CHAR) AS RECV_ADDR1
				     , CAST(AES_DECRYPT(UNHEX(OSZ.RECV_ADDR2)	, 'lssCSGhjyCBS!@34') AS CHAR) AS RECV_ADDR2
				     , OSZ.RECV_BLD_NO
				     , OSZ.DELIVERY_MSG
				     , OSZ.DOOR_MSG_CD
				     , CAST(AES_DECRYPT(UNHEX(OSZ.DOOR_MSG)	, 'lssCSGhjyCBS!@34') AS CHAR) 		AS DOOR_MSG
				     , IFNULL(OP.PAY_TP, '') AS PAY_TP
				     , OOD.ORDER_CNT
				     , OOD.CANCEL_CNT
				     , OOD.ORDER_CNT - OOD.CANCEL_CNT AS CANCEL_ABLE_CNT
				     , OOD.TOT_SALE_PRICE
				     , OOD.OD_SHIPPING_PRICE_ID
					 , IF(OOD.OD_ORDER_DETL_DEPTH_ID != 3, IFNULL(OODC.DISCOUNT_PRICE,0), 0) AS DISCOUNT_EMPLOYEE_PRICE
					 , IF(OOD.OD_ORDER_DETL_DEPTH_ID != 3,
						CASE WHEN IFNULL(OODC.DISCOUNT_PRICE,0) > 0 THEN 0
						WHEN IFNULL(OODC.DISCOUNT_PRICE,0) = 0 THEN IFNULL(OOD.DIRECT_PRICE,0) END, IFNULL(OOD.DIRECT_PRICE,0)) AS DIRECT_PRICE
				     , (OOD.CART_COUPON_PRICE + OOD.GOODS_COUPON_PRICE) AS COUPON_PRICE
				     , OOD.PAID_PRICE
				     , ODS.STATUS_CD	AS ODS_STATUS_CD
					 , OCS.STATUS_CD	AS OCS_STATUS_CD
				     , OODT.IC_DT
				     , OODT.CREATE_DT
				     , UW.WAREHOUSE_GRP_CD
				     , OOD.OD_ORDER_DETL_SEQ
				     , OOD.STORAGE_TYPE_CD
				     , OOD.GOODS_TP_CD
				     , OOD.ORDER_STATUS_DELI_TP
				     , OOD.SALE_TP_CD
				     , OOD.IL_CTGRY_STD_ID
				     , OOD.IL_CTGRY_DISPLAY_ID
				     , OOD.IL_CTGRY_MALL_ID
				     , OOD.IL_ITEM_CD
				     , OOD.ITEM_BARCODE
				     , OOD.IL_GOODS_ID
				     , OOD.GOODS_NM
					 , OOD.GOODS_DELIVERY_TYPE
					 , OCD.CLAIM_CNT
					 , OOD.TAX_YN
					 , OOD.GOODS_DISCOUNT_TP
					 , OOD.STANDARD_PRICE
					 , OOD.RECOMMENDED_PRICE
					 , OOD.SALE_PRICE
					 , OOD.ORDER_STATUS_CD
					<choose>
						<when test="@kr.co.pulmuone.v1.comm.util.StringUtil@isEmpty(orderState) and @kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(claimState)">
							, OCD.CLAIM_STATUS_CD
						</when>
						<otherwise>
							, IFNULL((
							SELECT
								OCD.CLAIM_STATUS_CD
							FROM
								OD_CLAIM OC
							INNER JOIN OD_CLAIM_DETL OCD ON OC.OD_CLAIM_ID = OCD.OD_CLAIM_ID
							WHERE
								OC.OD_ORDER_ID = OD.OD_ORDER_ID
							AND OOD.OD_ORDER_DETL_ID = OCD.OD_ORDER_DETL_ID
							ORDER BY OC.OD_CLAIM_ID DESC
							LIMIT 1
							), '') AS CLAIM_STATUS_CD
						</otherwise>
					</choose>
				     , OCD.REFUND_STATUS_CD
				     , OC.PS_CLAIM_MALL_ID
				     , OC.CLAIM_REASON_MSG
				     , OOD.DR_ID
				     , OOD.DR_DT
				     , OOD.DI_ID
				     , OOD.DI_DT
				     , OOD.DC_ID
				     , OOD.DC_DT
				     , OOD.BF_ID
				     , OOD.BF_DT
			 		 , OCD.CA_ID
				     , OCD.CA_DT
			 		 , OCD.CC_ID
				     , OCD.CC_DT
			 		 , OCD.RA_ID
				     , OCD.RA_DT
				     , OCD.RI_ID
				     , OCD.RI_DT
				     , OCD.RF_ID
				     , OCD.RF_DT
				     , OCD.RC_ID
				     , OCD.RC_DT
				     , OCD.EC_ID
				     , OCD.EC_DT
				     , OCD.CS_ID
				     , OCD.CS_DT
				     , OCD.FA_ID
				     , OCD.FA_DT
				     , OCD.FC_ID
				     , OCD.FC_DT
				     , OCD.CR_ID
				     , OCD.CR_DT
				     , OCD.CE_ID
				     , OCD.CE_DT
				     , OOD.ORDER_IF_ID
				     , OOD.ORDER_IF_DT
				     , OOD.SHIPPING_ID
				     , OOD.SHIPPING_DT
				     , OOD.DELIVERY_ID
				     , OOD.DELIVERY_DT
						, OD.AGENT_TYPE_CD
						, OD.BUYER_TYPE_CD
						, OOD.COLLECTION_MALL_DETAIL_ID
						, OOD.OUTMALL_DETAIL_ID
						, UW.WAREHOUSE_NM AS UR_WAREHOUSE_NM
						, UW.PS_SHIPPING_PATTERN_ID
						, OOD.UR_SUPPLIER_ID
						, ROW_NUMBER() OVER(PARTITION BY TRIM(CONCAT(OD.OD_ORDER_ID, OOD.OD_SHIPPING_PRICE_ID)) ORDER BY OOD.OD_ORDER_DETL_ID ASC) AS SHIPPING_PRICE_RNK
						/* CS환불 항목  START */
						, IFNULL(PCC1.CLAIM_NM, '') 				AS L_CLAIM_NAME				/* 클레임 사유(대) 사유명 */
						, IFNULL(PCC2.CLAIM_NM, '') 				AS M_CLAIM_NAME				/* 클레임 사유(중) 사유명 */
						, IFNULL(PCC3.CLAIM_NM, '') 				AS S_CLAIM_NAME				/* 귀책처 사유명 */
						, IFNULL(PCC3.TARGET_TP, '')				AS TARGET_TP				/* 귀책 유형 */
						/* CS환불 항목 END */
						/* 정산 데이터 항목 START */
						, (SELECT MAX(ISS.SETTLE_DT) FROM IF_SALES_SETTLE_INFO ISS WHERE OOD.ODID = ISS.ODID AND OOD.OD_ORDER_DETL_SEQ = ISS.OD_ORDER_DETL_SEQ) AS SETTLE_DT
						/* 정산 데이터 항목 END */
				 FROM OD_ORDER OD
			     INNER JOIN OD_ORDER_DETL OOD 		ON OOD.OD_ORDER_ID 				= OD.OD_ORDER_ID
			     INNER JOIN OD_ORDER_DT OODT 		ON OOD.OD_ORDER_ID 				= OODT.OD_ORDER_ID
		   		 INNER JOIN OD_SHIPPING_ZONE OSZ 	ON OOD.OD_SHIPPING_ZONE_ID 		= OSZ.OD_SHIPPING_ZONE_ID
		   		 INNER JOIN UR_WAREHOUSE UW 		ON OOD.UR_WAREHOUSE_ID 			= UW.UR_WAREHOUSE_ID
				 LEFT OUTER JOIN UR_USER UU 		ON OD.UR_USER_ID 				= UU.UR_USER_ID
			<choose>
				<when test="@kr.co.pulmuone.v1.comm.util.StringUtil@isEmpty(orderState) and @kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(claimState)">
				 /* 클레임 테이블 START */
				 INNER JOIN OD_CLAIM OC				ON OOD.OD_ORDER_ID 		= OC.OD_ORDER_ID
				 INNER JOIN OD_CLAIM_DETL OCD 		ON OC.OD_CLAIM_ID 		= OCD.OD_CLAIM_ID
				 							   	   AND OCD.OD_ORDER_DETL_ID = OOD.OD_ORDER_DETL_ID
				  LEFT OUTER JOIN PS_CLAIM_BOS PCB 	ON OCD.PS_CLAIM_BOS_ID 	= PCB.PS_CLAIM_BOS_ID
		  	 									   AND PCB.DEL_YN 			= 'N'
		  	 									   AND PCB.USE_YN 			= 'Y'
 				  LEFT OUTER JOIN PS_CLAIM_BOS_SUPPLY PCBS ON OCD.PS_CLAIM_BOS_ID		 = PCBS.PS_CLAIM_BOS_ID
  		     											  AND OCD.PS_CLAIM_BOS_SUPPLY_ID = PCBS.PS_CLAIM_BOS_SUPPLY_ID
 				  LEFT OUTER JOIN PS_CLAIM_CTGRY PCC1 ON PCB.L_CLAIM_CTGRY_ID 			 = PCC1.PS_CLAIM_CTGRY_ID
 				  LEFT OUTER JOIN PS_CLAIM_CTGRY PCC2 ON PCB.M_CLAIM_CTGRY_ID 			 = PCC2.PS_CLAIM_CTGRY_ID
 				  LEFT OUTER JOIN PS_CLAIM_CTGRY PCC3 ON PCB.S_CLAIM_CTGRY_ID 			 = PCC3.PS_CLAIM_CTGRY_ID
 				  LEFT OUTER JOIN PS_CLAIM_SUPPLY_CTGRY PCSC1 ON PCSC1.SUPPLIER_CD 	 	 = PCBS.SUPPLIER_CD
              				    							 AND PCSC1.CLAIM_CD 	  	 = PCBS.CLAIM_CD
 				  LEFT OUTER JOIN PS_CLAIM_SUPPLY_CTGRY PCSC2 ON PCSC2.SUPPLIER_CD 	 	 = PCBS.NON_SUPPLIER_CD
 			  												 AND PCSC2.CLAIM_CD 	  	 = PCBS.NON_CLAIM_CD
 			  	  LEFT OUTER JOIN OD_CLAIM_ACCOUNT OCA 		  ON OC.OD_CLAIM_ID		 	 = OCA.OD_CLAIM_ID
				  /* 클레임 테이블 END */
				</when>
				<when test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(missStockStatus)">
				  /* 미출정보 테이블 START */
				  INNER JOIN IF_UNRELEASED_INFO IUI ON OD.ODID 					= IUI.ODID
					                               AND OOD.OD_ORDER_DETL_SEQ	= IUI.OD_ORDER_DETL_SEQ
				  LEFT OUTER JOIN OD_CLAIM_DETL OCD ON OCD.OD_ORDER_DETL_ID 	= OOD.OD_ORDER_DETL_ID
				  LEFT OUTER JOIN OD_CLAIM OC 		ON OC.OD_CLAIM_ID 			= OCD.OD_CLAIM_ID
												   AND OOD.OD_ORDER_ID 			= OC.OD_ORDER_ID
				  LEFT OUTER JOIN PS_CLAIM_BOS PCB 	ON OCD.PS_CLAIM_BOS_ID 	= PCB.PS_CLAIM_BOS_ID AND PCB.DEL_YN = 'N' AND PCB.USE_YN = 'Y'
				  LEFT OUTER JOIN PS_CLAIM_CTGRY PCC1 ON PCB.L_CLAIM_CTGRY_ID = PCC1.PS_CLAIM_CTGRY_ID
				  LEFT OUTER JOIN PS_CLAIM_CTGRY PCC2 ON PCB.M_CLAIM_CTGRY_ID = PCC2.PS_CLAIM_CTGRY_ID
				  LEFT OUTER JOIN PS_CLAIM_CTGRY PCC3 ON PCB.S_CLAIM_CTGRY_ID = PCC3.PS_CLAIM_CTGRY_ID
				  /* 미출정보 테이블 END */
				</when>
				<when test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(orderState) or @kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(claimState)">
				  /* 클레임 테이블 START */
				  LEFT OUTER JOIN OD_CLAIM_DETL OCD ON OCD.OD_ORDER_DETL_ID = OOD.OD_ORDER_DETL_ID
				  LEFT OUTER JOIN OD_CLAIM OC 		ON OC.OD_CLAIM_ID 		= OCD.OD_CLAIM_ID
												   AND OOD.OD_ORDER_ID		= OC.OD_ORDER_ID
				  LEFT OUTER JOIN PS_CLAIM_BOS PCB 	ON OCD.PS_CLAIM_BOS_ID 	= PCB.PS_CLAIM_BOS_ID AND PCB.DEL_YN = 'N' AND PCB.USE_YN = 'Y'
				  LEFT OUTER JOIN PS_CLAIM_CTGRY PCC1 ON PCB.L_CLAIM_CTGRY_ID = PCC1.PS_CLAIM_CTGRY_ID
				  LEFT OUTER JOIN PS_CLAIM_CTGRY PCC2 ON PCB.M_CLAIM_CTGRY_ID = PCC2.PS_CLAIM_CTGRY_ID
				  LEFT OUTER JOIN PS_CLAIM_CTGRY PCC3 ON PCB.S_CLAIM_CTGRY_ID = PCC3.PS_CLAIM_CTGRY_ID
				  /* 클레임 테이블 END */
				</when>
			</choose>
				  LEFT OUTER JOIN (SELECT OOD.OD_ORDER_ID
				                        , OS.STATUS_CD
				                        , MIN(OS.ORDER_STATUS_SORT) AS ORDER_STATUS_SORT
  							         FROM OD_STATUS OS
 							        INNER JOIN OD_ORDER_DETL OOD ON OOD.ORDER_STATUS_CD = OS.STATUS_CD
 							        WHERE OS.ORDER_STATUS_SORT != '99'
 							        GROUP BY OOD.OD_ORDER_ID
 							      ) ODS ON OOD.OD_ORDER_ID = ODS.OD_ORDER_ID
				  LEFT OUTER JOIN (SELECT OOD.OD_ORDER_ID
				                        , OS.STATUS_CD
	 							        , MIN(OS.CLAIM_STATUS_SORT) AS CLAIM_STATUS_SORT
  							         FROM OD_STATUS OS
 							        INNER JOIN OD_CLAIM_DETL OCD ON OCD.CLAIM_STATUS_CD 	= OS.STATUS_CD
 							        INNER JOIN OD_ORDER_DETL OOD ON OCD.OD_ORDER_DETL_ID 	= OOD.OD_ORDER_DETL_ID
 							  		WHERE OS.CLAIM_STATUS_SORT != '99'
 							  		GROUP BY OOD.OD_ORDER_ID
 								  ) OCS ON OOD.OD_ORDER_ID = OCS.OD_ORDER_ID
				  LEFT OUTER JOIN OD_ORDER_DETL_DISCOUNT OODC ON OD.OD_ORDER_ID = OODC.OD_ORDER_ID AND OOD.OD_ORDER_DETL_ID = OODC.OD_ORDER_DETL_ID AND OODC.DISCOUNT_TP = 'GOODS_DISCOUNT_TP.EMPLOYEE'
				LEFT OUTER JOIN (
						SELECT
							OP.OD_ORDER_ID
							, OPM.PAY_TP
						FROM
							OD_PAYMENT OP
						INNER JOIN
							OD_PAYMENT_MASTER OPM ON OP.OD_PAYMENT_MASTER_ID = OPM.OD_PAYMENT_MASTER_ID
						WHERE
							OPM.TYPE = 'G'
				  ) OP ON OP.OD_ORDER_ID = OD.OD_ORDER_ID
			     WHERE 1=1
				<include refid="searchOrderDetailItem" />
					GROUP BY OD_ORDER_DETL_ID
			   ) OOD
		   LEFT OUTER JOIN OM_SELLERS OS 			ON OOD.OM_SELLERS_ID 		= OS.OM_SELLERS_ID
		   LEFT OUTER JOIN UR_USER UU 				ON OOD.UR_USER_ID 			= UU.UR_USER_ID
		   LEFT OUTER JOIN OD_TRACKING_NUMBER OTN 	ON OOD.OD_ORDER_DETL_ID 	= OTN.OD_ORDER_DETL_ID
		   LEFT OUTER JOIN PS_SHIPPING_COMP PSC 	ON OTN.PS_SHIPPING_COMP_ID 	= PSC.PS_SHIPPING_COMP_ID
		   LEFT OUTER JOIN OD_ORDER_DETL_DAILY OODD ON OOD.OD_ORDER_DETL_ID 	= OODD.OD_ORDER_DETL_ID
		   										   AND OOD.OD_ORDER_ID			= OODD.OD_ORDER_ID
		   LEFT OUTER JOIN IL_ITEM II 				ON OOD.IL_ITEM_CD 			= II.IL_ITEM_CD
		   LEFT OUTER JOIN ST_COMN_CODE SCC1		ON SCC1.ST_COMN_CODE_ID		= OOD.DELIVERY_TYPE
		   										   AND SCC1.ST_COMN_CODE_MST_CD = 'DELIVERY_TYPE'
		   LEFT OUTER JOIN ST_COMN_CODE SCC2		ON SCC2.ST_COMN_CODE_ID		= OOD.DOOR_MSG_CD
		   										   AND SCC2.ST_COMN_CODE_MST_CD = 'ACCESS_INFORMATION'
		   LEFT OUTER JOIN ST_COMN_CODE SCC3		ON SCC3.ST_COMN_CODE_ID		= OOD.PAY_TP
												   AND SCC3.ST_COMN_CODE_MST_CD = 'PAY_TP'
   		   LEFT OUTER JOIN ST_COMN_CODE SCC4		ON SCC4.ST_COMN_CODE_ID		= OOD.WAREHOUSE_GRP_CD
												   AND SCC4.ST_COMN_CODE_MST_CD = 'WAREHOUSE_GROUP'
   		   LEFT OUTER JOIN ST_COMN_CODE SCC5		ON SCC5.ST_COMN_CODE_ID		= OOD.STORAGE_TYPE_CD
												   AND SCC5.ST_COMN_CODE_MST_CD = 'ERP_STORAGE_TYPE'
   		   LEFT OUTER JOIN ST_COMN_CODE SCC6		ON SCC6.ST_COMN_CODE_ID		= OOD.GOODS_TP_CD
												   AND SCC6.ST_COMN_CODE_MST_CD = 'GOODS_TYPE'
   		   LEFT OUTER JOIN ST_COMN_CODE SCC7		ON SCC7.ST_COMN_CODE_ID		= OOD.ORDER_STATUS_DELI_TP
												   AND SCC7.ST_COMN_CODE_MST_CD = 'ORDER_STATUS_DELI_TP'
   		   LEFT OUTER JOIN ST_COMN_CODE SCC8		ON SCC8.ST_COMN_CODE_ID		= OOD.SALE_TP_CD
												   AND SCC8.ST_COMN_CODE_MST_CD = 'SALE_TYPE'
   		   LEFT OUTER JOIN ST_COMN_CODE SCC9		ON SCC9.ST_COMN_CODE_ID		= OOD.GOODS_DELIVERY_TYPE
												   AND SCC9.ST_COMN_CODE_MST_CD = 'GOODS_DELIVERY_TYPE'
   		   LEFT OUTER JOIN ST_COMN_CODE SCC10		ON SCC10.ST_COMN_CODE_ID	= OODD.GOODS_CYCLE_TP
												   AND SCC10.ST_COMN_CODE_MST_CD= 'GOODS_CYCLE_TP'
   		   LEFT OUTER JOIN ST_COMN_CODE SCC11		ON SCC11.ST_COMN_CODE_ID	= OODD.GOODS_CYCLE_TERM_TP
												   AND SCC11.ST_COMN_CODE_MST_CD= 'GOODS_CYCLE_TERM_TP'
   		   LEFT OUTER JOIN ST_COMN_CODE SCC12		ON SCC12.ST_COMN_CODE_ID	= OOD.GOODS_DISCOUNT_TP
												   AND SCC12.ST_COMN_CODE_MST_CD= 'GOODS_DISCOUNT_TP'

		   LEFT OUTER JOIN OD_STATUS OS1			ON OS1.STATUS_CD			= OOD.ODS_STATUS_CD
		   LEFT OUTER JOIN OD_STATUS OS2			ON OS2.STATUS_CD			= OOD.OCS_STATUS_CD
		   LEFT OUTER JOIN OD_STATUS OS3			ON OS3.STATUS_CD			= OOD.ORDER_STATUS_CD
		   LEFT OUTER JOIN OD_STATUS OS4			ON OS4.STATUS_CD			= OOD.CLAIM_STATUS_CD
		   LEFT OUTER JOIN OD_STATUS OS5			ON OS5.STATUS_CD			= OOD.REFUND_STATUS_CD
		   LEFT OUTER JOIN PS_CLAIM_MALL PCM		ON PCM.PS_CLAIM_MALL_ID 	= OOD.PS_CLAIM_MALL_ID
		   										   AND PCM.DEL_YN = 'N'
		   										   AND PCM.USE_YN = 'Y'
		   LEFT OUTER JOIN UR_USER UU1				ON UU1.UR_USER_ID			= OOD.DR_ID
		   LEFT OUTER JOIN UR_USER UU2				ON UU2.UR_USER_ID			= OOD.DI_ID
		   LEFT OUTER JOIN UR_USER UU3				ON UU3.UR_USER_ID			= OOD.DC_ID
		   LEFT OUTER JOIN UR_USER UU4				ON UU4.UR_USER_ID			= OOD.BF_ID
		   LEFT OUTER JOIN UR_USER UU5				ON UU5.UR_USER_ID			= OOD.CA_ID
		   LEFT OUTER JOIN UR_USER UU6				ON UU6.UR_USER_ID			= OOD.CC_ID
		   LEFT OUTER JOIN UR_USER UU7				ON UU7.UR_USER_ID			= OOD.RA_ID
		   LEFT OUTER JOIN UR_USER UU8				ON UU8.UR_USER_ID			= OOD.RI_ID
		   LEFT OUTER JOIN UR_USER UU9				ON UU9.UR_USER_ID			= OOD.RF_ID
		   LEFT OUTER JOIN UR_USER UU10				ON UU10.UR_USER_ID			= OOD.RC_ID
		   LEFT OUTER JOIN UR_USER UU11				ON UU11.UR_USER_ID			= OOD.EC_ID
		   LEFT OUTER JOIN UR_USER UU12				ON UU12.UR_USER_ID			= OOD.CS_ID
		   LEFT OUTER JOIN UR_USER UU13				ON UU13.UR_USER_ID			= OOD.FA_ID
		   LEFT OUTER JOIN UR_USER UU14				ON UU14.UR_USER_ID			= OOD.FC_ID
		   LEFT OUTER JOIN UR_USER UU15				ON UU15.UR_USER_ID			= OOD.CR_ID
		   LEFT OUTER JOIN UR_USER UU16				ON UU16.UR_USER_ID			= OOD.CE_ID
		   LEFT OUTER JOIN UR_USER UU17				ON UU17.UR_USER_ID			= OOD.ORDER_IF_ID
		   LEFT OUTER JOIN UR_USER UU18				ON UU18.UR_USER_ID			= OOD.SHIPPING_ID
		   LEFT OUTER JOIN UR_USER UU19				ON UU19.UR_USER_ID			= OOD.DELIVERY_ID
		   LEFT OUTER JOIN (
				SELECT
					IUI.*
			 		, IFNULL(SCC13.DIC_MST_NM, '') AS MISS_REASON_NM /* 미출상세사유 */
				FROM IF_UNRELEASED_INFO IUI
				LEFT JOIN (
					SELECT
						SCC.ST_COMN_CODE_ID
						, GDM.DIC_MST_NM
					FROM ST_COMN_CODE SCC
						LEFT JOIN GB_DIC_MST GDM
							ON GDM.GB_DIC_MST_ID = SCC.GB_DIC_MST_ID
					WHERE
						SCC.ST_COMN_CODE_MST_CD = 'MISS_STOCK_REASON'
				) SCC13
					ON SCC13.ST_COMN_CODE_ID = IUI.MISS_REASON
		   )IUI2	ON OOD.ODID 				= IUI2.ODID
		   			AND OOD.OD_ORDER_DETL_SEQ	= IUI2.OD_ORDER_DETL_SEQ
		LEFT OUTER JOIN ST_COMN_CODE SCC14		ON SCC14.ST_COMN_CODE_ID	= OOD.AGENT_TYPE_CD
													AND SCC14.ST_COMN_CODE_MST_CD = 'AGENT_TYPE'
		LEFT OUTER JOIN ST_COMN_CODE SCC15		ON SCC15.ST_COMN_CODE_ID	= OOD.BUYER_TYPE_CD
													AND SCC15.ST_COMN_CODE_MST_CD = 'BUYER_TYPE'
		LEFT OUTER JOIN PS_SHIPPING_PATTERN PSP ON OOD.PS_SHIPPING_PATTERN_ID = PSP.PS_SHIPPING_PATTERN_ID
		LEFT OUTER JOIN UR_SUPPLIER US ON OOD.UR_SUPPLIER_ID = US.UR_SUPPLIER_ID
		LEFT OUTER JOIN UR_COMPANY UC ON US.UR_COMPANY_ID = UC.UR_COMPANY_ID AND UC.USE_YN = 'Y' AND UC.COMP_TP IN ('COMPANY_TYPE.HEADQUARTERS','COMPANY_TYPE.SUPPLIER')
		<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(claimState)">
			LEFT OUTER JOIN (SELECT OC.OD_ORDER_ID, GROUP_CONCAT(DISTINCT CONCAT('['
				, CASE WHEN ('9000000000000000000' = OC.CREATE_ID) THEN 'system' ELSE CAST(AES_DECRYPT(UNHEX(UU.USER_NM), 'lssCSGhjyCBS!@34') AS CHAR) END, ',', OC.CREATE_ID, ',', OC.CREATE_DT, ']'
				, CONSULT_MSG)) AS CONSULT_MSG
				FROM OD_CONSULT OC
				LEFT OUTER JOIN UR_USER UU ON OC.CREATE_ID = UU.UR_USER_ID
				WHERE OC.DEL_YN = 'N'
				AND length(OC.CONSULT_MSG) > 0
				AND OC.OD_ORDER_ID in(SELECT OD.OD_ORDER_ID
										FROM OD_ORDER OD
											INNER JOIN OD_ORDER_DETL OOD ON OOD.OD_ORDER_ID = OD.OD_ORDER_ID
											LEFT OUTER JOIN OD_CLAIM OC ON OOD.OD_ORDER_ID = OC.OD_ORDER_ID
											LEFT OUTER JOIN	OD_CLAIM_DETL OCD ON OC.OD_CLAIM_ID = OCD.OD_CLAIM_ID AND OCD.OD_ORDER_DETL_ID = OOD.OD_ORDER_DETL_ID
											LEFT OUTER JOIN OD_SHIPPING_ZONE OSZ 	ON OOD.OD_SHIPPING_ZONE_ID 		= OSZ.OD_SHIPPING_ZONE_ID
										WHERE 1=1
											<include refid="searchOrderDetailItem" />
										)
			GROUP BY OC.OD_ORDER_ID) T1 ON OOD.OD_ORDER_ID = T1.OD_ORDER_ID
		</if>
		<include refid="searchOutOrderOrderBy" />
	</select>

	<select id="getOrderDetailExcelListMap" resultType="java.util.LinkedHashMap">
		/*	orderList.getOrderDetailExcelListMap  */
		SELECT OOD.OD_ORDER_ID AS odOrderId											/* 주문 PK */
		, OOD.ODID AS odid															/* 주문번호 */
		, OOD.OD_CLAIM_ID AS odClaimId												/* 주문 클레임 PK */
		, OOD.OD_ORDER_DETL_ID AS odOrderDetlId										/* 주문상세 PK */
		, OOD.OD_ORDER_DETL_SEQ AS odOrderDetlSeq									/* 주문상세 순번(라인번호) 주문번호에 대한 순번 */
		, OOD.OM_SELLERS_ID AS omSellersId											/* 판매처 PK */
		, IFNULL(OS.SELLERS_NM, '')					AS sellersNm 					/* 판매처명 */
		, IFNULL(OOD.COLLECTION_MALL_ID, '')			AS collectionMallId			/* 수집몰주문번호 (이지어드민 PACK, SEQ 조합) */
		, IFNULL(OOD.OUTMALL_ID, '')					AS outmallid				/* 외부몰주문번호(이지어드민 ORDER_ID) */
		, IFNULL(OOD.UR_GROUP_NM, '')					AS urGroupNm				/* 회원 그룹명 : UR_GROUP.UR_GROUP_NM */
		, IFNULL(OOD.UR_USER_ID, '')					AS urUserId					/* 회원 PK : UR_USER.UR_USER_ID */
		, IFNULL(OOD.LOGIN_ID, '')					    AS loginId					/* 회원 로그인 ID : UR_USER.LOGIN_ID */
		, IFNULL(OOD.UR_EMPLOYEE_CD, '')				AS urEmployeeCd				/* 임직원사번 : UR_EMPLOYEE.UR_EMPLOYEE_CD */
		, IFNULL(OOD.BUYER_NM	, '') 					AS buyerNm					/* 주문자 명 */
		, CASE WHEN IFNULL(OOD.BUYER_HP	, '') LIKE ('%-%') THEN IFNULL(OOD.BUYER_HP	, '')
		WHEN IFNULL(OOD.BUYER_HP	, '') NOT LIKE ('%-%') THEN
		CASE LENGTH(IFNULL(OOD.BUYER_HP	, ''))
		WHEN 11 THEN CONCAT(LEFT(IFNULL(OOD.BUYER_HP	, ''), 3), '-', MID(IFNULL(OOD.BUYER_HP	, ''), 4, 4), '-', RIGHT(IFNULL(OOD.BUYER_HP	, ''), 4))
		WHEN 10 THEN CONCAT(LEFT(IFNULL(OOD.BUYER_HP	, ''), 3), '-', MID(IFNULL(OOD.BUYER_HP	, ''), 4, 3), '-', RIGHT(IFNULL(OOD.BUYER_HP	, ''), 4))
		ELSE IFNULL(OOD.BUYER_HP	, '') END
		END AS buyerHp 				/* 주문자 핸드폰 */
		, CASE WHEN IFNULL(OOD.BUYER_TEL	, '') LIKE ('%-%') THEN IFNULL(OOD.BUYER_TEL	, '')
		WHEN IFNULL(OOD.BUYER_TEL	, '') NOT LIKE ('%-%') THEN
		CASE LENGTH(IFNULL(OOD.BUYER_TEL	, ''))
		WHEN 11 THEN CONCAT(LEFT(IFNULL(OOD.BUYER_TEL	, ''), 3), '-', MID(IFNULL(OOD.BUYER_TEL	, ''), 4, 4), '-', RIGHT(IFNULL(OOD.BUYER_TEL	, ''), 4))
		WHEN 10 THEN CONCAT(LEFT(IFNULL(OOD.BUYER_TEL	, ''), 3), '-', MID(IFNULL(OOD.BUYER_TEL	, ''), 4, 3), '-', RIGHT(IFNULL(OOD.BUYER_TEL	, ''), 4))
		ELSE IFNULL(OOD.BUYER_TEL	, '') END
		END AS buyerTel 				/* 주문자 연락처 */
		, IFNULL(OOD.BUYER_MAIL, '') 					AS buyerMail					/* 주문자 이메일 */
		, IFNULL((SELECT GDM.DIC_MST_NM
		FROM GB_DIC_MST GDM
		WHERE GDM.GB_DIC_MST_ID = SCC1.GB_DIC_MST_ID), '') AS deliveryType	/* 배송타입명 */
		, CASE WHEN OOD.SHIPPING_TYPE = '1' THEN '배송'
		WHEN OOD.SHIPPING_TYPE = '2' THEN '교환배송'
		WHEN OOD.SHIPPING_TYPE = '3' THEN '반품(역배송)'
		WHEN OOD.SHIPPING_TYPE = '4' THEN '수거' ELSE '' END AS shippingType		/* 주문타입명(배송등록타입명) */
		, IFNULL(OOD.RECV_NM		, '')				AS recvNm						/* 수령인 명 */
		, CASE WHEN IFNULL(OOD.RECV_HP	, '') LIKE ('%-%') THEN IFNULL(OOD.RECV_HP	, '')
		WHEN IFNULL(OOD.RECV_HP	, '') NOT LIKE ('%-%') THEN
		CASE LENGTH(IFNULL(OOD.RECV_HP	, ''))
		WHEN 11 THEN CONCAT(LEFT(IFNULL(OOD.RECV_HP	, ''), 3), '-', MID(IFNULL(OOD.RECV_HP	, ''), 4, 4), '-', RIGHT(IFNULL(OOD.RECV_HP	, ''), 4))
		WHEN 10 THEN CONCAT(LEFT(IFNULL(OOD.RECV_HP	, ''), 3), '-', MID(IFNULL(OOD.RECV_HP	, ''), 4, 3), '-', RIGHT(IFNULL(OOD.RECV_HP	, ''), 4))
		ELSE IFNULL(OOD.RECV_HP	, '') END
		END AS recvHp						/* 수령인 핸드폰 */
		, CASE WHEN IFNULL(OOD.RECV_TEL	, '') LIKE ('%-%') THEN IFNULL(OOD.RECV_TEL	, '')
		WHEN IFNULL(OOD.RECV_TEL	, '') NOT LIKE ('%-%') THEN
		CASE LENGTH(IFNULL(OOD.RECV_TEL	, ''))
		WHEN 11 THEN CONCAT(LEFT(IFNULL(OOD.RECV_TEL	, ''), 3), '-', MID(IFNULL(OOD.RECV_TEL	, ''), 4, 4), '-', RIGHT(IFNULL(OOD.RECV_TEL	, ''), 4))
		WHEN 10 THEN CONCAT(LEFT(IFNULL(OOD.RECV_TEL	, ''), 3), '-', MID(IFNULL(OOD.RECV_TEL	, ''), 4, 3), '-', RIGHT(IFNULL(OOD.RECV_TEL	, ''), 4))
		ELSE IFNULL(OOD.RECV_TEL	, '') END
		END AS recvTel 					/* 수령인 연락처 */
		, IFNULL(OOD.RECV_MAIL		, '') 				AS recvMail					/* 수령인 이메일 */
		, IFNULL(OOD.RECV_ZIP_CD	, '') 				AS recvZipCd					/* 수령인 우편번호 */
		, IFNULL(OOD.RECV_ADDR1	, '')				AS recvAddr1					/* 수령인 주소 1 */
		, IFNULL(OOD.RECV_ADDR2	, '')				AS recvAddr2   				/* 수령인 주소 2 */
		, IFNULL(OOD.RECV_BLD_NO	, '') 				AS recvBldNo					/* 건물번호 */
		, IFNULL(OOD.DELIVERY_MSG	, '') 				AS deliveryMsg					/* 배송요청사항 */
		, IFNULL((SELECT GDM.DIC_MST_NM
		FROM GB_DIC_MST GDM
		WHERE GDM.GB_DIC_MST_ID = SCC2.GB_DIC_MST_ID), '') AS doorMsgCd	/* 출입정보타입명 */
		, IFNULL(OOD.DOOR_MSG	, '')					AS doorMsg						/* 배송출입 현관 비밀번호(출입정보) */
		, OOD.PAY_TP									AS payTp						/* 결제수단 : 공통코드(PAY_TP) */
		, IFNULL((SELECT GDM.DIC_MST_NM
		FROM GB_DIC_MST GDM
		WHERE GDM.GB_DIC_MST_ID = SCC3.GB_DIC_MST_ID), '') 	AS orderPaymentTypeNm	/* 결제수단명 */
		, CAST(IFNULL(OOD.RECOMMENDED_PRICE, 0) * IFNULL(OOD.ORDER_CNT, 0) AS SIGNED INTEGER)		AS orderPrice	/* 주문금액 (정상가 : IL_GOODS.RECOMMENDED_PRICE * 주문수량) */
		, CAST(CASE WHEN SHIPPING_PRICE_RNK = 1 THEN IFNULL((SELECT OSP.SHIPPING_PRICE
		FROM OD_SHIPPING_PRICE OSP
		WHERE OSP.OD_SHIPPING_PRICE_ID = OOD.OD_SHIPPING_PRICE_ID), 0)
		ELSE 0 END AS  UNSIGNED INTEGER) AS shippingPrice /* 배송비 */
		, CAST(IFNULL(OOD.DIRECT_PRICE, 0) AS SIGNED INTEGER) AS directPrice 						/* 즉시할인금액 */
		, CAST(IFNULL(OOD.DISCOUNT_EMPLOYEE_PRICE, 0) AS SIGNED INTEGER) AS discountEmployeePrice /*임직원 할인*/
		, CAST(IFNULL(OOD.COUPON_PRICE, 0) AS SIGNED INTEGER)		AS couponPrice					/* 쿠폰할인금액 */
		-- 			 , CAST(IFNULL(OOD.DIRECT_PRICE, 0) AS SIGNED INTEGER)		AS directPrice
		, CASE WHEN IFNULL(OOD.DIRECT_PRICE, 0) > 0 THEN
		(SELECT
		GROUP_CONCAT(DISTINCT FN_COMN_CODE_DIC(DISCOUNT_TP))
		FROM
		OD_ORDER_DETL_DISCOUNT
		WHERE
		OD_ORDER_DETL_ID = OOD.OD_ORDER_DETL_ID
		AND DISCOUNT_TP NOT IN ('GOODS_DISCOUNT_TP.GOODS_COUPON', 'GOODS_DISCOUNT_TP.CART_COUPON')
		)
		ELSE '' END
		AS directPriceNm				/* 즉시할인명칭 */
		, CAST(IFNULL(OOD.PAID_PRICE, 0) AS SIGNED INTEGER)			AS paidPrice					/* 결제금액 (쿠폰까지 할인된 금액) */
		, IFNULL(OS1.STATUS_NM, '') 					AS orderStatusNm				/* 주문상태 명 */
		, IFNULL(OS2.STATUS_NM, '') 					AS claimStatusNm				/* 클레임상태 명 */
		, IFNULL(OOD.IC_DT, '')						AS orderIcDt					/* 결제완료일자 */
		, IFNULL(OOD.CREATE_DT, '') 					AS orderCreateDt				/* 주문등록일자 */
		, IFNULL(OOD.OD_ORDER_DETL_SEQ, '')			AS odOrderDetlSeq			/* 주문상세 순번(라인번호) 주문번호에 대한 순번 */
		, OOD.WAREHOUSE_GRP_CD							AS warehouseGrpCd				/* 출고처그룹 코드 */
		, IFNULL((SELECT GDM.DIC_MST_NM
		FROM GB_DIC_MST GDM
		WHERE GDM.GB_DIC_MST_ID = SCC4.GB_DIC_MST_ID), '') 	AS urWarehouseGrpNm		/* 출고처그룹 명 */
		, OOD.STORAGE_TYPE_CD							AS storageTypeCd							/* 상품보관방법 IL_ITEM.STORAGE_METHOD_TP 공통코드(ERP_STORAGE_TYPE) */
		, IFNULL((SELECT GDM.DIC_MST_NM
		FROM GB_DIC_MST GDM
		WHERE GDM.GB_DIC_MST_ID = SCC5.GB_DIC_MST_ID), '') 	AS storageTypeNm			/* 보관방법명 */
		, OOD.GOODS_TP_CD								AS goodsTpCd								/* 상품유형 IL_GOODS.GOODS_TP 공통코드(GOODS_TYPE) */
		, IFNULL((SELECT IF(OOD.GOODS_DELIVERY_TYPE = 'GOODS_DELIVERY_TYPE.RESERVATION', CONCAT(GDM.DIC_MST_NM, '(예약)'), GDM.DIC_MST_NM)
		FROM GB_DIC_MST GDM
		WHERE GDM.GB_DIC_MST_ID = SCC6.GB_DIC_MST_ID), '') 	AS goodsTpNm				/* 상품유형명 */
		, OOD.ORDER_STATUS_DELI_TP										AS orderStatusDeliTp		/* 주문상태 배송유형 공통코드: ORDER_STATUS_DELI_TP */
		, IFNULL((SELECT GDM.DIC_MST_NM
		FROM GB_DIC_MST GDM
		WHERE GDM.GB_DIC_MST_ID = SCC7.GB_DIC_MST_ID), '') 	AS orderStatusDeliTpNm	/* 배송유형명 */
		, OOD.SALE_TP_CD												AS saleTpCd				/* 판매유형 IL_GOODS.SALE_TP 공통코드(SALE_TYPE) */
		, IFNULL((SELECT GDM.DIC_MST_NM
		FROM GB_DIC_MST GDM
		WHERE GDM.GB_DIC_MST_ID = SCC8.GB_DIC_MST_ID), '') 	AS saleTpNm				/* 판매유형명 */
		, OOD.IL_CTGRY_STD_ID											AS ilCtgryStdId			/* 표준카테고리 : IL_ITEM.IL_CTGRY_STD_ID */
		, IFNULL((SELECT CONCAT(IF(IFNULL(IC1.CTGRY_NM, '') != '', IC1.CTGRY_NM, ''),
		IF(IFNULL(IC2.CTGRY_NM, '') != '', CONCAT ('>', IC2.CTGRY_NM), ''),
		IF(IFNULL(IC3.CTGRY_NM, '') != '', CONCAT ('>', IC3.CTGRY_NM), ''),
		IF(IFNULL(IC4.CTGRY_NM, '') != '', CONCAT ('>', IC4.CTGRY_NM), ''),
		IF(IFNULL(IC5.CTGRY_NM, '') != '', CONCAT ('>', IC5.CTGRY_NM), ''))
		FROM IL_CTGRY_PRNTS_INFO ICPI
		LEFT OUTER JOIN IL_CTGRY IC1 ON ICPI.CTGRY_ID_DEPTH1 = IC1.IL_CTGRY_ID
		LEFT OUTER JOIN IL_CTGRY IC2 ON ICPI.CTGRY_ID_DEPTH2 = IC2.IL_CTGRY_ID
		LEFT OUTER JOIN IL_CTGRY IC3 ON ICPI.CTGRY_ID_DEPTH3 = IC3.IL_CTGRY_ID
		LEFT OUTER JOIN IL_CTGRY IC4 ON ICPI.CTGRY_ID_DEPTH4 = IC4.IL_CTGRY_ID
		LEFT OUTER JOIN IL_CTGRY IC5 ON ICPI.CTGRY_ID_DEPTH5 = IC5.IL_CTGRY_ID
		WHERE ICPI.IL_CTGRY_ID = OOD.IL_CTGRY_DISPLAY_ID), '')	AS ilCtgryStdNm		/* 표준카테고리명 */
		, OOD.IL_CTGRY_DISPLAY_ID											AS ilCtgryDisplayId	/* 전시카테고리 : IL_GOODS_CTGRY.IL_CTGRY_ID */
		, IFNULL((SELECT CONCAT(IF(IFNULL(IC1.CTGRY_NM, '') != '', IC1.CTGRY_NM, ''),
		IF(IFNULL(IC2.CTGRY_NM, '') != '', CONCAT ('>', IC2.CTGRY_NM), ''),
		IF(IFNULL(IC3.CTGRY_NM, '') != '', CONCAT ('>', IC3.CTGRY_NM), ''),
		IF(IFNULL(IC4.CTGRY_NM, '') != '', CONCAT ('>', IC4.CTGRY_NM), ''),
		IF(IFNULL(IC5.CTGRY_NM, '') != '', CONCAT ('>', IC5.CTGRY_NM), ''))
		FROM IL_CTGRY_PRNTS_INFO ICPI
		LEFT OUTER JOIN IL_CTGRY IC1 ON ICPI.CTGRY_ID_DEPTH1 = IC1.IL_CTGRY_ID
		LEFT OUTER JOIN IL_CTGRY IC2 ON ICPI.CTGRY_ID_DEPTH2 = IC2.IL_CTGRY_ID
		LEFT OUTER JOIN IL_CTGRY IC3 ON ICPI.CTGRY_ID_DEPTH3 = IC3.IL_CTGRY_ID
		LEFT OUTER JOIN IL_CTGRY IC4 ON ICPI.CTGRY_ID_DEPTH4 = IC4.IL_CTGRY_ID
		LEFT OUTER JOIN IL_CTGRY IC5 ON ICPI.CTGRY_ID_DEPTH5 = IC5.IL_CTGRY_ID
		WHERE ICPI.IL_CTGRY_ID = OOD.IL_CTGRY_DISPLAY_ID), '')	AS ilCtgryDisplayNm	/* 전시카테고리명 */
		, OOD.IL_CTGRY_MALL_ID												AS ilCtgryMallId		/* 몰인몰카테고리 : IL_GOODS_CTGRY.IL_CTGRY_ID */
		, IFNULL((SELECT CONCAT(IF(IFNULL(IC1.CTGRY_NM, '') != '', IC1.CTGRY_NM, ''),
		IF(IFNULL(IC2.CTGRY_NM, '') != '', CONCAT ('>', IC2.CTGRY_NM), ''),
		IF(IFNULL(IC3.CTGRY_NM, '') != '', CONCAT ('>', IC3.CTGRY_NM), ''),
		IF(IFNULL(IC4.CTGRY_NM, '') != '', CONCAT ('>', IC4.CTGRY_NM), ''),
		IF(IFNULL(IC5.CTGRY_NM, '') != '', CONCAT ('>', IC5.CTGRY_NM), ''))
		FROM IL_CTGRY_PRNTS_INFO ICPI
		LEFT OUTER JOIN IL_CTGRY IC1 ON ICPI.CTGRY_ID_DEPTH1 = IC1.IL_CTGRY_ID
		LEFT OUTER JOIN IL_CTGRY IC2 ON ICPI.CTGRY_ID_DEPTH2 = IC2.IL_CTGRY_ID
		LEFT OUTER JOIN IL_CTGRY IC3 ON ICPI.CTGRY_ID_DEPTH3 = IC3.IL_CTGRY_ID
		LEFT OUTER JOIN IL_CTGRY IC4 ON ICPI.CTGRY_ID_DEPTH4 = IC4.IL_CTGRY_ID
		LEFT OUTER JOIN IL_CTGRY IC5 ON ICPI.CTGRY_ID_DEPTH5 = IC5.IL_CTGRY_ID
		WHERE ICPI.IL_CTGRY_ID = OOD.IL_CTGRY_MALL_ID), '')		AS ilCtgryMallNm		/* 몰인몰카테고리명 */
		, IFNULL(OOD.IL_ITEM_CD, '') 										AS ilItemCd			/* 품목코드 PK : IL_ITEM.IL_ITEM_CD */
		, IFNULL(OOD.ITEM_BARCODE, '') 									AS itemBarcode			/* 품목바코드 : IL_ITEM.ITEM_BARCODE */
		, IFNULL(II.ITEM_NM, '') 											AS itemNm				/* 마스터 품목명 */
		, IFNULL(OOD.IL_GOODS_ID, '') 										AS ilGoodsId			/* 상품 PK : IL_GOODS.IL_GOODS_ID */
		, IFNULL(OOD.GOODS_NM, '')											AS goodsNm				/* 상품명 : IL_GOODS.GOODS_NM */
		, OOD.GOODS_DELIVERY_TYPE											AS goodsDeliveryType	/* 배송유형 공통코드(GOODS_DELIVERY_TYPE) */
		, IFNULL((SELECT GDM.DIC_MST_NM
		FROM GB_DIC_MST GDM
		WHERE GDM.GB_DIC_MST_ID = SCC9.GB_DIC_MST_ID), '') 		AS scheduleType		/* 배송유형명 */
		, OODD.GOODS_CYCLE_TP												AS goodsCycleTp		/* 배송주기 공통코드:GOODS_CYCLE_TP */
		, IFNULL((SELECT GDM.DIC_MST_NM
		FROM GB_DIC_MST GDM
		WHERE GDM.GB_DIC_MST_ID = SCC10.GB_DIC_MST_ID), '') 	AS oneDeliveryTermCd	/* 배송주기명 */
		, OODD.GOODS_CYCLE_TERM_TP											AS goodsCycleTermTp	/* 배송기간 공통코드:GOODS_CYCLE_TERM_TP */
		, IFNULL((SELECT GDM.DIC_MST_NM
		FROM GB_DIC_MST GDM
		WHERE GDM.GB_DIC_MST_ID = SCC11.GB_DIC_MST_ID), '') 	AS oneCycleTermTypeCd	/* 배송기간명 */
		, REGEXP_REPLACE(CONCAT(IF(IFNULL(MON_CNT, 0) > 0, '월', ''),
		IF(IFNULL(TUE_CNT, 0) > 0, '/화', ''),
		IF(IFNULL(WED_CNT, 0) > 0, '/수', ''),
		IF(IFNULL(THU_CNT, 0) > 0, '/목', ''),
		IF(IFNULL(FRI_CNT, 0) > 0, '/금', '')),'^/', '')	 AS deliveryWeekNm	/* 배송요일 */
		, IFNULL(OODD.ALLERGY_YN, 'N') 									AS allergyDietYn 		/* 알러지 식단 여부 */
		, CAST(IFNULL(OOD.ORDER_CNT, 0) AS SIGNED INTEGER)								AS orderCnt 			/* 주문 수량 */
		, CAST(IFNULL(OOD.CLAIM_CNT, 0)AS SIGNED INTEGER) 								AS cancelCnt 			/* 클레임 수량 */
		, CAST(IFNULL(OOD.ORDER_CNT, 0) - IFNULL(OOD.CANCEL_CNT, 0) AS SIGNED INTEGER)	AS cancelAbleCnt		/* 클레임 가능 수량 */
		, CAST(IFNULL(OOD.ORDER_CNT, 0) - IFNULL(OOD.CANCEL_CNT, 0) AS SIGNED INTEGER)	AS warehouseReqCnt		/* 출고요청수량 */
		, CASE WHEN OOD.TAX_YN = 'Y' THEN '과세'
		WHEN OOD.TAX_YN = 'N' THEN '면세' ELSE '' END	AS taxNm					/* 과세 여부 */
		, OOD.GOODS_DISCOUNT_TP								AS goodsDiscountTp	/* 할인유형(NONE, 우선, 올가, 즉시, 적용불가) : 공통코드(GOODS_DISCOUNT_TP) */
		, IFNULL((SELECT GDM.DIC_MST_NM
		FROM GB_DIC_MST GDM
		WHERE GDM.GB_DIC_MST_ID = SCC12.GB_DIC_MST_ID), '') AS goodsDiscountTpNm		/* 할인유형 명 */
		, CAST(IFNULL(OOD.STANDARD_PRICE, 0) AS SIGNED INTEGER)				AS standardPrice					/* 원가 : IL_GOODS.STANDARD_PRICE */
		, CAST(IFNULL(OOD.RECOMMENDED_PRICE, 0) AS SIGNED INTEGER)			AS recommendedPrice				/* 정상가 : IL_GOODS.RECOMMENDED_PRICE */
		, CAST(IFNULL(OOD.SALE_PRICE, 0) AS SIGNED INTEGER)					AS salePrice						/* 판매가 : IL_GOODS.SALE_PRICE */
		, OOD.ORDER_STATUS_CD									AS orderDetailStatusCd			/* 주문상세 상태 */
		, IFNULL(OS3.STATUS_NM, '') 							AS orderDetlStatusNm				/* 주문상태 명 */
		, OOD.CLAIM_STATUS_CD									AS claimDetailStatusCd			/* 클레임상세 상태 */
		, IFNULL(OS4.STATUS_NM, '') 							AS claimDetlStatusNm				/* 클레임상세 상태명 */
		, IFNULL(OS5.STATUS_NM, '') 							AS refundStatusNm					/* 클레임상세 환불 상태명 */
		, IFNULL(PCM.REASON_MSG, '')							AS claimReasonNm					/* 클레임 사유 명 */
		, IFNULL(OOD.CLAIM_REASON_MSG, '') 					AS claimReasonMsg					/* 클레임상세 사유 */
		, IFNULL(CAST(AES_DECRYPT(UNHEX(UU1.USER_NM)		, 'lssCSGhjyCBS!@34')AS CHAR), '')	AS drId		/* 배송준비중 등록자명 */
		, IFNULL(OOD.DR_DT, '')																AS drDt		/* 배송준비중 일자*/
		, IFNULL(CAST(AES_DECRYPT(UNHEX(UU2.USER_NM)		, 'lssCSGhjyCBS!@34')AS CHAR), '')	AS diId		/* 배송중 등록자명 */
		, IFNULL(OOD.DI_DT, '')																AS diDt		/* 배송중 일자*/
		, IFNULL(CAST(AES_DECRYPT(UNHEX(UU3.USER_NM)		, 'lssCSGhjyCBS!@34')AS CHAR), '')	AS dcId		/* 배송완료 등록자명 */
		, IFNULL(OOD.DC_DT, '')																AS dcDt		/* 배송완료 일자*/
		, IFNULL(CAST(AES_DECRYPT(UNHEX(UU4.USER_NM)		, 'lssCSGhjyCBS!@34')AS CHAR), '')	AS bfId		/* 구매확정 등록자명 */
		, IFNULL(OOD.BF_DT, '')																AS bfDt		/* 구매확정 일자*/
		, IFNULL(CAST(AES_DECRYPT(UNHEX(UU5.USER_NM)		, 'lssCSGhjyCBS!@34')AS CHAR), '')	AS caId		/* 취소요청  등록자명 */
		, IFNULL(OOD.CA_DT, '')																AS caDt		/* 취소요청  일자*/
		, IFNULL(CAST(AES_DECRYPT(UNHEX(UU6.USER_NM)		, 'lssCSGhjyCBS!@34')AS CHAR), '')	AS ccId		/* 취소완료 등록자명 */
		, IFNULL(OOD.CC_DT, '')																AS ccDt		/* 취소완료 일자*/
		, IFNULL(CAST(AES_DECRYPT(UNHEX(UU7.USER_NM)		, 'lssCSGhjyCBS!@34')AS CHAR), '')	AS raId		/* 반품요청  등록자명 */
		, IFNULL(OOD.RA_DT, '')																AS raDt		/* 반품요청  일자*/
		, IFNULL(CAST(AES_DECRYPT(UNHEX(UU8.USER_NM)		, 'lssCSGhjyCBS!@34')AS CHAR), '')	AS riId		/* 반품승인 등록자명 */
		, IFNULL(OOD.RI_DT, '')																AS riDt		/* 반품승인 일자*/
		, IFNULL(CAST(AES_DECRYPT(UNHEX(UU9.USER_NM)		, 'lssCSGhjyCBS!@34')AS CHAR), '')	AS rfId		/* 반품보류 등록자명 */
		, IFNULL(OOD.RF_DT, '')																AS rfDt		/* 반품보류 일자*/
		, IFNULL(CAST(AES_DECRYPT(UNHEX(UU10.USER_NM)		, 'lssCSGhjyCBS!@34')AS CHAR), '')	AS rcId		/* 반품완료 등록자명 */
		, IFNULL(OOD.RC_DT, '')																AS rcDt		/* 반품완료 일자*/
		, IFNULL(CAST(AES_DECRYPT(UNHEX(UU11.USER_NM)		, 'lssCSGhjyCBS!@34')AS CHAR), '')	AS ecId		/* 재배송 등록자명 */
		, IFNULL(OOD.EC_DT, '')																AS ecDt		/* 재배송 일자*/
		, IFNULL(CAST(AES_DECRYPT(UNHEX(UU12.USER_NM)		, 'lssCSGhjyCBS!@34')AS CHAR), '')	AS csId		/* CS환불 등록자명 */
		, IFNULL(OOD.CS_DT, '')																AS csDt		/* CS환불 일자*/
		, IFNULL(CAST(AES_DECRYPT(UNHEX(UU13.USER_NM)		, 'lssCSGhjyCBS!@34')AS CHAR), '')	AS faId		/* 환불요청 등록자명 */
		, IFNULL(OOD.FA_DT, '')																AS faDt		/* 환불요청 일자*/
		, IFNULL(CAST(AES_DECRYPT(UNHEX(UU14.USER_NM)		, 'lssCSGhjyCBS!@34')AS CHAR), '')	AS fcId		/* 환불완료 등록자명 */
		, IFNULL(OOD.FC_DT, '')																AS fcDt		/* 환불완료 일자*/
		, IFNULL(CAST(AES_DECRYPT(UNHEX(UU15.USER_NM)		, 'lssCSGhjyCBS!@34')AS CHAR), '')	AS crId		/* 클레임요청 등록자명 */
		, IFNULL(OOD.CR_DT, '')																AS crDt		/* 클레임요청 일자*/
		, IFNULL(CAST(AES_DECRYPT(UNHEX(UU16.USER_NM)		, 'lssCSGhjyCBS!@34')AS CHAR), '')	AS ceId		/* 클레임승인 등록자명 */
		, IFNULL(OOD.CE_DT, '')																AS ceDt		/* 클레임승인 일자*/
		, IFNULL(CAST(AES_DECRYPT(UNHEX(UU17.USER_NM)		, 'lssCSGhjyCBS!@34')AS CHAR), '')	AS orderIfId	/* 주문 I/F 등록자명 */
		, IFNULL(OOD.ORDER_IF_DT, '')															AS orderIfDt	/* 주문 I/F 일자*/
		, IFNULL(CAST(AES_DECRYPT(UNHEX(UU18.USER_NM)		, 'lssCSGhjyCBS!@34')AS CHAR), '')	AS shippingId	/* 출고예정일 등록자명 */
		, IFNULL(OOD.SHIPPING_DT, '')															AS shippingDt	/* 출고예정일 일자*/
		, IFNULL(CAST(AES_DECRYPT(UNHEX(UU19.USER_NM)		, 'lssCSGhjyCBS!@34')AS CHAR), '')	AS deliveryId	/* 도착예정일 등록자명 */
		, IFNULL(OOD.DELIVERY_DT, '')															AS deliveryDt	/* 도착예정일 일자*/
		, IFNULL(OTN.TRACKING_NO, '')															AS odTrackingNumberId	/* 송장번호 */
		, IFNULL(PSC.SHIPPING_COMP_NM, '')														AS psShippingCompId		/* 택배사명 */
		, '' 																					AS cashReceiptIssueGbnCd 	/* 현금영수증발급번호구분(임시) */
		, '' 																					AS issueNum 					/* 현금영수증발급여부(임시) */
		, '' 																					AS issueYn 					/* 현금영수증발급승인번호(임시) */
		, IFNULL(IUI2.MISS_REASON_NM, '') AS missReason /* 미출사유 */
		, IFNULL(IUI2.MISS_MSG, '') AS missMsg /* 미출상세사유 */
		, IFNULL(RETURN_OD_TRACKING_NUMBER_ID, '') AS returnOdTrackingNumberId /* 반품송장번호 */
		, IFNULL(RETURN_PS_SHIPPING_COMP_ID, '') AS returnPsShippingCompId /* 반품택배사명 */
		, IFNULL((SELECT GDM.DIC_MST_NM
		FROM GB_DIC_MST GDM
		WHERE GDM.GB_DIC_MST_ID = SCC14.GB_DIC_MST_ID), '') 	AS agentTypeCdNm	/* 에이전트타 */
		, IFNULL((SELECT GDM.DIC_MST_NM
		FROM GB_DIC_MST GDM
		WHERE GDM.GB_DIC_MST_ID = SCC15.GB_DIC_MST_ID), '') 	AS buyerTypeCdNm	/* 주문자유형 */
		, IFNULL(OOD.COLLECTION_MALL_DETAIL_ID, '') AS collectionMallDetailId /* 수집몰 주문상세번호 */
		, IFNULL(OOD.OUTMALL_DETAIL_ID, '') AS outmallDetailId /* 외부몰 주문상세번호 */
		, IFNULL(OOD.UR_WAREHOUSE_NM, '') AS urWarehouseNm /* 출고처명 */
		, IFNULL(PSP.TITLE, '') AS psShippingPatternNm /* 배송패턴명 */
		, IFNULL(UC.COMP_NM, '') AS urSupplierNm /* 공급업체명 */
		, IFNULL(OOD.SETTLE_DT, '') AS settleDt  /* 정산일자 */
		, ROUND(CASE WHEN OOD.GOODS_TP_CD LIKE 'GOODS_TYPE.GIFT%' THEN 0
		WHEN OOD.BUYER_TYPE_CD = 'BUYER_TYPE.EMPLOYEE' THEN CAST(OOD.RECOMMENDED_PRICE * (IFNULL(OOD.ORDER_CNT, 0) - IFNULL(OOD.CANCEL_CNT, 0))  AS SIGNED INTEGER)
		ELSE CAST(OOD.SALE_PRICE * (IFNULL(OOD.ORDER_CNT, 0) - IFNULL(OOD.CANCEL_CNT, 0))  AS SIGNED INTEGER)
		END, 0) AS finalGoodsPriceVat /* 예상상품매출(VAT 포함) */
		, ROUND(CASE WHEN OOD.GOODS_TP_CD LIKE 'GOODS_TYPE.GIFT%' THEN 0
		WHEN OOD.BUYER_TYPE_CD = 'BUYER_TYPE.EMPLOYEE' AND OOD.TAX_YN = 'Y' THEN CAST(OOD.RECOMMENDED_PRICE * (IFNULL(OOD.ORDER_CNT, 0) - IFNULL(OOD.CANCEL_CNT, 0))  AS SIGNED INTEGER) / 1.1
		WHEN OOD.BUYER_TYPE_CD = 'BUYER_TYPE.EMPLOYEE' AND OOD.TAX_YN != 'Y' THEN CAST(OOD.RECOMMENDED_PRICE * (IFNULL(OOD.ORDER_CNT, 0) - IFNULL(OOD.CANCEL_CNT, 0))  AS SIGNED INTEGER)
		WHEN OOD.TAX_YN = 'Y' THEN CAST(OOD.SALE_PRICE * (IFNULL(OOD.ORDER_CNT, 0) - IFNULL(OOD.CANCEL_CNT, 0))  AS SIGNED INTEGER) / 1.1
		ELSE CAST(OOD.SALE_PRICE * (IFNULL(OOD.ORDER_CNT, 0) - IFNULL(OOD.CANCEL_CNT, 0)) AS SIGNED INTEGER)
		END, 0) AS finalGoodsPriceNotVat /* 예상상품매출(VAT 제외) */
		<!-- ,
            CASE WHEN OOD.BUYER_TYPE_CD = 'BUYER_TYPE.EMPLOYEE' THEN
                ROUND(OOD.RECOMMENDED_PRICE * OOD.CANCEL_ABLE_CNT)
            ELSE
                ROUND(OOD.SALE_PRICE * OOD.CANCEL_ABLE_CNT)
            END
            AS FINAL_GOODS_PRICE_VAT /* 예상상품매출(VAT포함) */
        ,
            CASE WHEN OOD.BUYER_TYPE_CD = 'BUYER_TYPE.EMPLOYEE' THEN
                CASE WHEN OOD.TAX_YN = 'Y' THEN
                    ROUND((OOD.RECOMMENDED_PRICE * OOD.CANCEL_ABLE_CNT) / 1.1)
                ELSE
                    ROUND(OOD.RECOMMENDED_PRICE * OOD.CANCEL_ABLE_CNT)
                END
            ELSE
                CASE WHEN OOD.TAX_YN = 'Y' THEN
                        ROUND((OOD.SALE_PRICE * OOD.CANCEL_ABLE_CNT) / 1.1)
                ELSE
                        ROUND(OOD.SALE_PRICE * OOD.CANCEL_ABLE_CNT)
                END
            END
             AS FINAL_GOODS_PRICE_NOT_VAT /* 예상상품매출(VAT제외) */ -->
		,
		CASE WHEN II.ERP_CTGRY_LV4_ID IS NULL AND II.ERP_CTGRY_LV3_ID IS NULL AND II.ERP_CTGRY_LV2_ID IS NULL AND II.ERP_CTGRY_LV1_ID IS NULL THEN ''
		WHEN II.ERP_CTGRY_LV4_ID = '' AND II.ERP_CTGRY_LV3_ID = '' AND II.ERP_CTGRY_LV2_ID  = '' AND II.ERP_CTGRY_LV1_ID  = '' THEN ''
		WHEN II.ERP_CTGRY_LV4_ID IS NOT NULL THEN CONCAT(II.ERP_CTGRY_LV1_ID, '>',II.ERP_CTGRY_LV2_ID,'>', II.ERP_CTGRY_LV3_ID,'>',II.ERP_CTGRY_LV4_ID)
		WHEN II.ERP_CTGRY_LV3_ID IS NOT NULL THEN CONCAT(II.ERP_CTGRY_LV1_ID, '>',II.ERP_CTGRY_LV2_ID,'>', II.ERP_CTGRY_LV3_ID)
		WHEN II.ERP_CTGRY_LV2_ID IS NOT NULL THEN CONCAT(II.ERP_CTGRY_LV1_ID, '>',II.ERP_CTGRY_LV2_ID)
		WHEN II.ERP_CTGRY_LV1_ID IS NOT NULL THEN CONCAT(II.ERP_CTGRY_LV1_ID)
		END AS erpCtgryNm	/* ERP 카테고리 */
		/* CS환불 항목  START */
		, OOD.L_CLAIM_NAME AS lclaimName				/* 클레임 사유(대) 사유명 */
		, OOD.M_CLAIM_NAME AS mclaimName				/* 클레임 사유(중) 사유명 */
		, OOD.S_CLAIM_NAME AS sclaimName				/* 귀책처 사유명 */
		, OOD.TARGET_TP AS targetTp				/* 귀책구분 B: 구매자, S: 판매자 */
		/* CS환불 항목 END */
		<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(claimState)">
			, IFNULL(T1.CONSULT_MSG, '') AS odConsultMsg
		</if>
		, OOD.GREENJUICE_SELECT AS selectGreenjuice /* 녹즙, 내맘대로 주문 */
		FROM (
			SELECT OOD.OD_ORDER_ID
			, OOD.ODID
			, OCD.OD_CLAIM_ID
			, OOD.OD_ORDER_DETL_ID
			, OD.OM_SELLERS_ID
			, OD.COLLECTION_MALL_ID
			, OD.OUTMALL_ID
			, OD.UR_GROUP_NM
			, OD.UR_USER_ID
			, UU.LOGIN_ID
			, OD.UR_EMPLOYEE_CD
			, CAST(AES_DECRYPT(UNHEX(OD.BUYER_NM)	, 'lssCSGhjyCBS!@34') AS CHAR) AS BUYER_NM
			, CAST(AES_DECRYPT(UNHEX(OD.BUYER_HP)	, 'lssCSGhjyCBS!@34') AS CHAR) AS BUYER_HP
			, CAST(AES_DECRYPT(UNHEX(OD.BUYER_TEL)	, 'lssCSGhjyCBS!@34') AS CHAR) AS BUYER_TEL
			, CAST(AES_DECRYPT(UNHEX(OD.BUYER_MAIL), 'lssCSGhjyCBS!@34') AS CHAR) AS BUYER_MAIL
			, OSZ.DELIVERY_TYPE
			, OSZ.SHIPPING_TYPE
			, CAST(AES_DECRYPT(UNHEX(OSZ.RECV_NM)		, 'lssCSGhjyCBS!@34') AS CHAR) AS RECV_NM
			, CAST(AES_DECRYPT(UNHEX(OSZ.RECV_HP)		, 'lssCSGhjyCBS!@34') AS CHAR) AS RECV_HP
			, CAST(AES_DECRYPT(UNHEX(OSZ.RECV_TEL)		, 'lssCSGhjyCBS!@34') AS CHAR) AS RECV_TEL
			, CAST(AES_DECRYPT(UNHEX(OSZ.RECV_MAIL)	, 'lssCSGhjyCBS!@34') AS CHAR) AS RECV_MAIL
			, CAST(AES_DECRYPT(UNHEX(OSZ.RECV_ZIP_CD)	, 'lssCSGhjyCBS!@34') AS CHAR) AS RECV_ZIP_CD
			, CAST(AES_DECRYPT(UNHEX(OSZ.RECV_ADDR1)	, 'lssCSGhjyCBS!@34') AS CHAR) AS RECV_ADDR1
			, CAST(AES_DECRYPT(UNHEX(OSZ.RECV_ADDR2)	, 'lssCSGhjyCBS!@34') AS CHAR) AS RECV_ADDR2
			, OSZ.RECV_BLD_NO
			, OSZ.DELIVERY_MSG
			, OSZ.DOOR_MSG_CD
			, CAST(AES_DECRYPT(UNHEX(OSZ.DOOR_MSG)	, 'lssCSGhjyCBS!@34') AS CHAR) 		AS DOOR_MSG
			, IFNULL(OP.PAY_TP, '') AS PAY_TP
			, OOD.ORDER_CNT
			, OOD.CANCEL_CNT
			, OOD.ORDER_CNT - OOD.CANCEL_CNT AS CANCEL_ABLE_CNT
			, OOD.TOT_SALE_PRICE
			, OOD.OD_SHIPPING_PRICE_ID
			, IF(OOD.OD_ORDER_DETL_DEPTH_ID != 3, IFNULL(OODC.DISCOUNT_PRICE,0), 0) AS DISCOUNT_EMPLOYEE_PRICE
			, IF(OOD.OD_ORDER_DETL_DEPTH_ID != 3,
			CASE WHEN IFNULL(OODC.DISCOUNT_PRICE,0) > 0 THEN 0
			WHEN IFNULL(OODC.DISCOUNT_PRICE,0) = 0 THEN IFNULL(OOD.DIRECT_PRICE,0) END, IFNULL(OOD.DIRECT_PRICE,0)) AS DIRECT_PRICE
			, (OOD.CART_COUPON_PRICE + OOD.GOODS_COUPON_PRICE) AS COUPON_PRICE
			, OOD.PAID_PRICE
			, ODS.STATUS_CD	AS ODS_STATUS_CD
			, OCS.STATUS_CD	AS OCS_STATUS_CD
			, OODT.IC_DT
			, OODT.CREATE_DT
			, UW.WAREHOUSE_GRP_CD
			, OOD.OD_ORDER_DETL_SEQ
			, OOD.STORAGE_TYPE_CD
			, OOD.GOODS_TP_CD
			, OOD.ORDER_STATUS_DELI_TP
			, OOD.SALE_TP_CD
			, OOD.IL_CTGRY_STD_ID
			, OOD.IL_CTGRY_DISPLAY_ID
			, OOD.IL_CTGRY_MALL_ID
			, OOD.IL_ITEM_CD
			, OOD.ITEM_BARCODE
			, OOD.IL_GOODS_ID
			, OOD.GOODS_NM
			, OOD.GOODS_DELIVERY_TYPE
			, OCD.CLAIM_CNT
			, OOD.TAX_YN
			, OOD.GOODS_DISCOUNT_TP
			, OOD.STANDARD_PRICE
			, OOD.RECOMMENDED_PRICE
			, OOD.SALE_PRICE
			, OOD.ORDER_STATUS_CD
			<choose>
				<when test="@kr.co.pulmuone.v1.comm.util.StringUtil@isEmpty(orderState) and @kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(claimState)">
					, OCD.CLAIM_STATUS_CD
				</when>
				<otherwise>
					, IFNULL((
					SELECT
					OCD.CLAIM_STATUS_CD
					FROM
					OD_CLAIM OC
					INNER JOIN OD_CLAIM_DETL OCD ON OC.OD_CLAIM_ID = OCD.OD_CLAIM_ID
					WHERE
					OC.OD_ORDER_ID = OD.OD_ORDER_ID
					AND OOD.OD_ORDER_DETL_ID = OCD.OD_ORDER_DETL_ID
					ORDER BY OC.OD_CLAIM_ID DESC
					LIMIT 1
					), '') AS CLAIM_STATUS_CD
				</otherwise>
			</choose>
			, OCD.REFUND_STATUS_CD
			, OC.PS_CLAIM_MALL_ID
			, OC.CLAIM_REASON_MSG
			, OOD.DR_ID
			, OOD.DR_DT
			, OOD.DI_ID
			, OOD.DI_DT
			, OOD.DC_ID
			, OOD.DC_DT
			, OOD.BF_ID
			, OOD.BF_DT
			, OCD.CA_ID
			, OCD.CA_DT
			, OCD.CC_ID
			, OCD.CC_DT
			, OCD.RA_ID
			, OCD.RA_DT
			, OCD.RI_ID
			, OCD.RI_DT
			, OCD.RF_ID
			, OCD.RF_DT
			, OCD.RC_ID
			, OCD.RC_DT
			, OCD.EC_ID
			, OCD.EC_DT
			, OCD.CS_ID
			, OCD.CS_DT
			, OCD.FA_ID
			, OCD.FA_DT
			, OCD.FC_ID
			, OCD.FC_DT
			, OCD.CR_ID
			, OCD.CR_DT
			, OCD.CE_ID
			, OCD.CE_DT
			, OOD.ORDER_IF_ID
			, OOD.ORDER_IF_DT
			, OOD.SHIPPING_ID
			, OOD.SHIPPING_DT
			, OOD.DELIVERY_ID
			, OOD.DELIVERY_DT
			, OD.AGENT_TYPE_CD
			, OD.BUYER_TYPE_CD
			, OOD.COLLECTION_MALL_DETAIL_ID
			, OOD.OUTMALL_DETAIL_ID
			, UW.WAREHOUSE_NM AS UR_WAREHOUSE_NM
			, UW.PS_SHIPPING_PATTERN_ID
			, OOD.UR_SUPPLIER_ID
			, ROW_NUMBER() OVER(PARTITION BY TRIM(CONCAT(OD.OD_ORDER_ID, OOD.OD_SHIPPING_PRICE_ID)) ORDER BY OOD.OD_ORDER_DETL_ID ASC) AS SHIPPING_PRICE_RNK
			/* CS환불 항목  START */
			, IFNULL(PCC1.CLAIM_NM, '') 				AS L_CLAIM_NAME				/* 클레임 사유(대) 사유명 */
			, IFNULL(PCC2.CLAIM_NM, '') 				AS M_CLAIM_NAME				/* 클레임 사유(중) 사유명 */
			, IFNULL(PCC3.CLAIM_NM, '') 				AS S_CLAIM_NAME				/* 귀책처 사유명 */
			, IFNULL(PCC3.TARGET_TP, '')				AS TARGET_TP				/* 귀책 유형 */
			/* CS환불 항목 END */
			/* 정산 데이터 항목 START */
			, (SELECT MAX(ISS.SETTLE_DT) FROM IF_SALES_SETTLE_INFO ISS WHERE OOD.ODID = ISS.ODID AND OOD.OD_ORDER_DETL_SEQ = ISS.OD_ORDER_DETL_SEQ) AS SETTLE_DT
			/* 정산 데이터 항목 END */
			,CASE WHEN OOD.PROMOTION_TP = 'CART_PROMOTION_TP.GREENJUICE_SELECT' THEN 'Y' ELSE 'N' END AS GREENJUICE_SELECT /* 녹즙, 내맘대로 주문 */
			FROM OD_ORDER OD
			INNER JOIN OD_ORDER_DETL OOD 		ON OOD.OD_ORDER_ID 				= OD.OD_ORDER_ID
			INNER JOIN OD_ORDER_DT OODT 		ON OOD.OD_ORDER_ID 				= OODT.OD_ORDER_ID
			INNER JOIN OD_SHIPPING_ZONE OSZ 	ON OOD.OD_SHIPPING_ZONE_ID 		= OSZ.OD_SHIPPING_ZONE_ID
			INNER JOIN UR_WAREHOUSE UW 		ON OOD.UR_WAREHOUSE_ID 			= UW.UR_WAREHOUSE_ID
			LEFT OUTER JOIN UR_USER UU 		ON OD.UR_USER_ID 				= UU.UR_USER_ID
			<choose>
				<when test="@kr.co.pulmuone.v1.comm.util.StringUtil@isEmpty(orderState) and @kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(claimState)">
					/* 클레임 테이블 START */
					INNER JOIN OD_CLAIM OC				ON OOD.OD_ORDER_ID 		= OC.OD_ORDER_ID
					INNER JOIN OD_CLAIM_DETL OCD 		ON OC.OD_CLAIM_ID 		= OCD.OD_CLAIM_ID AND OCD.OD_ORDER_DETL_ID = OOD.OD_ORDER_DETL_ID
					LEFT OUTER JOIN PS_CLAIM_BOS PCB 	ON OCD.PS_CLAIM_BOS_ID 	= PCB.PS_CLAIM_BOS_ID AND PCB.DEL_YN = 'N' AND PCB.USE_YN = 'Y'
					LEFT OUTER JOIN PS_CLAIM_BOS_SUPPLY PCBS ON OCD.PS_CLAIM_BOS_ID = PCBS.PS_CLAIM_BOS_ID AND OCD.PS_CLAIM_BOS_SUPPLY_ID = PCBS.PS_CLAIM_BOS_SUPPLY_ID
					LEFT OUTER JOIN PS_CLAIM_CTGRY PCC1 ON OCD.BOS_CLAIM_LARGE_ID 			 = PCC1.PS_CLAIM_CTGRY_ID
					LEFT OUTER JOIN PS_CLAIM_CTGRY PCC2 ON OCD.BOS_CLAIM_MIDDLE_ID 			 = PCC2.PS_CLAIM_CTGRY_ID
					LEFT OUTER JOIN PS_CLAIM_CTGRY PCC3 ON OCD.BOS_CLAIM_SMALL_ID 			 = PCC3.PS_CLAIM_CTGRY_ID
					LEFT OUTER JOIN PS_CLAIM_SUPPLY_CTGRY PCSC1 ON PCSC1.SUPPLIER_CD 	 	 = PCBS.SUPPLIER_CD AND PCSC1.CLAIM_CD 	  	 = PCBS.CLAIM_CD
					LEFT OUTER JOIN PS_CLAIM_SUPPLY_CTGRY PCSC2 ON PCSC2.SUPPLIER_CD 	 	 = PCBS.NON_SUPPLIER_CD AND PCSC2.CLAIM_CD 	  	 = PCBS.NON_CLAIM_CD
					LEFT OUTER JOIN OD_CLAIM_ACCOUNT OCA 		  ON OC.OD_CLAIM_ID		 	 = OCA.OD_CLAIM_ID
					/* 클레임 테이블 END */
				</when>
				<when test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(missStockStatus)">
					/* 미출정보 테이블 START */
					INNER JOIN IF_UNRELEASED_INFO IUI ON OD.ODID 					= IUI.ODID AND OOD.OD_ORDER_DETL_SEQ	= IUI.OD_ORDER_DETL_SEQ
					LEFT OUTER JOIN OD_CLAIM_DETL OCD ON OCD.OD_ORDER_DETL_ID 	= OOD.OD_ORDER_DETL_ID
					LEFT OUTER JOIN OD_CLAIM OC 		ON OC.OD_CLAIM_ID 			= OCD.OD_CLAIM_ID AND OOD.OD_ORDER_ID 			= OC.OD_ORDER_ID
					LEFT OUTER JOIN PS_CLAIM_CTGRY PCC1 ON OCD.BOS_CLAIM_LARGE_ID = PCC1.PS_CLAIM_CTGRY_ID
					LEFT OUTER JOIN PS_CLAIM_CTGRY PCC2 ON OCD.BOS_CLAIM_MIDDLE_ID = PCC2.PS_CLAIM_CTGRY_ID
					LEFT OUTER JOIN PS_CLAIM_CTGRY PCC3 ON OCD.BOS_CLAIM_SMALL_ID = PCC3.PS_CLAIM_CTGRY_ID
					/* 미출정보 테이블 END */
				</when>
				<when test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(orderState) or @kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(claimState)">
					/* 클레임 테이블 START */
					LEFT OUTER JOIN OD_CLAIM_DETL OCD ON OCD.OD_ORDER_DETL_ID = OOD.OD_ORDER_DETL_ID
					LEFT OUTER JOIN OD_CLAIM OC 		ON OC.OD_CLAIM_ID 		= OCD.OD_CLAIM_ID AND OOD.OD_ORDER_ID		= OC.OD_ORDER_ID
					LEFT OUTER JOIN PS_CLAIM_CTGRY PCC1 ON OCD.BOS_CLAIM_LARGE_ID = PCC1.PS_CLAIM_CTGRY_ID
					LEFT OUTER JOIN PS_CLAIM_CTGRY PCC2 ON OCD.BOS_CLAIM_MIDDLE_ID = PCC2.PS_CLAIM_CTGRY_ID
					LEFT OUTER JOIN PS_CLAIM_CTGRY PCC3 ON OCD.BOS_CLAIM_SMALL_ID = PCC3.PS_CLAIM_CTGRY_ID
					/* 클레임 테이블 END */
				</when>
			</choose>
			LEFT OUTER JOIN (SELECT OOD.OD_ORDER_ID
			, OS.STATUS_CD
			, MIN(OS.ORDER_STATUS_SORT) AS ORDER_STATUS_SORT
			FROM OD_STATUS OS
			INNER JOIN OD_ORDER_DETL OOD ON OOD.ORDER_STATUS_CD = OS.STATUS_CD
			WHERE OS.ORDER_STATUS_SORT != '99'
			GROUP BY OOD.OD_ORDER_ID
			) ODS ON OOD.OD_ORDER_ID = ODS.OD_ORDER_ID
			LEFT OUTER JOIN (SELECT OOD.OD_ORDER_ID
			, OS.STATUS_CD
			, MIN(OS.CLAIM_STATUS_SORT) AS CLAIM_STATUS_SORT
			FROM OD_STATUS OS
			INNER JOIN OD_CLAIM_DETL OCD ON OCD.CLAIM_STATUS_CD 	= OS.STATUS_CD
			INNER JOIN OD_ORDER_DETL OOD ON OCD.OD_ORDER_DETL_ID 	= OOD.OD_ORDER_DETL_ID
			WHERE OS.CLAIM_STATUS_SORT != '99'
			GROUP BY OOD.OD_ORDER_ID
			) OCS ON OOD.OD_ORDER_ID = OCS.OD_ORDER_ID
			LEFT OUTER JOIN OD_ORDER_DETL_DISCOUNT OODC ON OD.OD_ORDER_ID = OODC.OD_ORDER_ID AND OOD.OD_ORDER_DETL_ID = OODC.OD_ORDER_DETL_ID AND OODC.DISCOUNT_TP = 'GOODS_DISCOUNT_TP.EMPLOYEE'
			LEFT OUTER JOIN (
			SELECT
			OP.OD_ORDER_ID
			, OPM.PAY_TP
			FROM
			OD_PAYMENT OP
			INNER JOIN
			OD_PAYMENT_MASTER OPM ON OP.OD_PAYMENT_MASTER_ID = OPM.OD_PAYMENT_MASTER_ID
			WHERE
			OPM.TYPE = 'G'
			) OP ON OP.OD_ORDER_ID = OD.OD_ORDER_ID
			WHERE 1=1
			<include refid="searchOrderDetailItem" />
			GROUP BY OD_ORDER_DETL_ID
		) OOD
		LEFT OUTER JOIN OM_SELLERS OS 			ON OOD.OM_SELLERS_ID 		= OS.OM_SELLERS_ID
		LEFT OUTER JOIN UR_USER UU 				ON OOD.UR_USER_ID 			= UU.UR_USER_ID
		LEFT OUTER JOIN OD_TRACKING_NUMBER OTN 	ON OOD.OD_ORDER_DETL_ID 	= OTN.OD_ORDER_DETL_ID
		LEFT OUTER JOIN PS_SHIPPING_COMP PSC 	ON OTN.PS_SHIPPING_COMP_ID 	= PSC.PS_SHIPPING_COMP_ID
		LEFT OUTER JOIN OD_ORDER_DETL_DAILY OODD ON OOD.OD_ORDER_DETL_ID 	= OODD.OD_ORDER_DETL_ID
		AND OOD.OD_ORDER_ID			= OODD.OD_ORDER_ID
		LEFT OUTER JOIN IL_ITEM II 				ON OOD.IL_ITEM_CD 			= II.IL_ITEM_CD
		LEFT OUTER JOIN ST_COMN_CODE SCC1		ON SCC1.ST_COMN_CODE_ID		= OOD.DELIVERY_TYPE
		AND SCC1.ST_COMN_CODE_MST_CD = 'DELIVERY_TYPE'
		LEFT OUTER JOIN ST_COMN_CODE SCC2		ON SCC2.ST_COMN_CODE_ID		= OOD.DOOR_MSG_CD
		AND SCC2.ST_COMN_CODE_MST_CD = 'ACCESS_INFORMATION'
		LEFT OUTER JOIN ST_COMN_CODE SCC3		ON SCC3.ST_COMN_CODE_ID		= OOD.PAY_TP
		AND SCC3.ST_COMN_CODE_MST_CD = 'PAY_TP'
		LEFT OUTER JOIN ST_COMN_CODE SCC4		ON SCC4.ST_COMN_CODE_ID		= OOD.WAREHOUSE_GRP_CD
		AND SCC4.ST_COMN_CODE_MST_CD = 'WAREHOUSE_GROUP'
		LEFT OUTER JOIN ST_COMN_CODE SCC5		ON SCC5.ST_COMN_CODE_ID		= OOD.STORAGE_TYPE_CD
		AND SCC5.ST_COMN_CODE_MST_CD = 'ERP_STORAGE_TYPE'
		LEFT OUTER JOIN ST_COMN_CODE SCC6		ON SCC6.ST_COMN_CODE_ID		= OOD.GOODS_TP_CD
		AND SCC6.ST_COMN_CODE_MST_CD = 'GOODS_TYPE'
		LEFT OUTER JOIN ST_COMN_CODE SCC7		ON SCC7.ST_COMN_CODE_ID		= OOD.ORDER_STATUS_DELI_TP
		AND SCC7.ST_COMN_CODE_MST_CD = 'ORDER_STATUS_DELI_TP'
		LEFT OUTER JOIN ST_COMN_CODE SCC8		ON SCC8.ST_COMN_CODE_ID		= OOD.SALE_TP_CD
		AND SCC8.ST_COMN_CODE_MST_CD = 'SALE_TYPE'
		LEFT OUTER JOIN ST_COMN_CODE SCC9		ON SCC9.ST_COMN_CODE_ID		= OOD.GOODS_DELIVERY_TYPE
		AND SCC9.ST_COMN_CODE_MST_CD = 'GOODS_DELIVERY_TYPE'
		LEFT OUTER JOIN ST_COMN_CODE SCC10		ON SCC10.ST_COMN_CODE_ID	= OODD.GOODS_CYCLE_TP
		AND SCC10.ST_COMN_CODE_MST_CD= 'GOODS_CYCLE_TP'
		LEFT OUTER JOIN ST_COMN_CODE SCC11		ON SCC11.ST_COMN_CODE_ID	= OODD.GOODS_CYCLE_TERM_TP
		AND SCC11.ST_COMN_CODE_MST_CD= 'GOODS_CYCLE_TERM_TP'
		LEFT OUTER JOIN ST_COMN_CODE SCC12		ON SCC12.ST_COMN_CODE_ID	= OOD.GOODS_DISCOUNT_TP
		AND SCC12.ST_COMN_CODE_MST_CD= 'GOODS_DISCOUNT_TP'

		LEFT OUTER JOIN OD_STATUS OS1			ON OS1.STATUS_CD			= OOD.ODS_STATUS_CD
		LEFT OUTER JOIN OD_STATUS OS2			ON OS2.STATUS_CD			= OOD.OCS_STATUS_CD
		LEFT OUTER JOIN OD_STATUS OS3			ON OS3.STATUS_CD			= OOD.ORDER_STATUS_CD
		LEFT OUTER JOIN OD_STATUS OS4			ON OS4.STATUS_CD			= OOD.CLAIM_STATUS_CD
		LEFT OUTER JOIN OD_STATUS OS5			ON OS5.STATUS_CD			= OOD.REFUND_STATUS_CD
		LEFT OUTER JOIN PS_CLAIM_MALL PCM		ON PCM.PS_CLAIM_MALL_ID 	= OOD.PS_CLAIM_MALL_ID
		AND PCM.DEL_YN = 'N'
		AND PCM.USE_YN = 'Y'
		LEFT OUTER JOIN UR_USER UU1				ON UU1.UR_USER_ID			= OOD.DR_ID
		LEFT OUTER JOIN UR_USER UU2				ON UU2.UR_USER_ID			= OOD.DI_ID
		LEFT OUTER JOIN UR_USER UU3				ON UU3.UR_USER_ID			= OOD.DC_ID
		LEFT OUTER JOIN UR_USER UU4				ON UU4.UR_USER_ID			= OOD.BF_ID
		LEFT OUTER JOIN UR_USER UU5				ON UU5.UR_USER_ID			= OOD.CA_ID
		LEFT OUTER JOIN UR_USER UU6				ON UU6.UR_USER_ID			= OOD.CC_ID
		LEFT OUTER JOIN UR_USER UU7				ON UU7.UR_USER_ID			= OOD.RA_ID
		LEFT OUTER JOIN UR_USER UU8				ON UU8.UR_USER_ID			= OOD.RI_ID
		LEFT OUTER JOIN UR_USER UU9				ON UU9.UR_USER_ID			= OOD.RF_ID
		LEFT OUTER JOIN UR_USER UU10				ON UU10.UR_USER_ID			= OOD.RC_ID
		LEFT OUTER JOIN UR_USER UU11				ON UU11.UR_USER_ID			= OOD.EC_ID
		LEFT OUTER JOIN UR_USER UU12				ON UU12.UR_USER_ID			= OOD.CS_ID
		LEFT OUTER JOIN UR_USER UU13				ON UU13.UR_USER_ID			= OOD.FA_ID
		LEFT OUTER JOIN UR_USER UU14				ON UU14.UR_USER_ID			= OOD.FC_ID
		LEFT OUTER JOIN UR_USER UU15				ON UU15.UR_USER_ID			= OOD.CR_ID
		LEFT OUTER JOIN UR_USER UU16				ON UU16.UR_USER_ID			= OOD.CE_ID
		LEFT OUTER JOIN UR_USER UU17				ON UU17.UR_USER_ID			= OOD.ORDER_IF_ID
		LEFT OUTER JOIN UR_USER UU18				ON UU18.UR_USER_ID			= OOD.SHIPPING_ID
		LEFT OUTER JOIN UR_USER UU19				ON UU19.UR_USER_ID			= OOD.DELIVERY_ID
		LEFT OUTER JOIN (
		SELECT
		IUI.*
		, IFNULL(SCC13.DIC_MST_NM, '') AS MISS_REASON_NM /* 미출상세사유 */
		FROM IF_UNRELEASED_INFO IUI
		LEFT JOIN (
		SELECT
		SCC.ST_COMN_CODE_ID
		, GDM.DIC_MST_NM
		FROM ST_COMN_CODE SCC
		LEFT JOIN GB_DIC_MST GDM
		ON GDM.GB_DIC_MST_ID = SCC.GB_DIC_MST_ID
		WHERE
		SCC.ST_COMN_CODE_MST_CD = 'MISS_STOCK_REASON'
		) SCC13
		ON SCC13.ST_COMN_CODE_ID = IUI.MISS_REASON
		)IUI2	ON OOD.ODID 				= IUI2.ODID
		AND OOD.OD_ORDER_DETL_SEQ	= IUI2.OD_ORDER_DETL_SEQ
		LEFT OUTER JOIN ST_COMN_CODE SCC14		ON SCC14.ST_COMN_CODE_ID	= OOD.AGENT_TYPE_CD
		AND SCC14.ST_COMN_CODE_MST_CD = 'AGENT_TYPE'
		LEFT OUTER JOIN ST_COMN_CODE SCC15		ON SCC15.ST_COMN_CODE_ID	= OOD.BUYER_TYPE_CD
		AND SCC15.ST_COMN_CODE_MST_CD = 'BUYER_TYPE'
		LEFT OUTER JOIN (
			SELECT S2.OD_ORDER_DETL_ID,
				IFNULL(S3.TRACKING_NO, '') AS RETURN_OD_TRACKING_NUMBER_ID,
				IFNULL(PSC.SHIPPING_COMP_NM, '') AS RETURN_PS_SHIPPING_COMP_ID
			FROM OD_CLAIM S1
			INNER JOIN OD_CLAIM_DETL S2 ON S1.OD_CLAIM_ID = S2.OD_CLAIM_ID AND S1.CLAIM_STATUS_TP = 'CLAIM_STATUS_TP.RETURN'
			INNER JOIN OD_RETURN_TRACKING_NUMBER S3 ON S2.OD_CLAIM_DETL_ID = S3.OD_CLAIM_DETL_ID
			INNER JOIN PS_SHIPPING_COMP PSC 	ON S3.PS_SHIPPING_COMP_ID 	= PSC.PS_SHIPPING_COMP_ID
			GROUP BY S2.OD_ORDER_DETL_ID
		) RETURN_CLAIM 			ON OOD.OD_ORDER_DETL_ID = RETURN_CLAIM.OD_ORDER_DETL_ID
		LEFT OUTER JOIN PS_SHIPPING_PATTERN PSP ON OOD.PS_SHIPPING_PATTERN_ID = PSP.PS_SHIPPING_PATTERN_ID
		LEFT OUTER JOIN UR_SUPPLIER US ON OOD.UR_SUPPLIER_ID = US.UR_SUPPLIER_ID
		LEFT OUTER JOIN UR_COMPANY UC ON US.UR_COMPANY_ID = UC.UR_COMPANY_ID AND UC.USE_YN = 'Y' AND UC.COMP_TP IN ('COMPANY_TYPE.HEADQUARTERS','COMPANY_TYPE.SUPPLIER')
		<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(claimState)">
			LEFT OUTER JOIN (SELECT OC.OD_ORDER_ID, GROUP_CONCAT(DISTINCT CONCAT('['
			, CASE WHEN ('9000000000000000000' = OC.CREATE_ID) THEN 'system' ELSE CAST(AES_DECRYPT(UNHEX(UU.USER_NM), 'lssCSGhjyCBS!@34') AS CHAR) END, ',', OC.CREATE_ID, ',', OC.CREATE_DT, ']'
			, CONSULT_MSG)) AS CONSULT_MSG
			FROM OD_CONSULT OC
			LEFT OUTER JOIN UR_USER UU ON OC.CREATE_ID = UU.UR_USER_ID
			WHERE OC.DEL_YN = 'N'
			AND length(OC.CONSULT_MSG) > 0
			AND OC.OD_ORDER_ID in(SELECT OD.OD_ORDER_ID
				FROM OD_ORDER OD
					INNER JOIN OD_ORDER_DETL OOD ON OOD.OD_ORDER_ID = OD.OD_ORDER_ID
					LEFT OUTER JOIN OD_CLAIM OC ON OOD.OD_ORDER_ID = OC.OD_ORDER_ID
					LEFT OUTER JOIN OD_CLAIM_DETL OCD ON OC.OD_CLAIM_ID = OCD.OD_CLAIM_ID AND OCD.OD_ORDER_DETL_ID = OOD.OD_ORDER_DETL_ID
					LEFT OUTER JOIN OD_SHIPPING_ZONE OSZ 	ON OOD.OD_SHIPPING_ZONE_ID 		= OSZ.OD_SHIPPING_ZONE_ID
				WHERE 1=1
				<include refid="searchOrderDetailItem" />
			)
			GROUP BY OC.OD_ORDER_ID) T1 ON OOD.OD_ORDER_ID = T1.OD_ORDER_ID
		</if>
		<include refid="searchOutOrderOrderBy" />
	</select>

	<!--───────────────────────────────────────────────────────────────────────
     * description		: 반품 사유 코드 목록 조회
     * @
     * @ 수정일			수정자          수정내용
     * @ ──────────────────────────────────────────────────────────────────────
     * @ 2021.03.05 	이규한          최초생성
    ────────────────────────────────────────────────────────────────────────-->
	<select id="getReturnReasonList" resultType="kr.co.pulmuone.v1.base.dto.vo.GetCodeListResultVo">
		/*	orderList.getReturnReasonList  */
		SELECT PCM.PS_CLAIM_MALL_ID	AS CODE		/* MALL 클레임 사유 PK */
			 , PCM.REASON_MSG		AS NAME		/* 사유 */
		  FROM PS_CLAIM_MALL PCM				/* MALL 클레임 사유 */
		 WHERE PCM.REASON_TP IN ('A', 'R')		/* 사유구분 A: 취소/반품 C: 취소, R: 반품 */
		   AND PCM.USE_YN = 'Y'					/* 사용여부 */
	</select>

	<sql id="searchOrderOrderBy">
		<choose>
			<when test='orderByType == "claim"'>
				ORDER BY OD_CLAIM_ID DESC, OD_ORDER_DETL_SEQ ASC
			</when>
			<when test='orderByType == "undelivered"'>
				ORDER BY IFNULL(IUI.MISS_DT, IFNULL(DATE_FORMAT(IOCD.CA_DT,'%Y%m%d'), DATE_FORMAT(IOCD.EC_DT,'%Y%m%d'))) DESC
			</when>
			<otherwise>
				ORDER BY OD_ORDER_ID DESC, OD_ORDER_DETL_SEQ ASC
			</otherwise>
		</choose>
	</sql>

		<sql id="searchOutOrderOrderBy">
		<choose>
			<when test='orderByType == "claim"'>
				ORDER BY OOD.OD_CLAIM_ID DESC, OOD.OD_ORDER_DETL_SEQ ASC
			</when>
			<when test='orderByType == "undelivered"'>
				ORDER BY OOD.MISS_DT DESC
			</when>
			<otherwise>
				ORDER BY OOD.OD_ORDER_ID DESC, OOD.OD_ORDER_DETL_SEQ ASC
			</otherwise>
		</choose>
	</sql>

	<!-- CS환불 날짜검색 -->
	<sql id="csSearchDate">
		<choose>
			<when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(dateSearchType, "CLAIM_REQUEST_DATE")'> <!-- 클레임요청일자 -->
				AND OCI.APPR_REQ_DT BETWEEN #{dateSearchStart} AND (#{dateSearchEnd} + INTERVAL 1 DAY - INTERVAL 1 SECOND)
			</when>
			<when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(dateSearchType, "CREATE_DATE")'> <!-- 주문일자 -->
				AND OD.CREATE_DT BETWEEN #{dateSearchStart} AND (#{dateSearchEnd} + INTERVAL 1 DAY - INTERVAL 1 SECOND)
			</when>
			<when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(dateSearchType, "PAY_DATE")'> <!-- 결제일자 -->
				AND EXISTS ( SELECT 'X'
				FROM OD_ORDER_DT
				WHERE OD_ORDER_ID = OD.OD_ORDER_ID
				AND IC_DT BETWEEN #{dateSearchStart} AND (#{dateSearchEnd} + INTERVAL 1 DAY - INTERVAL 1 SECOND)
				)
			</when>
		</choose>
	</sql>
	<!-- CS환불 공급업체 -->
	<sql id="csSearchDetailSupplierId">
		<if test='@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(supplierId)'>
		AND OOD.UR_SUPPLIER_ID = #{supplierId}
		</if>
	</sql>
	<!-- CS환불 판매처 -->
	<sql id="csSearchSellersDetail">
		<if test='@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(sellersGroup)'>
			AND OD.SELLERS_GROUP_CD = #{sellersGroup}
		</if>
		<if test="omSellersIdList.size() > 0">
			AND OD.OM_SELLERS_ID IN
			<foreach collection="omSellersIdList" item="sellersDetail" index="index" separator="," open="(" close=")">
				#{sellersDetail}
			</foreach>
		</if>
	</sql>
	<!-- CS환불 출고처그룹 -->
	<sql id="csSearchDetailWarehouseGroup">
		<if test='@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(warehouseGroup)'>
		AND OOD.UR_WAREHOUSE_GRP_CD = #{warehouseGroup}
		</if>
	</sql>
	<!-- CS환불 출고처 -->
	<sql id="csSearchDetailWarehouseId">
		<if test='@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(warehouseId)'>
		AND OOD.UR_WAREHOUSE_ID = #{warehouseId}
		</if>
	</sql>
	<!-- CS환불 BOS클레임사유 대분류 -->
	<sql id="csSearchBosClaimLarge">
		<if test='@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(lclaimCtgryId)'>
		AND OCID.BOS_CLAIM_LARGE_ID = #{lclaimCtgryId}
		</if>
	</sql>
	<!-- CS환불 BOS클레임사유 중분류 -->
	<sql id="csSearchBosClaimMiddle">
		<if test='@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(mclaimCtgryId)'>
		AND OCID.BOS_CLAIM_MIDDLE_ID = #{mclaimCtgryId}
		</if>
	</sql>
	<!-- CS환불 BOS클레임사유 소분류 -->
	<sql id="csSearchBosClaimSmall">
		<if test='@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(sclaimCtgryId)'>
		AND OCID.BOS_CLAIM_SMALL_ID = #{sclaimCtgryId}
		</if>
	</sql>
	<!-- CS환불 승인상태 -->
	<sql id="csSearchApproveCd">
		<if test="csRefundApproveCdList.size() > 0">
			AND OCI.CS_REFUND_APPROVE_CD IN
			<foreach collection="csRefundApproveCdList" item="csRefundApproveCd" index="index" separator="," open="(" close=")">
				#{csRefundApproveCd}
			</foreach>
		</if>
	</sql>
	<!-- CS환불 환불구분 -->
	<sql id="csSearchRefundTp">
		<if test="csRefundTpList.size() > 0">
			AND OCI.CS_REFUND_TP IN
			<foreach collection="csRefundTpList" item="csRefundTp" index="index" separator="," open="(" close=")">
				#{csRefundTp}
			</foreach>
		</if>
	</sql>
	<!-- CS환불 검색어 -->
	<sql id="csSearchKeyword">
		<if test='@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(findKeyword)'>
			<choose>
				<when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(searchMultiType, "BUYER_NAME")'> <!-- 주문자명 -->
					AND FN_DECRYPT(OD.BUYER_NM) = #{findKeyword}
				</when>
				<when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(searchMultiType, "BUYER_ID")'> <!-- 주문자ID -->
					AND EXISTS ( SELECT 'X'
					FROM UR_USER
					WHERE UR_USER_ID = OD.UR_USER_ID
					AND LOGIN_ID LIKE CONCAT(#{findKeyword}, '%') )
				</when>
				<when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(searchMultiType, "ORDER_ID")'> <!-- 주문번호 -->
					AND OD.ODID = #{findKeyword}
				</when>
				<when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(searchMultiType, "OUTMALL_ID")'> <!-- 외부몰 주문번호 -->
					AND OOD.OUTMALL_DETAIL_ID = #{findKeyword}
				</when>
				<when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(searchMultiType, "COLLECTION_MALL_ID")'> <!-- 수집몰 주문번호 -->
					AND OD.COLLECTION_MALL_ID = #{findKeyword}
				</when>
				<when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(searchMultiType, "GOODS_NAME")'> <!-- 상품명 -->
					AND EXISTS (
									SELECT 'X'
									FROM OD_ORDER_DETL S1
									WHERE OD_ORDER_ID = OD.OD_ORDER_ID
									AND (GOODS_NM LIKE CONCAT('%', #{findKeyword}, '%')
									OR EXISTS (
												SELECT 'X'
												FROM OD_ORDER_DETL_PACK
												WHERE GOODS_NM LIKE CONCAT('%', #{findKeyword}, '%')
												AND OD_ORDER_DETL_ID = S1.OD_ORDER_DETL_PARENT_ID)
									)
								)
				</when>
				<when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(searchMultiType, "GOODS_ID")'> <!-- 상품코드 -->
					AND EXISTS (
									SELECT 'X'
									FROM OD_ORDER_DETL S1
									WHERE OD_ORDER_ID = OD.OD_ORDER_ID
									AND (
										IL_GOODS_ID = #{findKeyword}
										OR EXISTS (
													SELECT 'X'
													FROM OD_ORDER_DETL_PACK
													WHERE IL_GOODS_ID = #{findKeyword}
													AND OD_ORDER_DETL_ID = S1.OD_ORDER_DETL_PARENT_ID
										)
									)
					)
				</when>
				<when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(searchMultiType, "ITEM_CODE")'> <!-- 품목코드 -->
					AND EXISTS (
									SELECT 'X'
									FROM OD_ORDER_DETL
									WHERE OD_ORDER_ID = OD.OD_ORDER_ID
									AND IL_ITEM_CD = #{findKeyword}
					)
				</when>
				<when test='@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(searchMultiType, "ITEM_BARCODE")'> <!-- 품목바코드 -->
					AND EXISTS (
									SELECT 'X'
									FROM OD_ORDER_DETL
									WHERE OD_ORDER_ID = OD.OD_ORDER_ID
									AND ITEM_BARCODE = #{findKeyword}
					)
				</when>
			</choose>
		</if>
	</sql>

	<!-- CS환불 단일조건 검색 -->
	<sql id="csSearchDetailSingleKeyword">
		<choose>
			<when test="@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(searchSingleType,'ORDER_ID') ">
				AND EXISTS ( SELECT 'X'
				FROM OD_ORDER
				WHERE OD_ORDER_ID = OD.OD_ORDER_ID
				AND ODID IN
				<foreach item="data" index="index" collection="codeSearchList" open="(" separator="," close=")">
					#{data}
				</foreach>
				)
			</when>
			<when test="@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(searchSingleType,'OUTMALL_ID') ">
				AND EXISTS ( SELECT 'X'
				FROM OD_ORDER
				WHERE OD_ORDER_ID = OD.OD_ORDER_ID
				AND OUTMALL_ID IN
				<foreach item="data" index="index" collection="codeSearchList" open="(" separator="," close=")">
					#{data}
				</foreach>
				)
			</when>
			<when test="@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(searchSingleType,'COLLECTION_MALL_ID') ">
				AND EXISTS ( SELECT 'X'
				FROM OD_ORDER
				WHERE OD_ORDER_ID = OD.OD_ORDER_ID
				AND COLLECTION_MALL_ID IN
				<foreach item="data" index="index" collection="codeSearchList" open="(" separator="," close=")">
					#{data}
				</foreach>
				)
			</when>

		</choose>
	</sql>
	<!-- CS환불 검색 조건 -->
	<sql id="csSearchSql">
		<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(selectConditionType,'singleSection') ">
			<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(codeSearchList)">
				<include refid="csSearchDetailSingleKeyword" />
			</if>
		</if>
		<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(selectConditionType,'multiSection') ">
			<include refid="csSearchDate" />
			<include refid="csSearchDetailSupplierId" />
			<include refid="csSearchSellersDetail" />
			<include refid="csSearchDetailWarehouseGroup" />
			<include refid="csSearchDetailWarehouseId" />
			<include refid="csSearchBosClaimLarge" />
			<include refid="csSearchBosClaimMiddle" />
			<include refid="csSearchBosClaimSmall" />
			<include refid="csSearchApproveCd" />
			<include refid="csSearchRefundTp" />
			<include refid="csSearchKeyword" />
		</if>

        <if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(listAuthWarehouseId) and listAuthWarehouseId.size != 0">
            AND OOD.UR_WAREHOUSE_ID IN (
            <foreach collection="listAuthWarehouseId" item="warehouseId" separator=",">
                #{warehouseId}
            </foreach>
            )
        </if>
		<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(listAuthSupplierId) and listAuthSupplierId.size != 0">
			AND OOD.UR_SUPPLIER_ID IN (
				<foreach collection="listAuthSupplierId" item="authSupplierId" separator=",">
					#{authSupplierId}
				</foreach>
			)
		</if>
		<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(listAuthStoreId) and listAuthStoreId.size != 0">
			AND OD.UR_STORE_ID IN (
				<foreach collection="listAuthStoreId" item="authStoreId" separator=",">
					#{authStoreId}
				</foreach>
			)
		</if>
		<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(listAuthSellersId) and listAuthSellersId.size != 0">
			AND OD.OM_SELLERS_ID IN (
				<foreach collection="listAuthSellersId" item="authSellersId" separator=",">
					#{authSellersId}
				</foreach>
			)
		</if>

	</sql>

	<!--───────────────────────────────────────────────────────────────────────
     * description		: CS환불 리스트 건수 조회
     * @
     * @ 수정일			수정자          수정내용
     * @ ──────────────────────────────────────────────────────────────────────
     * @ 2021.03.05 	이규한          최초생성
    ────────────────────────────────────────────────────────────────────────-->
	<select id="getCSRefundListCount" resultType="kr.co.pulmuone.v1.order.order.dto.OrderCSRefundTotalInfoDto" parameterType="kr.co.pulmuone.v1.order.order.dto.OrderListRequestDto">
		/* order.getCSRefundListCount */
		SELECT
			IFNULL(X.TOTAL, 0) AS TOTAL,
			IFNULL(X.TOTAL_REFUND_PRICE, 0) AS TOTAL_REFUND_PRICE
		FROM
		(
			SELECT
				COUNT(1) AS TOTAL,
				SUM(OCID.REFUND_PRICE) AS TOTAL_REFUND_PRICE
			FROM
				OD_CS_INFO OCI
			INNER JOIN OD_CS_INFO_DETL OCID
					ON OCI.OD_CS_ID = OCID.OD_CS_ID
			LEFT OUTER JOIN OD_CS_PG_INFO OCPI
						 ON OCI.OD_CS_ID = OCPI.OD_CS_ID
			INNER JOIN OD_ORDER OD
					ON OCI.OD_ORDER_ID = OD.OD_ORDER_ID
				<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(urUserId)">
					AND EXISTS ( SELECT 'X'
					FROM UR_USER
					WHERE UR_USER_ID = OD.UR_USER_ID
					AND UR_USER_ID LIKE CONCAT(#{urUserId}, '%') )
				</if>
			INNER JOIN OD_ORDER_DETL OOD
					ON OCID.OD_ORDER_DETL_ID = OOD.OD_ORDER_DETL_ID
			INNER JOIN UR_WAREHOUSE UW
					ON OOD.UR_WAREHOUSE_ID = UW.UR_WAREHOUSE_ID
			LEFT OUTER JOIN OD_CS_ACCOUNT OCA
						 ON OCI.OD_CS_ID = OCA.OD_CS_ID
			LEFT OUTER JOIN OM_SELLERS OS
						 ON OS.OM_SELLERS_ID = OD.OM_SELLERS_ID
			LEFT OUTER JOIN PS_CLAIM_BOS PCB
						 ON OCID.PS_CLAIM_BOS_ID = PCB.PS_CLAIM_BOS_ID
						AND PCB.DEL_YN = 'N'
						AND PCB.USE_YN = 'Y'
			LEFT OUTER JOIN PS_CLAIM_CTGRY PCC1
						 ON OCID.BOS_CLAIM_LARGE_ID = PCC1.PS_CLAIM_CTGRY_ID
			LEFT OUTER JOIN PS_CLAIM_CTGRY PCC2
						 ON OCID.BOS_CLAIM_MIDDLE_ID = PCC2.PS_CLAIM_CTGRY_ID
			LEFT OUTER JOIN PS_CLAIM_CTGRY PCC3
						 ON OCID.BOS_CLAIM_SMALL_ID = PCC3.PS_CLAIM_CTGRY_ID
			LEFT OUTER JOIN UR_SUPPLIER US
						 ON OOD.UR_SUPPLIER_ID = US.UR_SUPPLIER_ID
			LEFT OUTER JOIN UR_COMPANY UC
						 ON US.UR_COMPANY_ID = UC.UR_COMPANY_ID
						AND UC.USE_YN = 'Y'
						AND UC.COMP_TP IN ('COMPANY_TYPE.HEADQUARTERS','COMPANY_TYPE.SUPPLIER')
			WHERE
				OCI.OD_CS_YN = 'Y'
			<include refid="csSearchSql"/>
		) X
	</select>

	<!--───────────────────────────────────────────────────────────────────────
     * description		: CS환불 리스트 조회
     * @
     * @ 수정일			수정자          수정내용
     * @ ──────────────────────────────────────────────────────────────────────
     * @ 2021.03.05 	이규한          최초생성
    ────────────────────────────────────────────────────────────────────────-->
	<select id="getCSRefundList" resultType="kr.co.pulmuone.v1.order.order.dto.OrderCSRefundListDto" parameterType="kr.co.pulmuone.v1.order.order.dto.OrderListRequestDto">
		/*	order.getCSRefundList  */
		SELECT
			OCI.OD_CS_ID,																					/* CS환불정보 PK */
			OCID.OD_CS_DETL_ID,																				/* CS환불정보상세 PK */
			OCI.OD_ORDER_ID,																				/* 주문PK */
			OD.ODID,																						/* 주문번호 */
			OCI.APPR_REQ_USER_ID,																			/* 승인요청자ID */
			DATE_FORMAT(OCI.APPR_REQ_DT, '%Y-%m-%d %H:%i:%s')				AS APPR_REQ_DT,					/* 승인요청일시 */
			IFNULL(DATE_FORMAT(OCI.APPR_CHG_DT, '%Y-%m-%d %H:%i:%s'), '')	AS APPR_CHG_DT,					/* 승인2차처리일시 */
			IFNULL(OS.SELLERS_NM, '')										AS OM_SELLERS_NM,				/* 판매처명 */
			OOD.OD_ORDER_DETL_SEQ,																			/* 주문상세SEQ */
			OOD.IL_ITEM_CD,																					/* 마스터품목코드 */
			OOD.ITEM_BARCODE,																				/* 품목바코드 */
			OOD.IL_GOODS_ID,																				/* 상품PK */
			UC.COMP_NM,																						/* 공급업체명 */
			OOD.GOODS_NM,																					/* 상품명 */
			IF(OOD.TAX_YN = 'Y', '과세', '비과세')							AS TAX_YN,						/* 과세구분 */
			UW.WAREHOUSE_NM,																				/* 출고처명 */
			OCI.CS_REFUND_TP,																				/* CS환불구분 */
			FN_COMN_CODE_DIC(OCI.CS_REFUND_TP) 								AS CS_REFUND_TP_NM,				/* CS환불구분명 */
			OCID.REFUND_PRICE,																				/* 환불금액 */
			OCID.PS_CLAIM_BOS_ID,																			/* BOS 클레임사유 PK */
			OCID.BOS_CLAIM_LARGE_ID,																		/* BOS 클레임사유 대분류 */
			IFNULL(PCC1.CLAIM_NM, '')										AS BOS_CLAIM_LARGE_NM,			/* BOS 클레임사유 대분류명 */
			OCID.BOS_CLAIM_MIDDLE_ID,																		/* BOS 클레임사유 중분류 */
			IFNULL(PCC2.CLAIM_NM, '')										AS BOS_CLAIM_MIDDLE_NM,			/* BOS 클레임사유 중분류명 */
			OCID.BOS_CLAIM_SMALL_ID,																		/* BOS 클레임사유 소분류 */
			IFNULL(PCC3.CLAIM_NM, '')										AS BOS_CLAIM_SMALL_NM,			/* BOS 클레임사유 소분류명 */
			IFNULL(OCI.CS_REASON_MSG, '') 									AS CS_REASON_MSG,				/* 상세사유 */
			IFNULL(OCA.BANK_CD, '') 										AS BANK_CD,						/* 은행코드 */
			IFNULL(FN_COMN_CODE_DIC(OCA.BANK_CD), '') 						AS BANK_NM,						/* 은행명 */
			IFNULL(FN_DECRYPT(OCA.ACCOUNT_HOLDER), '') 						AS ACCOUNT_HOLDER,				/* 예금주명 */
			IFNULL(FN_DECRYPT(OCA.ACCOUNT_NUMBER), '') 						AS ACCOUNT_NUMBER,				/* 계좌번호 */
			OCI.CS_REFUND_APPROVE_CD,																		/* CS환불상태 */
			FN_COMN_CODE_DIC(OCI.CS_REFUND_APPROVE_CD) 						AS CS_REFUND_APPROVE_CD_NM,		/* CS환불상태명 */
			IFNULL(OCPI.RESPONSE_DATA, '')  								AS RESPONSE_DATA,				/* 응답데이터 */
			IF((
				SELECT	COUNT(1) AS CNT
				FROM	IF_SALES_SETTLE_INFO A
				WHERE	A.ODID = OD.ODID
				AND		A.OD_ORDER_DETL_SEQ = OOD.OD_ORDER_DETL_SEQ
				AND		A.SETTLE_TYPE = 'ORDER'
			) <![CDATA[<]]> 1, 'N', 'Y')									AS SALES_SETTLE_YN,				/* 매출여부 */
			IF(IFNULL(IUI.PRIORITY_UNDELIVERED_YN, '') = '', '', (
				CASE WHEN IUI.PRIORITY_UNDELIVERED_YN = 'Y' THEN '선미출'
				ELSE '미출'
				END
			)) 																AS UNRELEASED_YN				/* 미출여부 */
		FROM
			OD_CS_INFO OCI
		INNER JOIN OD_CS_INFO_DETL OCID
			   ON OCI.OD_CS_ID = OCID.OD_CS_ID
		LEFT OUTER JOIN OD_CS_PG_INFO OCPI
					 ON OCI.OD_CS_ID = OCPI.OD_CS_ID
		INNER JOIN OD_ORDER OD
			   ON OCI.OD_ORDER_ID = OD.OD_ORDER_ID
		<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(urUserId)">
			AND EXISTS ( SELECT 'X'
			FROM UR_USER
			WHERE UR_USER_ID = OD.UR_USER_ID
			AND UR_USER_ID LIKE CONCAT(#{urUserId}, '%') )
		</if>
		INNER JOIN OD_ORDER_DETL OOD
			   ON OCID.OD_ORDER_DETL_ID = OOD.OD_ORDER_DETL_ID
		INNER JOIN UR_WAREHOUSE UW
			   ON OOD.UR_WAREHOUSE_ID = UW.UR_WAREHOUSE_ID
		LEFT OUTER JOIN OD_CS_ACCOUNT OCA
					ON OCI.OD_CS_ID = OCA.OD_CS_ID
		LEFT OUTER JOIN OM_SELLERS OS
					ON OS.OM_SELLERS_ID = OD.OM_SELLERS_ID
		LEFT OUTER JOIN PS_CLAIM_BOS PCB
					ON OCID.PS_CLAIM_BOS_ID = PCB.PS_CLAIM_BOS_ID
					AND PCB.DEL_YN = 'N'
					AND PCB.USE_YN = 'Y'
		LEFT OUTER JOIN PS_CLAIM_CTGRY PCC1
					ON OCID.BOS_CLAIM_LARGE_ID = PCC1.PS_CLAIM_CTGRY_ID
		LEFT OUTER JOIN PS_CLAIM_CTGRY PCC2
					ON OCID.BOS_CLAIM_MIDDLE_ID = PCC2.PS_CLAIM_CTGRY_ID
		LEFT OUTER JOIN PS_CLAIM_CTGRY PCC3
					ON OCID.BOS_CLAIM_SMALL_ID = PCC3.PS_CLAIM_CTGRY_ID
		LEFT OUTER JOIN UR_SUPPLIER US
					ON OOD.UR_SUPPLIER_ID = US.UR_SUPPLIER_ID
		LEFT OUTER JOIN UR_COMPANY UC
					ON US.UR_COMPANY_ID = UC.UR_COMPANY_ID
					AND UC.USE_YN = 'Y'
					AND UC.COMP_TP IN ('COMPANY_TYPE.HEADQUARTERS','COMPANY_TYPE.SUPPLIER')
		LEFT OUTER JOIN
					(
						SELECT	A.ODID
								, A.OD_ORDER_DETL_SEQ
								, OCD.PRIORITY_UNDELIVERED_YN
						FROM	(
									SELECT	ODID
									, OD_ORDER_DETL_SEQ
									, MAX(IF_UNRELEASED_INFO_ID) AS IF_UNRELEASED_INFO_ID
									FROM	IF_UNRELEASED_INFO
									GROUP BY ODID, OD_ORDER_DETL_SEQ
								) A
						INNER JOIN
								OD_CLAIM_DETL OCD ON A.IF_UNRELEASED_INFO_ID = OCD.IF_UNRELEASED_INFO_ID
						INNER JOIN
								OD_CLAIM OC ON OCD.OD_CLAIM_ID = OC.OD_CLAIM_ID AND OC.CLAIM_YN = 'Y'
					) IUI
					ON IUI.ODID = OD.ODID
					AND IUI.OD_ORDER_DETL_SEQ = OOD.OD_ORDER_DETL_SEQ
		WHERE
			OCI.OD_CS_YN = 'Y'
			<include refid="csSearchSql" />
		ORDER BY OCI.APPR_REQ_DT DESC
		<if test='@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEquals(excelYn, "Y")'>
			<include refid="_common.pageLimit" />
		</if>
	</select>
</mapper>