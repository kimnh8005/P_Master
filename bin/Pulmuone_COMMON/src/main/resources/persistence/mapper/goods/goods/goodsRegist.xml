<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.pulmuone.v1.comm.mapper.goods.goods.GoodsRegistMapper">

	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 마스터 품목 상세
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2020.07.29		임상건		  최초생성
	 * @
	────────────────────────────────────────────────────────────────────────-->
	<resultMap type="kr.co.pulmuone.v1.goods.goods.dto.vo.GoodsRegistVo" id="getItemDetailtMap">
		<result column="CREATE_DT"							property="createDate"/>
		<result column="USER_NAME"							property="userName"/>
		<result column="ITEM_CREATE_LOGIN_ID"				property="itemCreateLoginId"/>
		<result column="MODIFY_DT"							property="modifyDate"/>
		<result column="MODIFY_USER_ID"						property="modifyUserId"/>
		<result column="MODIFY_USER_NAME"					property="modifyUserName"/>
		<result column="ITEM_TP_NAME"						property="itemTpName"/>
		<result column="ERP_IF_YN"							property="erpIfYn"/>
		<result column="ERP_ITEM_NM"						property="erpItemName"/>
		<result column="IL_CTGRY_STD_ID"					property="ilCategoryStadardId"/>
		<result column="CTGRY_STD_NM"						property="categoryStandardName"/>
		<result column="ERP_CTGRY_NM"						property="erpCategoryName"/>
		<result column="IL_ITEM_CD"							property="ilItemCode"/>
		<result column="ITEM_BARCODE"						property="itemBarcode"/>
		<result column="ITEM_CREATE_DT"						property="itemCreateDate"/>
		<result column="ITEM_NM"							property="masterItemName"/>
		<result column="SIZE_PER_PACKAGE"					property="sizePerPackage"/>
		<result column="SIZE_UNIT"							property="sizeUnit"/>
		<result column="SIZE_UNIT_NM"						property="sizeUnitName"/>
		<result column="QTY_PER_PACKAGE"					property="qtyPerPackage"/>
		<result column="PACKAGE_UNIT"						property="packageUnit"/>
		<result column="PACKAGE_UNIT_NM"					property="packageUnitName"/>
		<result column="PDM_GROUP_CD"						property="pdmGroupCode"/>
		<result column="SUPPLIER_NM"						property="supplierName"/>
		<result column="BRAND_NM"							property="brandName"/>
		<result column="DP_BRAND_NM"						property="dpBrandName"/>
		<result column="ITEM_GRP"							property="itemGroup"/>
		<result column="STORAGE_METHOD_TP"					property="storageMethodType"/>
		<result column="STORAGE_METHOD_NM"					property="storageMethodName"/>
		<result column="ORIGIN_TP"							property="originType"/>
		<result column="ORIGIN_DETL"						property="originDetail"/>
		<result column="DISTRIBUTION_PERIOD"				property="distributionPeriod"/>
		<result column="BOX_WIDTH"							property="boxWidth"/>
		<result column="BOX_DEPTH"							property="boxDepth"/>
		<result column="BOX_HEIGHT"							property="boxHeight"/>
		<result column="PCS_PER_BOX"						property="pcsPerBox"/>
		<result column="UOM"								property="uom"/>
		<result column="NUTRITION_DISP_YN"					property="nutritionDisplayYn"/>
		<result column="NUTRITION_DISP_DEFAULT"				property="nutritionDisplayDefault"/>
		<result column="NUTRITION_QTY_PER_ONCE"				property="nutritionQuantityPerOnce"/>
		<result column="NUTRITION_QTY_TOTAL"				property="nutritionQuantityTotal"/>
		<result column="NUTRITION_ETC"						property="nutritionEtc"/>
		<result column="BASIC_DESC"							property="basicDescription"/>
		<result column="DETL_DESC"							property="detailDescription"/>
		<result column="ETC_DESC"							property="etcDescription"/>
		<result column="VIDEO_URL"							property="videoUrl"/>
		<result column="VIDEO_AUTOPLAY_YN"					property="videoAutoplayYn"/>
		<result column="UR_SUPPLIER_ID"						property="urSupplierId"/>
		<result column="UR_BRAND_ID"						property="urBrandId"/>
		<result column="ERP_CAN_PO_YN"						property="erpCanPoYn"/>
		<result column="UNDELIVERABLE_AREA_TP"				property="undeliverableAreaType"/>
		<result column="UNDELIVERABLE_AREA_TP_NM"			property="undeliverableAreaTypeName"/>
		<result column="ERP_O2O_EXPOSURE_TP"				property="erpO2oExposureType"/>
		<result column="ERP_PRODUCT_TP"						property="erpProductType"/>
		<result column="TAX_YN"								property="taxYn"/>
		<result column="STORE_YN"							property="storeYn"/>
		<result column="ERP_ITEM_GRP"						property="erpItemGroup"/>
		<result column="ERP_STORAGE_METHOD"					property="erpStorageMethod"/>
		<result column="ERP_ORIGIN_NM"						property="erpOriginName"/>
		<result column="ERP_DISTRIBUTION_PERIOD"			property="erpDistributionPeriod"/>
		<result column="ERP_BOX_WIDTH"						property="erpBoxWidth"/>
		<result column="ERP_BOX_DEPTH"						property="erpBoxDepth"/>
		<result column="ERP_BOX_HEIGHT"						property="erpBoxHeight"/>
		<result column="ERP_PCS_PER_BOX"					property="erpPcsPerBox"/>
		<result column="ITEM_DISP_WEIGHT"					property="itemDispWeight"/>
		<result column="ITEM_REAL_WEIGHT"					property="itemRealWeight"/>
		<result column="ERP_PO_TYPE"						property="erpPoType"/>
		<result column="PO_TP_NM"							property="poTypeName"/>
		<result column="PO_PER_ITEM_YN"						property="poPerItemYn"/>
		<result column="MALLINMALL_CTGRY_ID"				property="mallinmallCategoryId"/>
		<result column="SPEC_MASTER_NM"						property="specMasterName"/>
		<result column="SUPPLIER_CD"						property="supplierCode"/>
		<result column="EXTINCTION_YN"						property="extinctionYn"/>
		<result column="RENTAL_FEE_PER_MONTH"				property="rentalFeePerMonth"/>
		<result column="RENTAL_DUE_MONTH"					property="rentalDueMonth"/>
		<result column="RENTAL_DEPOSIT"						property="rentalDeposit"/>
		<result column="RENTAL_INSTALL_FEE"					property="rentalInstallFee"/>
		<result column="RENTAL_REGIST_FEE"					property="rentalRegistFee"/>
		<result column="ITEM_CLIENT_ITEM_APPR_ID"			property="itemClientItemApprId" />
		<result column="ITEM_CLIENT_APPR_REQ_USER_ID"		property="itemClientApprReqUserId" />
		<result column="ITEM_CLIENT_APPR_STAT"				property="itemClientApprStat" />
		<result column="ITEM_CLIENT_APPR_STAT_NAME"			property="itemClientApprStatName" />
		<result column="ITEM_CLIENT_APPR_STATUS_CMNT"		property="itemClientApprStatusCmnt" />
		<result column="PO_PER_ITEM_YN"						property="poPerItemYn"/>
		<result column="ERP_CTGRY_LV1_ID"					property="erpCategoryLevel1Id"/>
		<result column="ERP_SUPPLIER_NM"					property="erpSupplierName"/>
	</resultMap>

	<select id="getItemDetail" resultMap="getItemDetailtMap">
		/* goodsRegist.getItemDetail */
		SELECT
			DATE_FORMAT(A.CREATE_DT, '%Y-%m-%d %T') AS CREATE_DT											/* 품목 등록일자 */
		, ( SELECT  U.LOGIN_ID FROM UR_USER U
			 WHERE  U.UR_USER_ID = A.CREATE_ID  )						  AS ITEM_CREATE_LOGIN_ID			/* 등록자 LOGIN ID */
		, ( SELECT  FN_DECRYPT( U.USER_NM )
			  FROM  UR_USER  U
			 WHERE  U.UR_USER_ID = A.CREATE_ID  )						  AS USER_NAME						/* 등록자명 */
		,	DATE_FORMAT(A.MODIFY_DT, '%Y-%m-%d %T') AS MODIFY_DT											/* 업데이트 날짜 */
		, IFNULL( ( SELECT  U.LOGIN_ID FROM UR_USER U
					 WHERE  U.UR_USER_ID = A.MODIFY_ID ), '' )			 AS MODIFY_USER_ID				/* 수정자 LOGIN ID */
		, CASE WHEN  A.MODIFY_ID IS NOT NULL
			   THEN (
				   SELECT  FN_DECRYPT( U.USER_NM )
					 FROM  UR_USER  U
					WHERE  U.UR_USER_ID = A.MODIFY_ID
				)
				ELSE ''
			END															AS MODIFY_USER_NAME				/* 수정자명 */
		,	A.ITEM_TP																						/* 마스터 품목유형 ID */
		,	G.NAME AS ITEM_TP_NAME																			/* 마스터 품목 유형명 */
		,	A.ERP_IF_YN																						/* ERP 품목연동 여부 */
		,	A.ERP_ITEM_NM																					/* ERP 품목명 */
		,	A.IL_CTGRY_STD_ID																				/* 표준카테고리 ID*/
		,	FN_CTGRY_STD_FULL_NAME(A.IL_CTGRY_STD_ID) AS CTGRY_STD_NM										/* 표준 카테고리 */
		,	CASE
				WHEN IFNULL(ERP_CTGRY_LV4_ID, '') &lt;&gt; '' THEN
					CONCAT(ERP_CTGRY_LV1_ID, ' > ', ERP_CTGRY_LV2_ID, ' > ', ERP_CTGRY_LV3_ID, ' > ', ERP_CTGRY_LV4_ID)
				WHEN IFNULL(ERP_CTGRY_LV3_ID, '') &lt;&gt; '' THEN
					CONCAT(ERP_CTGRY_LV1_ID, ' > ', ERP_CTGRY_LV2_ID, ' > ', ERP_CTGRY_LV3_ID)
				WHEN IFNULL(ERP_CTGRY_LV2_ID, '') &lt;&gt; '' THEN
					CONCAT(ERP_CTGRY_LV1_ID, ' > ', ERP_CTGRY_LV2_ID)
				WHEN IFNULL(ERP_CTGRY_LV1_ID, '') &lt;&gt; '' THEN
					CONCAT(ERP_CTGRY_LV1_ID)
			ELSE
				''
			END AS ERP_CTGRY_NM																				/* ERP 카테고리 */
		,	A.IL_ITEM_CD																					/* 마스터 품목 코드 */
		,	A.ITEM_BARCODE AS ITEM_BARCODE																	/* 마스터 품목 바코드*/
		,	DATE_FORMAT(NOW(), '%Y-%m-%d %T') AS ITEM_CREATE_DT											/* 상품 등록일자 */
		,	'' AS GOOD_DATE																					/* 상품 등록일자, 판매 시작일자 */
		,	'' AS UPDATE_DATE																				/* 최근 업데이트 */
		,	A.ITEM_NM																						/* 마스터 품목명 */
		,	A.SIZE_PER_PACKAGE																				/* 포장단위별 용량 */
		,	A.SIZE_UNIT																						/* 포장용량단위코드 */
		,	CASE
				WHEN H.CODE = 'UNIT_TYPE.DIRECT_INPUT' THEN A.SIZE_UNIT_ETC
			ELSE
				H.NAME
			END AS SIZE_UNIT_NM																				/* 포장용량단위명*/
		,	A.QTY_PER_PACKAGE																				/* 포장 구성 수량 */
		,	A.PACKAGE_UNIT																					/* 포장 구성 단위 */
		,	CASE
				WHEN J.CODE = 'UNIT_TYPE.DIRECT_INPUT' THEN A.PACKAGE_UNIT_ETC
			ELSE
				J.NAME
			END AS PACKAGE_UNIT_NM																			/* 포장 구성 단위명*/
		,	A.PDM_GROUP_CD																					/* PDM 그룹코드 */
		,	C.COMP_NM AS SUPPLIER_NM																		/* 공급업체 */
		,	D.BRAND_NM																						/* 표준 브랜드 */
		,	M.DP_BRAND_NM																					/* 전시 브랜드 */
		,	IFNULL(A.ITEM_GRP, '') AS ITEM_GRP																/* 상품군 */
		,	A.STORAGE_METHOD_TP																				/* 보관방법 CODE */
		,	E.NAME AS STORAGE_METHOD_NM																		/* 보관방법 */
		, ( SELECT  GBDIC.DIC_MST_NM
			  FROM  ST_COMN_CODE COMNCODE
		INNER JOIN  GB_DIC_MST GBDIC
				ON  COMNCODE.GB_DIC_MST_ID   = GBDIC.GB_DIC_MST_ID
			 WHERE  COMNCODE.ST_COMN_CODE_ID = A.ORIGIN_TP
			   AND  USE_YN = UPPER('Y')
		   )	AS  ORIGIN_TP																			   /* 원산지(해외/국내/기타) */
		, ( CASE WHEN  A.ORIGIN_TP = 'ORIGIN_TYPE.DOMESTIC'
				 THEN ''
				 WHEN  A.ORIGIN_TP = 'ORIGIN_TYPE.OVERSEAS'
				 THEN (
					 SELECT  GBDIC.DIC_MST_NM
					   FROM  ST_COMN_CODE COMNCODE
				 INNER JOIN  GB_DIC_MST GBDIC
						 ON  COMNCODE.GB_DIC_MST_ID   = GBDIC.GB_DIC_MST_ID
					  WHERE  ST_COMN_CODE_MST_CD	  = 'OVERSEAS'
						AND  COMNCODE.ST_COMN_CODE_ID = A.ORIGIN_DETL
						AND  USE_YN = UPPER('Y')
				 )
				 WHEN  A.ORIGIN_TP = 'ORIGIN_TYPE.ETC'
				 THEN (
					 SELECT  GBDIC.DIC_MST_NM
					   FROM  ST_COMN_CODE COMNCODE
				 INNER JOIN  GB_DIC_MST GBDIC
						 ON  COMNCODE.GB_DIC_MST_ID   = GBDIC.GB_DIC_MST_ID
					  WHERE  ST_COMN_CODE_MST_CD	  = 'ETC'
						AND  COMNCODE.ST_COMN_CODE_ID = A.ORIGIN_DETL
						AND  USE_YN = UPPER('Y')
				 )
			END )		AS  ORIGIN_DETL																		/* 원산지 상세(해외:국가코드, 기타:입력) */
		,	A.DISTRIBUTION_PERIOD																			/* 유통기간 */
		,	A.BOX_WIDTH																						/* 박스체적(가로) */
		,	A.BOX_DEPTH																						/* 박스체적(세로) */
		,	A.BOX_HEIGHT																					/* 박스체적(높이) */
		,	A.PCS_PER_BOX																					/* 박스입수량 */
		,	A.OMS AS UOM																					/* UOM */
		,	A.SIZE_PER_PACKAGE																				/* 포장단위별 용량 */
		,	A.NUTRITION_DISP_YN																				/* 영양정보 표시여부(Y:표시) */
		,	A.NUTRITION_DISP_DEFAULT																		/* 영양정보 기본정보(NUTRITION_DISP_YN 값이 N일때 노출되는 항목) */
		,	A.NUTRITION_QTY_PER_ONCE																		/* 영양분석단위(1회분량) */
		,	A.NUTRITION_QTY_TOTAL																			/* 영양분석단위(총분량) */
		,	A.NUTRITION_ETC																					/* 영양성분 기타 */
		,	A.BASIC_DESC																					/* 상품상세 기본정보 */
		,	A.DETL_DESC																						/* 상품상세 주요정보 */
		,	A.ETC_DESC																						/* 마스터 품목 메모 */
		,	A.VIDEO_URL																						/* 동영상 URL */
		,	A.VIDEO_AUTOPLAY_YN																				/* 비디오 자동재생 유무 */
		,	A.UR_SUPPLIER_ID																				/* 공급업체 */
		,	A.UR_BRAND_ID																					/* 브랜드 ID*/
		,	A.ERP_CAN_PO_YN																					/* 발주가능여부(올가ERP) */
		,	A.UNDELIVERABLE_AREA_TP																			/* 배송불가지역 코드*/
		,	I.NAME AS UNDELIVERABLE_AREA_TP_NM																/* 배송불가지역 명 */
		,	A.ERP_O2O_EXPOSURE_TP																			/* 매장전용품목유형 */
		,	A.ERP_PRODUCT_TP																				/* 건강생활상품유형 */
		,	A.TAX_YN																						/* 과세 구분 */
		,   IFNULL(IF(
		      	(SELECT COUNT(*)
		     	FROM IL_ITEM_WAREHOUSE T1
		     	INNER JOIN  UR_SUPPLIER_WAREHOUSE T2 ON T1.UR_SUPPLIER_WAREHOUSE_ID = T2.UR_SUPPLIER_WAREHOUSE_ID
			    JOIN ( SELECT PS_VAL FROM PS_CONFIG WHERE PS_KEY = 'WAREHOUSE_STORE_ID' ) WAREHOUSE_STORE_ID ON T2.UR_WAREHOUSE_ID = IFNULL(WAREHOUSE_STORE_ID.PS_VAL,'')
		     	WHERE T1.IL_ITEM_CD = A.IL_ITEM_CD) > 0, 'Y' ,'N'), 'N') AS STORE_YN						/* 매장(가맹점)여부 */
		,	IFNULL(A.ERP_ITEM_GRP, '정보없음') AS ERP_ITEM_GRP													/* ERP 상품군 */
		,	IFNULL(A.ERP_STORAGE_METHOD, '') AS ERP_STORAGE_METHOD											/* ERP 보관정보 */
		,	IFNULL(A.ERP_ORIGIN_NM, '') AS ERP_ORIGIN_NM													/* ERP 원산지 */
		,	IFNULL(A.ERP_DISTRIBUTION_PERIOD, '') AS ERP_DISTRIBUTION_PERIOD								/* ERP 유통기간 */
		,	IFNULL(A.ERP_BOX_WIDTH, '') AS ERP_BOX_WIDTH													/* ERP 박스 가로 */
		,	IFNULL(A.ERP_BOX_DEPTH, '') AS ERP_BOX_DEPTH													/* ERP 박스 세로 */
		,	IFNULL(A.ERP_BOX_HEIGHT, '') AS ERP_BOX_HEIGHT													/* ERP 박스 높이 */
		,	IFNULL(A.ERP_PCS_PER_BOX, '') AS ERP_PCS_PER_BOX												/* ERP 박스입수량 */
		,   IFNULL(A.ITEM_DISP_WEIGHT, '') AS ITEM_DISP_WEIGHT												/* 단품표시중량 */
		,   IFNULL(A.ITEM_REAL_WEIGHT, '') AS ITEM_REAL_WEIGHT												/* 단품실중량 */
		,	IFNULL(A.ERP_PO_TYPE,'없음') AS ERP_PO_TYPE														/* 발주유형(ERP) */
		,	IIW.IL_PO_TP_ID																					/* 발주유형ID */
		,	K.PO_TP_NM																						/* 발주유형명 */
		,	K.PO_PER_ITEM_YN																				/* 품목별 상이 여부(Y:품목별 상이) */
		,	L.ST_COMN_CODE_ID AS MALLINMALL_CTGRY_ID														/* 몰인몰 카테고리 분류값 */
		,	IFNULL((SELECT SPEC_MASTER_NM FROM IL_SPEC_MASTER WHERE IL_SPEC_MASTER_ID = A.IL_SPEC_MASTER_ID), '') AS SPEC_MASTER_NM	/* 상품정보 제공고시 > 상품군 */
		,	B.SUPPLIER_CD																					/* 공급처 코드 */
		,	A.EXTINCTION_YN																					/* 단종여부 */
		,	RENTAL_FEE_PER_MONTH																			/* 렌탈료/월 */
		,	RENTAL_DUE_MONTH																				/* 렌탈 의무사용기간(월) */
		,	RENTAL_DEPOSIT																					/* 렌탈 계약금 */
		,	RENTAL_INSTALL_FEE																				/* 렌탈 설치비 */
		,	RENTAL_REGIST_FEE																				/* 렌탈 등록비 */
		, ICIIA.IL_ITEM_APPR_ID AS ITEM_CLIENT_ITEM_APPR_ID
		, ICIIA.APPR_REQ_USER_ID AS ITEM_CLIENT_APPR_REQ_USER_ID
		, ICIIA.APPR_STAT AS ITEM_CLIENT_APPR_STAT
		, ICIIA.APPR_STAT_NAME AS ITEM_CLIENT_APPR_STAT_NAME
		, ICIIA.STATUS_CMNT AS ITEM_CLIENT_APPR_STATUS_CMNT
		,	A.ERP_CTGRY_LV1_ID
		, A.ERP_SUPPLIER_NM																					/* ERP 생산처명 */
		FROM
			IL_ITEM A
		JOIN UR_WAREHOUSE W
			ON W.UR_WAREHOUSE_ID = #{urWarehouseId}
		JOIN UR_SUPPLIER B
			ON B.UR_SUPPLIER_ID = A.UR_SUPPLIER_ID
		JOIN UR_SUPPLIER_WAREHOUSE USW
			ON W.UR_WAREHOUSE_ID = USW.UR_WAREHOUSE_ID
			AND A.UR_SUPPLIER_ID = USW.UR_SUPPLIER_ID
		JOIN IL_ITEM_WAREHOUSE IIW
			ON USW.UR_SUPPLIER_WAREHOUSE_ID = IIW.UR_SUPPLIER_WAREHOUSE_ID
			AND A.IL_ITEM_CD = IIW.IL_ITEM_CD
		JOIN UR_COMPANY C ON B.UR_COMPANY_ID = C.UR_COMPANY_ID
		LEFT JOIN UR_BRAND D ON A.UR_BRAND_ID = D.UR_BRAND_ID
		LEFT JOIN DP_BRAND M ON A.DP_BRAND_ID = M.DP_BRAND_ID
		LEFT JOIN (
			SELECT
				A.ST_COMN_CODE_ID AS CODE
				, B.DIC_NM AS NAME
			FROM
				ST_COMN_CODE A
			INNER JOIN GB_DIC B ON A.GB_DIC_MST_ID = B.GB_DIC_MST_ID AND B.GB_LANG_ID = '1'
			WHERE
				A.ST_COMN_CODE_MST_CD = 'ERP_STORAGE_TYPE'
			AND A.USE_YN = UPPER('Y')
		) E ON A.STORAGE_METHOD_TP = E.CODE
		LEFT JOIN (
			SELECT
				A.ST_COMN_CODE_ID AS CODE
				, B.DIC_NM AS NAME
			FROM
				ST_COMN_CODE A
			INNER JOIN GB_DIC B ON A.GB_DIC_MST_ID = B.GB_DIC_MST_ID AND B.GB_LANG_ID = '1'
			WHERE
				A.ST_COMN_CODE_MST_CD = 'MASTER_ITEM_TYPE'
			AND A.USE_YN = UPPER('Y')
		) G ON A.ITEM_TP = G.CODE
		LEFT JOIN (
			SELECT
				A.ST_COMN_CODE_ID AS CODE
				, B.DIC_NM AS NAME
			FROM
				ST_COMN_CODE A
			INNER JOIN GB_DIC B ON A.GB_DIC_MST_ID = B.GB_DIC_MST_ID AND B.GB_LANG_ID = '1'
			WHERE
				A.ST_COMN_CODE_MST_CD = 'UNIT_TYPE'
			AND A.USE_YN = UPPER('Y')
		) H ON A.SIZE_UNIT = H.CODE
		LEFT JOIN (
			SELECT
				A.ST_COMN_CODE_ID AS CODE
				, B.DIC_NM AS NAME
			FROM
				ST_COMN_CODE A
			INNER JOIN GB_DIC B ON A.GB_DIC_MST_ID = B.GB_DIC_MST_ID AND B.GB_LANG_ID = '1'
			WHERE
				A.ST_COMN_CODE_MST_CD = 'UNIT_TYPE'
			AND A.USE_YN = UPPER('Y')
		) J ON A.PACKAGE_UNIT = J.CODE
		LEFT JOIN (
			SELECT
				A.ST_COMN_CODE_ID AS CODE
				, B.DIC_NM AS NAME
			FROM
				ST_COMN_CODE A
			INNER JOIN GB_DIC B ON A.GB_DIC_MST_ID = B.GB_DIC_MST_ID AND B.GB_LANG_ID = '1'
			WHERE
				A.ST_COMN_CODE_MST_CD = 'UNDELIVERABLE_AREA_TP'
			AND A.USE_YN = UPPER('Y')
		) I ON A.UNDELIVERABLE_AREA_TP = I.CODE
		LEFT JOIN (
			SELECT
				A.IL_PO_TP_ID
			,	A.PO_TP_NM
			,	A.PO_PER_ITEM_YN
			FROM
				IL_PO_TP A
		) K ON IIW.IL_PO_TP_ID = K.IL_PO_TP_ID
		LEFT JOIN (
			SELECT
				ST_COMN_CODE_ID
			,	ATTR2
			FROM
				ST_COMN_CODE
			WHERE
				ST_COMN_CODE_MST_CD = 'MALL_DIV'
		) L ON L.ATTR2 = A.UR_BRAND_ID
		LEFT JOIN (
			SELECT
				IIA.IL_ITEM_CD
				, IIA.IL_ITEM_APPR_ID
				, IIA.APPR_REQ_USER_ID
				, IIA.APPR_STAT
				, DIC.NAME AS APPR_STAT_NAME
				, (
					SELECT
						IIASH.STATUS_CMNT
					FROM IL_ITEM_APPR_STATUS_HISTORY IIASH
					WHERE
						IIASH.IL_ITEM_APPR_ID = IIA.IL_ITEM_APPR_ID
						AND IIASH.APPR_STAT = IIA.APPR_STAT
					ORDER BY IIASH.IL_ITEM_APPR_STATUS_HISTORY_ID DESC
					LIMIT 1
				) AS STATUS_CMNT
			FROM IL_ITEM_APPR IIA
				LEFT JOIN (
					SELECT
						SCC.ST_COMN_CODE_ID AS CODE
						, GDM.DIC_MST_NM AS NAME
					FROM ST_COMN_CODE SCC
						INNER JOIN GB_DIC_MST GDM
							ON SCC.GB_DIC_MST_ID = GDM.GB_DIC_MST_ID
					WHERE
						SCC.ST_COMN_CODE_MST_CD = 'APPR_STAT'
						AND SCC.USE_YN = UPPER('Y')
				) DIC
					ON IIA.APPR_STAT = DIC.CODE
			WHERE
				IIA.IL_ITEM_APPR_ID IN (
					SELECT
						MAX(IL_ITEM_APPR_ID) AS IL_ITEM_APPR_ID
					FROM IL_ITEM_APPR
					WHERE
						APPR_KIND_TP = 'APPR_KIND_TP.ITEM_CLIENT'
						<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(ilItemCode)">
						AND IL_ITEM_CD = #{ilItemCode}
						</if>
						AND APPR_STAT IN ('APPR_STAT.REQUEST', 'APPR_STAT.SUB_APPROVED')
					GROUP BY IL_ITEM_CD
				)
		) ICIIA
			ON ICIIA.IL_ITEM_CD = A.IL_ITEM_CD
		WHERE
			1=1
		<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(ilItemCode)">
		AND	A.IL_ITEM_CD = #{ilItemCode}
		</if>
	</select>

	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 마스터 품목 상품정보 제공고시
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2020.08.06		임상건		  최초생성
	 * @
	────────────────────────────────────────────────────────────────────────-->
	<resultMap type="kr.co.pulmuone.v1.goods.goods.dto.vo.GoodsRegistVo" id="getItemSpecValueMap">
		<result column="SPEC_FIELD_NM"							property="specFieldName"/>
		<result column="SPEC_FIELD_VAL"							property="specFieldValue"/>
	</resultMap>
	<select id="getItemSpecValueList" resultMap="getItemSpecValueMap">
		/* goodsRegist.getItemSpecValueList */
		SELECT
			E.SPEC_FIELD_NM
		,	CASE
				WHEN E.SPEC_FIELD_CD = 'SPEC_FIELD_02' THEN IFNULL((
					SELECT
						CSTMR_SRVC_TEL
					FROM
						UR_COMPANY A1
						INNER JOIN UR_HEADQUARTERS B1
							ON B1.UR_COMPANY_ID = A1.UR_COMPANY_ID
					WHERE
						A1.COMP_TP = 'COMPANY_TYPE.HEADQUARTERS'
					LIMIT 1
				), '080-022-0085')
				WHEN E.SPEC_FIELD_CD = 'SPEC_FIELD_01' THEN
					CASE
						WHEN F.IL_ITEM_SPEC_VALUE_ID IS NOT NULL AND F.DIRECT_YN = 'Y' THEN F.SPEC_FIELD_VAL
						ELSE
							IFNULL((
								SELECT
									CASE
										WHEN DELIVERY > 30 THEN CONCAT('잔여 유통기한이 ', DELIVERY, '일 이상 남은 제품이 배송됩니다. / 유통기한 : ', C2.DISTRIBUTION_PERIOD, '일')
										ELSE CONCAT(DELIVERY, '일 이내 제조된 제품이 배송됩니다. / 유통기한 : ', C2.DISTRIBUTION_PERIOD, '일')
									END
								FROM
									IL_ITEM_WAREHOUSE A2
									INNER JOIN UR_SUPPLIER_WAREHOUSE B2
										ON B2.UR_SUPPLIER_WAREHOUSE_ID = A2.UR_SUPPLIER_WAREHOUSE_ID
									INNER JOIN IL_STOCK_DEADLINE C2
										ON C2.UR_SUPPLIER_ID = B2.UR_SUPPLIER_ID
										AND C2.UR_WAREHOUSE_ID IN (B2.UR_WAREHOUSE_ID, 0)
										AND C2.BASIC_YN = 'Y'
								WHERE
									A2.IL_ITEM_CD = B.IL_ITEM_CD
									AND B2.UR_WAREHOUSE_ID = #{urWarehouseId}
									AND C2.DISTRIBUTION_PERIOD &lt;= B.DISTRIBUTION_PERIOD
								ORDER BY C2.UR_WAREHOUSE_ID DESC, C2.DISTRIBUTION_PERIOD DESC
								LIMIT 1
							), '0일 이내 제조된 제품이 배송됩니다. / 유통기한 : 0일')
					END
				WHEN F.IL_ITEM_SPEC_VALUE_ID IS NULL THEN E.BASIC_VAL
			ELSE F.SPEC_FIELD_VAL
			END AS SPEC_FIELD_VAL
		FROM
			IL_ITEM B
		INNER JOIN IL_SPEC_MASTER C
			ON C.IL_SPEC_MASTER_ID = B.IL_SPEC_MASTER_ID
			AND C.USE_YN = 'Y'
		INNER JOIN IL_SPEC_MASTER_FIELD D
			ON D.IL_SPEC_MASTER_ID = C.IL_SPEC_MASTER_ID
		INNER JOIN IL_SPEC_FIELD E
			ON E.IL_SPEC_FIELD_ID = D.IL_SPEC_FIELD_ID
		LEFT JOIN IL_ITEM_SPEC_VALUE F
			ON F.IL_ITEM_CD = B.IL_ITEM_CD
			AND F.IL_SPEC_FIELD_ID = E.IL_SPEC_FIELD_ID
		WHERE
			B.IL_ITEM_CD = #{ilItemCode}
		ORDER BY D.SORT
	</select>

	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 마스터 품목 상품영양정보
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2020.08.06		임상건		  최초생성
	 * @
	────────────────────────────────────────────────────────────────────────-->
	<resultMap type="kr.co.pulmuone.v1.goods.goods.dto.vo.GoodsRegistVo" id="getItemNutritionMap">
		<result column="IL_ITEM_NUTRITION_ID"					property="ilItemNutritionId"/>
		<result column="NUTRITION_NM"							property="nutritionName"/>
		<result column="ERP_NUTRITION_QTY"						property="erpNutritionQty"/>
		<result column="ERP_NUTRITION_PERCENT"					property="erpNutritionPercent"/>
		<result column="NUTRITION_QTY"							property="nutritionQty"/>
		<result column="NUTRITION_PERCENT"						property="nutritionPercent"/>
		<result column="NUTRITION_UNIT"							property="nutritionUnit"/>
	</resultMap>

	<select id="getItemNutritionList" resultMap="getItemNutritionMap">
		/* goodsRegist.getItemNutritionList */
		SELECT
			A.IL_ITEM_NUTRITION_ID
		,	A.IL_ITEM_CD
		,	B.NUTRITION_NM
		,	A.ERP_NUTRITION_PERCENT
		,	A.NUTRITION_QTY
		,	A.NUTRITION_PERCENT
		,	B.NUTRITION_UNIT
		FROM
			IL_ITEM_NUTRITION A
		INNER JOIN IL_NUTRITION B ON A.IL_NUTRITION_CD = B.IL_NUTRITION_CD
		WHERE
			B.DEL_YN = 'N'
		<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(ilItemCode)">
		AND	A.IL_ITEM_CD = #{ilItemCode}
		</if>
	</select>

	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 마스터 품목 상품 인증정보
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2020.08.06		임상건		  최초생성
	 * @
	────────────────────────────────────────────────────────────────────────-->
	<select id="getItemCertificationList" resultType="kr.co.pulmuone.v1.goods.goods.dto.vo.GoodsRegistVo">
		/* goodsRegist.getItemCertificationList */
		SELECT
			A.IL_ITEM_CERTIFICATION_ID
		,	A.IL_CERTIFICATION_ID
		,	B.IMG_PATH				AS IMAGE_PATH
		,	B.IMG_NM				AS IMAGE_NAME
		,	B.IMG_ORIGIN_NM			AS IMAGE_ORIGINAL_NAME
		,	B.CERTIFICATION_NM		AS CERTIFICATION_NAME
		,	B.DEFAULT_CERTIFICATION_DESC
		,   CASE WHEN  A.CERTIFICATION_DESC IS NULL OR TRIM(A.CERTIFICATION_DESC) = ''
				 THEN  B. DEFAULT_CERTIFICATION_DESC
				 ELSE  A.CERTIFICATION_DESC
			 END					AS CERTIFICATION_DESC
		FROM
			IL_ITEM_CERTIFICATION A
		INNER JOIN IL_CERTIFICATION B ON A.IL_CERTIFICATION_ID = B.IL_CERTIFICATION_ID
		WHERE
			B.DEL_YN = 'N'
		AND	B.USE_YN = 'Y'
		<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(ilItemCode)">
		AND	A.IL_ITEM_CD = #{ilItemCode}
		</if>
	</select>

	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 마스터 품목 상품 상세이미지
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2020.08.06		임상건		  최초생성
	 * @
	────────────────────────────────────────────────────────────────────────-->
	<select id="getItemImageList" resultType="kr.co.pulmuone.v1.goods.goods.dto.vo.GoodsRegistVo">
		/* goodsRegist.getItemImageList */
		SELECT
			IL_ITEM_IMG_ID		AS IL_ITEM_IMAGE_ID
		,	BASIC_YN
		,	IMG_NM				AS ITEM_IMAGE_NAME
		,	B_IMG
		,	M_IMG
		,	MS_IMG
		,	S_IMG
		,	C_IMG
		FROM
			IL_ITEM_IMG
		<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(ilItemCode)">
		WHERE
			IL_ITEM_CD = #{ilItemCode}
		</if>
		ORDER BY SORT
	</select>

	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 상품 마스터 저장(IL_GOODS)
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2020.08.13		임상건		  최초생성
	 * @
	────────────────────────────────────────────────────────────────────────-->
	<insert id="addGoods" parameterType="kr.co.pulmuone.v1.goods.goods.dto.vo.GoodsRegistVo" useGeneratedKeys="true" keyProperty="ilGoodsId">
		/* goodsRegist.addGoods */
		INSERT INTO IL_GOODS
		(
			IL_ITEM_CD
		,	UR_WAREHOUSE_ID
		,	GOODS_TP
		,	SALE_TP
		,	GREEN_JUICE_CLEANSE_OPT_YN
		,	GOODS_NM
		,	PACKAGE_UNIT_DISP_YN
		,	PACKAGE_UNIT_DESC
		,	PROMOTION_NM
		<choose>
			<when test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEquals(promotionNameStartDate, '')">
			,	PROMOTION_NM_START_DT
			</when>
			<when test="@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(promotionNameStartDate, '')">
			,	PROMOTION_NM_START_DT
			</when>
		</choose>
		<choose>
			<when test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEquals(promotionNameEndDate, '')">
			,	PROMOTION_NM_END_DT
			</when>
			<when test="@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(promotionNameEndDate, '')">
			,	PROMOTION_NM_END_DT
			</when>
		</choose>
		,	GOODS_DESC
		,	SEARCH_KYWRD
		,	PURCHASE_MEMBER_YN
		,	PURCHASE_EMPLOYEE_YN
		,	PURCHASE_NONMEMBER_YN
		,	DISP_WEB_PC_YN
		,	DISP_WEB_MOBILE_YN
		,	DISP_APP_YN
		,	SALE_START_DT
		,	SALE_END_DT
		,	DISP_YN
		,	SALE_STATUS
		,	AUTO_DISP_SIZE_YN
		,	SIZE_ETC
		,	SALE_SHOP_YN
		,	COUPON_USE_YN
		,	LIMIT_MIN_CNT
		,	LIMIT_MAX_TP
		,	LIMIT_MAX_DURATION
			<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(limitMaximumCnt)">
		,	LIMIT_MAX_CNT
			</if>
		,	MD_RECOMMEND_YN
		,	GOODS_MEMO
		,	DEL_YN
		,	NOTICE_BELOW_1_IMG_URL
		,	NOTICE_BELOW_1_START_DT
		,	NOTICE_BELOW_2_START_DT
		,	NOTICE_BELOW_2_IMG_URL
		,	NOTICE_BELOW_1_END_DT
		,	NOTICE_BELOW_2_END_DT

		,	GOODS_PACKAGE_IMG_TP
		,	GOODS_PACKAGE_BASIC_DESC_YN
		,	GOODS_PACKAGE_BASIC_DESC
		,	GOODS_PACKAGE_VIDEO_URL

		<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(goodsPackageVideoAutoplayYn)">
		,	GOODS_PACKAGE_VIDEO_AUTOPLAY_YN
		</if>
		<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(goodsDailyType)">
		,	GOODS_DAILY_TP
		</if>
		,	GOODS_DAILY_ALLERGY_YN
		,	GOODS_DAILY_BULK_YN
		<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(goodsOutmallSaleStatus)">
		,	GOODS_OUTMALL_SALE_STAT
		</if>
		<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(presentYn)">
			,	PRESENT_YN
		</if>
		,	CREATE_ID
		,	CREATE_DT
		)
		VALUES
		(
			#{ilItemCode}
		,	#{urWarehouseId}
		,	#{goodsType}
		,	#{saleType}
		,	#{greenJuiceCleanseOptYn}
		,	TRIM(#{goodsName})
		,	#{packageUnitDisplayYn}
		,	#{packageUnitDesc}
		,	#{promotionName}
		<choose>
			<when test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEquals(promotionNameStartDate, '')">
			,	#{promotionNameStartDate}
			</when>
			<when test="@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(promotionNameStartDate, '')">
			,	NULL
			</when>
		</choose>
		<choose>
			<when test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEquals(promotionNameEndDate, '')">
			,	DATE_FORMAT(CONCAT(#{promotionNameEndDate}, ':59'), '%Y-%m-%d %H:%i:%s')
			</when>
			<when test="@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(promotionNameEndDate, '')">
			,	NULL
			</when>
		</choose>
		,	#{goodsDesc}
		,	#{searchKeyword}
		,	#{purchaseMemberYn}
		,	#{purchaseEmployeeYn}
		,	#{purchaseNonmemberYn}
		,	#{displayWebPcYn}
		,	#{displayWebMobileYn}
		,	#{displayAppYn}
		,	#{saleStartDate}
		,	DATE_FORMAT(CONCAT(#{saleEndDate}, ':59'), '%Y-%m-%d %H:%i:%s')
		,	#{displayYn}
		,	#{saleStatus}
		,	#{autoDisplaySizeYn}
		,	#{sizeEtc}
		,	#{saleShopYn}
		,	#{couponUseYn}
		,	#{limitMinimumCnt}
		,	#{limitMaximumType}
		,	#{limitMaximumDuration}
			<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(limitMaximumCnt)">
		,	#{limitMaximumCnt}
			</if>
		,	#{mdRecommendYn}
		,	#{goodsMemo}
		,	'N'
		,	#{noticeBelow1ImageUrl}
		,	#{noticeBelow1StartDate}
		,	#{noticeBelow2StartDate}
		,	#{noticeBelow2ImageUrl}
		,	DATE_FORMAT(CONCAT(#{noticeBelow1EndDate}, ':59'), '%Y-%m-%d %H:%i:%s')
		,	DATE_FORMAT(CONCAT(#{noticeBelow2EndDate}, ':59'), '%Y-%m-%d %H:%i:%s')
		,	#{goodsPackageImageType}
		,	#{goodsPackageBasicDescYn}
		,	#{goodsPackageBasicDesc}
		,	#{goodsPackageVideoUrl}
		<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(goodsPackageVideoAutoplayYn)">
		,	#{goodsPackageVideoAutoplayYn}
		</if>
		<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(goodsDailyType)">
		,	#{goodsDailyType}
		</if>
		,	#{goodsDailyAllergyYn}
		,	#{goodsDailyBulkYn}
		<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(goodsOutmallSaleStatus)">
		,	#{goodsOutmallSaleStatus}
		</if>
		<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(presentYn)">
			,	#{presentYn}
		</if>
		,	#{createId}
		,	SYSDATE()
		)
	</insert>

	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 상품 마스터 수정(IL_GOODS)
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2020.09.02		임상건		  최초생성
	 * @
	────────────────────────────────────────────────────────────────────────-->
	<update id="modifyGoods">
		/* goodsRegist.modifyGoods */
		UPDATE IL_GOODS SET
			IL_ITEM_CD = #{ilItemCode}
		,	UR_WAREHOUSE_ID = #{urWarehouseId}
		,	GOODS_TP = #{goodsType}
		,	SALE_TP = #{saleType}
		,	GREEN_JUICE_CLEANSE_OPT_YN = #{greenJuiceCleanseOptYn}
		<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(greenJuiceCleanseOptYn, 'Y')">
			,	PICKABLE_YN = 'N'
		</if>
		,	GOODS_NM = TRIM(#{goodsName})
		,	PACKAGE_UNIT_DISP_YN = #{packageUnitDisplayYn}
		,	PACKAGE_UNIT_DESC = #{packageUnitDesc}
		,	PROMOTION_NM = #{promotionName}
		<choose>
			<when test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEquals(promotionNameStartDate, '')">
			,	PROMOTION_NM_START_DT = #{promotionNameStartDate}
			</when>
			<when test="@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(promotionNameStartDate, '')">
			,	PROMOTION_NM_START_DT = NULL
			</when>
		</choose>
		<choose>
			<when test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEquals(promotionNameEndDate, '')">
			,	PROMOTION_NM_END_DT = DATE_FORMAT(CONCAT(#{promotionNameEndDate}, ':59'), '%Y-%m-%d %H:%i:%s')
			</when>
			<when test="@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(promotionNameEndDate, '')">
			,	PROMOTION_NM_END_DT = NULL
			</when>
		</choose>
		,	GOODS_DESC = #{goodsDesc}
		,	SEARCH_KYWRD = #{searchKeyword}
		,	PURCHASE_MEMBER_YN = #{purchaseMemberYn}
		,	PURCHASE_EMPLOYEE_YN = #{purchaseEmployeeYn}
		,	PURCHASE_NONMEMBER_YN = #{purchaseNonmemberYn}
		,	DISP_WEB_PC_YN = #{displayWebPcYn}
		,	DISP_WEB_MOBILE_YN = #{displayWebMobileYn}
		,	DISP_APP_YN = #{displayAppYn}
		,	SALE_START_DT = #{saleStartDate}
		,	SALE_END_DT = DATE_FORMAT(CONCAT(#{saleEndDate}, ':59'), '%Y-%m-%d %H:%i:%s')
		,	DISP_YN = #{displayYn}
		,	SALE_STATUS = #{saleStatus}
		,	AUTO_DISP_SIZE_YN = #{autoDisplaySizeYn}
		,	SIZE_ETC = #{sizeEtc}
		,	SALE_SHOP_YN = #{saleShopYn}
		,	COUPON_USE_YN = #{couponUseYn}
		,	LIMIT_MIN_CNT = #{limitMinimumCnt}
		,	LIMIT_MAX_TP = #{limitMaximumType}
		,	LIMIT_MAX_DURATION = #{limitMaximumDuration}
			<choose>
				<when test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(limitMaximumCnt)">
					,	LIMIT_MAX_CNT = #{limitMaximumCnt}
				</when>
				<otherwise>
					,	LIMIT_MAX_CNT = null
				</otherwise>
			</choose>
		,	MD_RECOMMEND_YN = #{mdRecommendYn}
		,	GOODS_MEMO = #{goodsMemo}
		,	NOTICE_BELOW_1_IMG_URL = #{noticeBelow1ImageUrl}
		,	NOTICE_BELOW_1_START_DT = #{noticeBelow1StartDate}
		,	NOTICE_BELOW_2_START_DT = #{noticeBelow2StartDate}
		,	NOTICE_BELOW_2_IMG_URL = #{noticeBelow2ImageUrl}
		,	NOTICE_BELOW_1_END_DT = DATE_FORMAT(CONCAT(#{noticeBelow1EndDate}, ':59'), '%Y-%m-%d %H:%i:%s')
		,	NOTICE_BELOW_2_END_DT = DATE_FORMAT(CONCAT(#{noticeBelow2EndDate}, ':59'), '%Y-%m-%d %H:%i:%s')
		,	GOODS_PACKAGE_IMG_TP = #{goodsPackageImageType}
		,	GOODS_PACKAGE_BASIC_DESC_YN = #{goodsPackageBasicDescYn}
		,	GOODS_PACKAGE_BASIC_DESC = #{goodsPackageBasicDesc}
		,	GOODS_PACKAGE_VIDEO_URL = #{goodsPackageVideoUrl}
		<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(goodsPackageVideoAutoplayYn)">
		,	GOODS_PACKAGE_VIDEO_AUTOPLAY_YN = #{goodsPackageVideoAutoplayYn}
		</if>
		<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(goodsDailyType)">
		,	GOODS_DAILY_TP = #{goodsDailyType}
		</if>
		,	GOODS_DAILY_ALLERGY_YN = #{goodsDailyAllergyYn}
		,	GOODS_DAILY_BULK_YN = #{goodsDailyBulkYn}
		<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(goodsOutmallSaleStatus)">
		,	GOODS_OUTMALL_SALE_STAT = #{goodsOutmallSaleStatus}
		</if>
		<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(presentYn)">
			,	PRESENT_YN = #{presentYn}
		</if>
		WHERE
			IL_GOODS_ID = #{ilGoodsId}
	</update>

	<!--───────────────────────────────────────────────────────────────────────
 * description 		: 상품 마스터 수정일자 업데이트(IL_GOODS)
 * @
 * @ 수정일			수정자		  수정내용
 * @ ──────────────────────────────────────────────────────────────────────
 * @ 2021.06.02		이명수		  상품 수정정보 업데이트
 * @
────────────────────────────────────────────────────────────────────────-->
	<update id="modifyDateGoods">
		/* goodsRegist.modifyDateGoods */
		UPDATE IL_GOODS SET
			MODIFY_ID = #{modifyId}
		,	MODIFY_DT = SYSDATE()
		WHERE
		IL_GOODS_ID = #{ilGoodsId}
	</update>


	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 배송/발주 정보 > 배송유형 > 품목별 출고처별 배송유형 리스트
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2020.08.18		임상건		  최초생성
	 * @
	────────────────────────────────────────────────────────────────────────-->
	<resultMap type="kr.co.pulmuone.v1.goods.goods.dto.vo.GoodsRegistItemWarehouseVo" id="itemWarehouseMap">
		<result column="IL_ITEM_WAREHOUSE_ID"		property="ilItemWarehouseId"/>
		<result column="UR_SUPPLIER_WAREHOUSE_ID"	property="urSupplierWarehouseId"/>
		<result column="UR_SUPPLIER_ID"				property="urSupplierId"/>
		<result column="UR_WAREHOUSE_ID"			property="urWarehouseId"/>
		<result column="DLVRY_TYPE_NM"				property="deliveryTypeName"/>
		<result column="DLVRY_TYPE_CODE"			property="deliveryTypeCode"/>
		<result column="WAREHOUSE_NM"				property="warehouseName"/>
		<result column="ZIP_CD"						property="zipCd"/>
		<result column="ADDRESS1"					property="address1"/>
		<result column="ADDRESS2"					property="address2"/>
		<result column="ORIG_IL_SHIPPING_TMPL_ID"	property="orgIlShippingTemplateId"/>
		<result column="ERP_PO_TYPE"				property="erpPoType"/>
		<result column="PO_TP_NM"					property="poTypeName"/>
		<result column="PO_TP_DETAIL_POPUP_YN"		property="poTypeDetailPopupYn"/>
		<result column="ERP_ITEM_NM"				property="erpItemName"/>
		<result column="IL_ITEM_CD"					property="ilItemCode"/>
		<result column="IL_PO_TP_ID"				property="ilPoTypeId"/>
	</resultMap>

	<select id="itemWarehouseList" resultMap="itemWarehouseMap">
		/* goodsRegist.itemWarehouseList */
		SELECT
			A.IL_ITEM_WAREHOUSE_ID
		,	A.UR_SUPPLIER_WAREHOUSE_ID
		,	B.UR_SUPPLIER_ID
		,	B.UR_WAREHOUSE_ID
		,	CASE
				WHEN WAREHOUSE_STORE_ID.PS_VAL = B.UR_WAREHOUSE_ID THEN
					'매장 배송/픽업'
				WHEN C.DAWN_DLVRY_YN = 'Y' THEN
					'일반배송/새벽배송'
				WHEN C.DAWN_DLVRY_YN = 'N' THEN
					'일반배송'
			END AS DLVRY_TYPE_NM
		,	CASE
				WHEN C.DAWN_DLVRY_YN = 'Y' THEN
					'NORMAL_DAWN'
				WHEN C.DAWN_DLVRY_YN = 'N' THEN
					'NORMAL'
			END AS DLVRY_TYPE_CODE
		,	C.WAREHOUSE_NM
		,	C.ZIP_CD
		,	IFNULL(C.ADDRESS1, '') AS ADDRESS1
		,	IFNULL(C.ADDRESS2, '') AS ADDRESS2
		,	(
				SELECT
					D.ORIG_IL_SHIPPING_TMPL_ID
				FROM
					IL_SHIPPING_WAREHOUSE C
				INNER JOIN IL_SHIPPING_TEMPLATE D ON C.IL_SHIPPING_TMPL_ID = D.IL_SHIPPING_TMPL_ID
				WHERE
					D.DEL_YN = 'N'
				AND	C.UR_WAREHOUSE_ID = B.UR_WAREHOUSE_ID
				ORDER BY C.BASIC_YN DESC, D.ORIG_IL_SHIPPING_TMPL_ID DESC
				LIMIT 1
			) AS ORIG_IL_SHIPPING_TMPL_ID
		,	IFNULL(REPLACE(IPT.ERP_PO_TP, 'ERP_PO_TP.', ''), '') AS ERP_PO_TP
		,	IFNULL(NULLIF(II.ERP_PO_TYPE, ''), '없음') AS ERP_PO_TYPE
		,	IFNULL(NULLIF(IPT.PO_TP_NM, ''), '없음') AS PO_TP_NM
		,	CASE WHEN IPT.TEMPLATE_YN = 'N' AND IPT.PO_PER_ITEM_YN = 'Y' THEN TRUE
			ELSE FALSE END AS PO_TP_DETAIL_POPUP_YN
		,	II.ERP_ITEM_NM
		,	II.IL_ITEM_CD
		,	IPT.IL_PO_TP_ID
		FROM
			IL_ITEM II
		INNER JOIN IL_ITEM_WAREHOUSE A	ON II.IL_ITEM_CD = A.IL_ITEM_CD /* 품목별 출고처 관리 */
		INNER JOIN
			UR_SUPPLIER_WAREHOUSE B /* 공급처_출고처 */ ON A.UR_SUPPLIER_WAREHOUSE_ID = B.UR_SUPPLIER_WAREHOUSE_ID
		INNER JOIN
			UR_WAREHOUSE C /* 출고처 */ ON B.UR_WAREHOUSE_ID = C.UR_WAREHOUSE_ID
		LEFT JOIN
			IL_PO_TP IPT ON IPT.IL_PO_TP_ID = A.IL_PO_TP_ID
		JOIN ( SELECT PS_VAL FROM PS_CONFIG WHERE PS_KEY = 'WAREHOUSE_STORE_ID' ) WAREHOUSE_STORE_ID
		WHERE
			A.IL_ITEM_CD = #{ilItemCode}
		AND	C.UR_WAREHOUSE_ID = #{urWarehouseId}
		<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(storeYn, 'Y')">
		UNION ALL
		SELECT
			*
		FROM
		(
			SELECT
				A.IL_ITEM_WAREHOUSE_ID
			,	A.UR_SUPPLIER_WAREHOUSE_ID
			,	B.UR_SUPPLIER_ID
			,	B.UR_WAREHOUSE_ID
			,	'매장 배송/픽업' AS DLVRY_TYPE_NM
			,	'SHOP' AS DLVRY_TYPE_CODE
			,	C.WAREHOUSE_NM
			,	'' AS ZIP_CD
			,	'' AS ADDRESS1
			,	'' AS ADDRESS2
			,	(
					SELECT
						D.ORIG_IL_SHIPPING_TMPL_ID
					FROM
						IL_SHIPPING_WAREHOUSE C
					INNER JOIN IL_SHIPPING_TEMPLATE D ON C.IL_SHIPPING_TMPL_ID = D.IL_SHIPPING_TMPL_ID
					WHERE
						D.DEL_YN = 'N'
					AND	C.UR_WAREHOUSE_ID = B.UR_WAREHOUSE_ID
					ORDER BY C.BASIC_YN DESC, D.ORIG_IL_SHIPPING_TMPL_ID DESC
					LIMIT 1
				) AS ORIG_IL_SHIPPING_TMPL_ID
			,	IFNULL(REPLACE(IPT.ERP_PO_TP, 'ERP_PO_TP.', ''), '') AS ERP_PO_TP
			,	IFNULL(II.ERP_PO_TYPE, '없음') AS ERP_PO_TYPE
			,	IFNULL(IPT.PO_TP_NM, '') AS PO_TP_NM
			,	CASE WHEN IPT.TEMPLATE_YN = 'N' AND IPT.PO_PER_ITEM_YN = 'Y' THEN TRUE
				ELSE FALSE END AS PO_TP_DETAIL_POPUP_YN
			,	II.ERP_ITEM_NM
			,	II.IL_ITEM_CD
			,	IPT.IL_PO_TP_ID
			FROM
				IL_ITEM II
			INNER JOIN IL_ITEM_WAREHOUSE A	ON II.IL_ITEM_CD = A.IL_ITEM_CD /* 품목별 출고처 관리 */
			INNER JOIN
				UR_SUPPLIER_WAREHOUSE B /* 공급처_출고처 */ ON A.UR_SUPPLIER_WAREHOUSE_ID = B.UR_SUPPLIER_WAREHOUSE_ID
			INNER JOIN
				UR_WAREHOUSE C /* 출고처 */ ON B.UR_WAREHOUSE_ID = C.UR_WAREHOUSE_ID
			LEFT JOIN
				IL_PO_TP IPT /* 발주유형 */ ON IPT.IL_PO_TP_ID = A.IL_PO_TP_ID
			WHERE
				A.IL_ITEM_CD = #{ilItemCode}
			AND	C.UR_WAREHOUSE_ID != #{urWarehouseId}
			AND	C.STORE_YN = 'Y'
			ORDER BY UR_WAREHOUSE_ID
			LIMIT 1
		) STORE
		</if>
	</select>

	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 배송/발주 정보 > 배송유형 > 품목별 출고처별 배송유형 리스트(일일상품용/ 일일상품의 경우, 가맹점 배송만 처리)
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2020.11.26		임상건		  최초생성
	 * @
	────────────────────────────────────────────────────────────────────────-->
	<resultMap type="kr.co.pulmuone.v1.goods.goods.dto.vo.GoodsRegistItemWarehouseVo" id="dailyGoodsItemWarehouseMap">
		<result column="IL_ITEM_WAREHOUSE_ID"		property="ilItemWarehouseId"/>
		<result column="UR_SUPPLIER_WAREHOUSE_ID"	property="urSupplierWarehouseId"/>
		<result column="UR_SUPPLIER_ID"				property="urSupplierId"/>
		<result column="UR_WAREHOUSE_ID"			property="urWarehouseId"/>
		<result column="DLVRY_TYPE_NM"				property="deliveryTypeName"/>
		<result column="WAREHOUSE_NM"				property="warehouseName"/>
		<result column="ZIP_CD"						property="zipCd"/>
		<result column="ADDRESS1"					property="address1"/>
		<result column="ADDRESS2"					property="address2"/>
		<result column="ORIG_IL_SHIPPING_TMPL_ID"	property="orgIlShippingTemplateId"/>
		<result column="ERP_PO_TYPE"				property="erpPoType"/>
		<result column="PO_TP_NM"					property="poTypeName"/>
		<result column="PO_TP_DETAIL_POPUP_YN"		property="poTypeDetailPopupYn"/>
	</resultMap>

	<select id="dailyGoodsItemWarehouseList" resultMap="dailyGoodsItemWarehouseMap">
		/* goodsRegist.dailyGoodsItemWarehouseList */
		SELECT
			A.IL_ITEM_WAREHOUSE_ID
		,	A.UR_SUPPLIER_WAREHOUSE_ID
		,	B.UR_SUPPLIER_ID
		,	B.UR_WAREHOUSE_ID
		,	'가맹점 배송' DLVRY_TYPE_NM
		,	C.WAREHOUSE_NM
		,	C.ZIP_CD
		,	IFNULL(C.ADDRESS1, '') AS ADDRESS1
		,	IFNULL(C.ADDRESS2, '') AS ADDRESS2
		,	(
				SELECT
					D.ORIG_IL_SHIPPING_TMPL_ID
				FROM
					IL_SHIPPING_WAREHOUSE C
				INNER JOIN IL_SHIPPING_TEMPLATE D ON C.IL_SHIPPING_TMPL_ID = D.IL_SHIPPING_TMPL_ID
				WHERE
					D.DEL_YN = 'N'
				AND	C.UR_WAREHOUSE_ID = B.UR_WAREHOUSE_ID
				ORDER BY C.BASIC_YN DESC, D.ORIG_IL_SHIPPING_TMPL_ID DESC
				LIMIT 1
			) AS ORIG_IL_SHIPPING_TMPL_ID
		,	IFNULL(REPLACE(IPT.ERP_PO_TP, 'ERP_PO_TP.', ''), '') AS ERP_PO_TP
		,	IFNULL(II.ERP_PO_TYPE, '없음') AS ERP_PO_TYPE
		,	IFNULL(IPT.PO_TP_NM, '') AS PO_TP_NM
		,	CASE WHEN IPT.TEMPLATE_YN = 'N' AND IPT.PO_PER_ITEM_YN = 'N' THEN TRUE
			ELSE FALSE END AS PO_TP_DETAIL_POPUP_YN
		,	II.ERP_ITEM_NM
		,	II.IL_ITEM_CD
		,	IPT.IL_PO_TP_ID
		FROM
			IL_ITEM II
		INNER JOIN IL_ITEM_WAREHOUSE A	ON II.IL_ITEM_CD = A.IL_ITEM_CD /* 품목별 출고처 관리 */
		INNER JOIN
			UR_SUPPLIER_WAREHOUSE B /* 공급처_출고처 */ ON A.UR_SUPPLIER_WAREHOUSE_ID = B.UR_SUPPLIER_WAREHOUSE_ID
		INNER JOIN
			UR_WAREHOUSE C /* 출고처 */ ON B.UR_WAREHOUSE_ID = C.UR_WAREHOUSE_ID
		LEFT JOIN
			IL_PO_TP IPT /* 발주유형 */ ON IPT.IL_PO_TP_ID = A.IL_PO_TP_ID
		WHERE
			A.IL_ITEM_CD = #{ilItemCode}
		AND	C.UR_WAREHOUSE_ID = #{urWarehouseId}
		ORDER BY UR_WAREHOUSE_ID
		LIMIT 1
	</select>

	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 배송/발주 정보 > 배송유형 > 품목별 출고처별 배송유형 > 베송 정책 리스트
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2020.08.19		임상건		  최초생성
	 * @
	────────────────────────────────────────────────────────────────────────-->
	<resultMap type="kr.co.pulmuone.v1.goods.goods.dto.vo.GoodsRegistItemWarehouseVo" id="itemWarehouseShippingTemplateMap">
		<result column="IL_SHIPPING_TMPL_ID"					property="ilShippingTemplateId"/>
		<result column="ORIG_IL_SHIPPING_TMPL_ID"				property="orgIlShippingTemplateId"/>
		<result column="NAME"									property="shppingTemplateName"/>
	</resultMap>

	<select id="itemWarehouseShippingTemplateList" resultMap="itemWarehouseShippingTemplateMap">
		/* goodsRegist.itemWarehouseShippingTemplateList */
		SELECT
			MAX(D.IL_SHIPPING_TMPL_ID) AS IL_SHIPPING_TMPL_ID
		,	D.ORIG_IL_SHIPPING_TMPL_ID
		,	CASE
				WHEN MAX(C.BASIC_YN) ='Y' THEN CONCAT('(기본) ', MAX(D.NAME))
				WHEN MAX(C.BASIC_YN) ='N' THEN MAX(D.NAME)
			END AS NAME
		FROM
			IL_ITEM_WAREHOUSE A	/* 품목별 출고처 관리 */
		INNER JOIN
			UR_SUPPLIER_WAREHOUSE B /* 공급처_출고처 */ ON A.UR_SUPPLIER_WAREHOUSE_ID = B.UR_SUPPLIER_WAREHOUSE_ID
		INNER JOIN
			UR_WAREHOUSE E /* 출고처 */ ON B.UR_WAREHOUSE_ID = E.UR_WAREHOUSE_ID
		INNER JOIN
			IL_SHIPPING_WAREHOUSE C /* 배송비 출고처 정보 */ ON C.UR_WAREHOUSE_ID = B.UR_WAREHOUSE_ID
		INNER JOIN
			IL_SHIPPING_TEMPLATE D /* 배송비 탬플릿 */ ON C.IL_SHIPPING_TMPL_ID = D.IL_SHIPPING_TMPL_ID
		WHERE
			A.IL_ITEM_CD = #{ilItemCode}
		AND	B.UR_WAREHOUSE_ID = #{urWarehouseId}
		<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(storeYn)">
		AND	E.STORE_YN = #{storeYn}
		</if>
		AND	D.DEL_YN = 'N'
		GROUP BY D.ORIG_IL_SHIPPING_TMPL_ID
		ORDER BY C.BASIC_YN DESC
	</select>

	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 전시 or 몰인몰 카테고리 저장
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2020.08.27		임상건		  최초생성
	 * @
	────────────────────────────────────────────────────────────────────────-->
	<insert id="addGoodsCategory" useGeneratedKeys="true" keyProperty="ilGoodsCtgryId">
		/* goodsRegist.addGoodsCategory */
		INSERT INTO IL_GOODS_CTGRY (
			IL_GOODS_ID
		,	IL_CTGRY_ID
		,	MALL_DIV
		,	BASIC_YN
		,	CREATE_ID
		,	CREATE_DT
		)
		VALUES(
			#{ilGoodsId}
		,	#{ilCtgryId}
		,	#{mallDiv}
		,	#{basicYn}
		,	#{createId}
		,	SYSDATE()
		)
	</insert>

	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 판매 정보 > 판매 유형(예약판매) > 예약 판매 옵션 설정 저장
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2020.08.21		임상건		  최초생성
	 * @
	────────────────────────────────────────────────────────────────────────-->
	<insert id="addGoodsReservationOption">
		/* goodsRegist.addGoodsReservationOption */
		INSERT INTO IL_GOODS_RESERVE_OPTN (
			IL_GOODS_ID
		,	SALE_SEQ
		,	RESERVE_START_DT
		,	RESERVE_END_DT
		,	STOCK_QTY
		,	ORDER_IF_DATE
		,	RELEASE_DATE
		,	ARRIVE_DATE
		,	CREATE_ID
		,	CREATE_DT
		)
		VALUES (
			#{ilGoodsId}
		,	#{saleSequance}
		,	#{reservationStartDate}
		,	#{reservationEndDate}
		,	#{stockQuantity}
		,	#{orderIfDate}
		,	#{releaseDate}
		,	#{arriveDate}
		,	#{createId}
		,	SYSDATE()
		)
	</insert>

	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 판매 정보 > 판매 유형(예약판매) > 예약 판매 옵션 설정 수정
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2021.02.15		임상건		  최초생성
	 * @
	────────────────────────────────────────────────────────────────────────-->
	<insert id="updateGoodsReservationOption">
		/* goodsRegist.updateGoodsReservationOption */
		UPDATE IL_GOODS_RESERVE_OPTN SET
			IL_GOODS_ID			= #{ilGoodsId}
		,	SALE_SEQ			= #{saleSequance}
		,	RESERVE_START_DT	= #{reservationStartDate}
		,	RESERVE_END_DT		= #{reservationEndDate}
		,	STOCK_QTY			= #{stockQuantity}
		,	ORDER_IF_DATE		= #{orderIfDate}
		,	RELEASE_DATE		= #{releaseDate}
		,	ARRIVE_DATE			= #{arriveDate}
		,	MODIFY_ID			= #{createId}
		,	MODIFY_DT			= NOW()
		WHERE
			IL_GOODS_RESERVE_OPTN_ID = #{ilGoodsReserveOptionId}
	</insert>

	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 판매 정보 > 판매 유형(예약판매) > 예약 판매 옵션 설정 회차 순서 변경
	 * @ 1순위 : 도착예정일, 2순위 출고예정일, 3순위 : 주문수집I/F일, 4순위 : 예약주문가능기간 종료일
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2021.02.16		임상건		  최초생성
	 * @
	────────────────────────────────────────────────────────────────────────-->
	<update id="updateGoodsReservationOptionSaleSeq">
		/* goodsRegist.updateGoodsReservationOptionSaleSeq */
		UPDATE IL_GOODS_RESERVE_OPTN A
		INNER JOIN (
			SELECT
				IGRO.*
			FROM
			(
				SELECT
					IGRO.IL_GOODS_RESERVE_OPTN_ID
				,	IGRO.SALE_SEQ
				,	@rownum:=@rownum+1 AS ROWNUM
				FROM
					IL_GOODS_RESERVE_OPTN IGRO
				INNER JOIN (SELECT @rownum:=0) F
				WHERE
					IL_GOODS_ID = #{ilGoodsId}
				ORDER BY
					IGRO.ARRIVE_DATE
				,	IGRO.RELEASE_DATE
				,	IGRO.ORDER_IF_DATE
				,	IGRO.RESERVE_END_DT
			) IGRO
		) B ON A.IL_GOODS_RESERVE_OPTN_ID = B.IL_GOODS_RESERVE_OPTN_ID
		SET A.SALE_SEQ = B.ROWNUM
		WHERE
			A.IL_GOODS_ID = #{ilGoodsId}
	</update>

	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 배송/발주정보 > 배송 유형에 따른 선택한 배송정책 저장
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2020.08.20		임상건		  최초생성
	 * @
	────────────────────────────────────────────────────────────────────────-->
	<insert id="addGoodsShippingTemplate" useGeneratedKeys="true" keyProperty="ilGoodsShippingTemplateId">
		/* goodsRegist.addGoodsShippingTemplate */
		INSERT INTO IL_GOODS_SHIPPING_TEMPLATE (
			IL_GOODS_ID
		,	ORIG_IL_SHIPPING_TMPL_ID
		,	UR_WAREHOUSE_ID
		,	CREATE_ID
		,	CREATE_DT
		)
		VALUES (
			#{ilGoodsId}
		,	#{itemWarehouseShippingTemplateList}
		,	#{urWarehouseId}
		,	#{createId}
		,	SYSDATE()
		)
	</insert>

	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 혜택/구매 정보 > 추가 상품 > 추가 상품 저장
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2020.08.25		임상건		  최초생성
	 * @
	────────────────────────────────────────────────────────────────────────-->
	<insert id="addGoodsAdditionalGoodsMapping" useGeneratedKeys="true" keyProperty="ilGoodsAdditionalGoodsMappingId">
		/* goodsRegist.addGoodsAdditionalGoodsMapping */
		INSERT INTO IL_GOODS_ADDITIONAL_GOODS_MAPPING (
			IL_GOODS_ID
		,	TARGET_GOODS_ID
		,	SALE_PRICE
		,	CREATE_ID
		,	CREATE_DT
		)
		VALUES(
			#{ilGoodsId}
		,	#{targetGoodsId}
		,	#{salePrice}
		,	#{createId}
		,	SYSDATE()
		);
	</insert>

	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 추천상품 등록 > 추천 상품 저장
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2021.03.12		임상건		  최초생성
	 * @
	────────────────────────────────────────────────────────────────────────-->
	<insert id="addGoodsRecommend">
		/* goodsRegist.addGoodsRecommend */
		INSERT INTO IL_GOODS_RECOMMEND (
			IL_GOODS_ID
		,	TARGET_GOODS_ID
		,	CREATE_ID
		,	CREATE_DT
		)
		VALUES(
			#{ilGoodsId}
		,	#{targetGoodsId}
		,	#{createId}
		,	SYSDATE()
		);
	</insert>

	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 마스터 상품 상세
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2020.08.28		임상건		  최초생성
	 * @
	────────────────────────────────────────────────────────────────────────-->
	<resultMap type="kr.co.pulmuone.v1.goods.goods.dto.vo.GoodsRegistVo" id="goodsDetailtMap">
		<result column="IL_GOODS_ID"						property="ilGoodsId"/>
		<result column="IL_ITEM_CD"							property="ilItemCode"/>
		<result column="ITEM_BARCODE"						property="itemBarcode"/>
		<result column="UR_WAREHOUSE_ID"					property="urWarehouseId"/>
		<result column="WAREHOUSE_GRP_CD"					property="warehouseGrpCd"/>
		<result column="GOODS_TP"							property="goodsType"/>
		<result column="GOODS_TP_NAME"						property="goodsTypeName"/>
		<result column="SALE_TP"							property="saleType"/>
		<result column="GREEN_JUICE_CLEANSE_OPT_YN"			property="greenJuiceCleanseOptYn"/>
		<result column="GOODS_NM"							property="goodsName"/>
		<result column="PACKAGE_UNIT_DISP_YN"				property="packageUnitDisplayYn"/>
		<result column="PACKAGE_UNIT_DESC"					property="packageUnitDesc"/>
		<result column="PROMOTION_NM"						property="promotionName"/>
		<result column="PROMOTION_NM_START_DT"				property="promotionNameStartDate"/>
		<result column="PROMOTION_NM_END_DT"				property="promotionNameEndDate"/>
		<result column="GOODS_DESC"							property="goodsDesc"/>
		<result column="SEARCH_KYWRD"						property="searchKeyword"/>
		<result column="PURCHASE_MEMBER_YN"					property="purchaseMemberYn"/>
		<result column="PURCHASE_EMPLOYEE_YN"				property="purchaseEmployeeYn"/>
		<result column="PURCHASE_NONMEMBER_YN"				property="purchaseNonmemberYn"/>
		<result column="DISP_WEB_PC_YN"						property="displayWebPcYn"/>
		<result column="DISP_WEB_MOBILE_YN"					property="displayWebMobileYn"/>
		<result column="DISP_APP_YN"						property="displayAppYn"/>
		<result column="SALE_START_DT"						property="saleStartDate"/>
		<result column="SALE_END_DT"						property="saleEndDate"/>
		<result column="DISP_YN"							property="displayYn"/>
		<result column="SALE_STATUS"						property="saleStatus"/>
		<result column="AUTO_DISP_SIZE_YN"					property="autoDisplaySizeYn"/>
		<result column="SIZE_ETC"							property="sizeEtc"/>
		<result column="SALE_SHOP_YN"						property="saleShopYn"/>
		<result column="COUPON_USE_YN"						property="couponUseYn"/>
		<result column="LIMIT_MIN_CNT"						property="limitMinimumCnt"/>
		<result column="LIMIT_MAX_TP"						property="limitMaximumType"/>
		<result column="LIMIT_MAX_DURATION"					property="limitMaximumDuration"/>
		<result column="LIMIT_MAX_CNT"						property="limitMaximumCnt"/>
		<result column="MD_RECOMMEND_YN"					property="mdRecommendYn"/>
		<result column="GOODS_MEMO"							property="goodsMemo"/>
		<result column="NOTICE_BELOW_1_IMG_URL"				property="noticeBelow1ImageUrl"/>
		<result column="NOTICE_BELOW_1_START_DT"			property="noticeBelow1StartDate"/>
		<result column="NOTICE_BELOW_2_START_DT"			property="noticeBelow2StartDate"/>
		<result column="NOTICE_BELOW_2_IMG_URL"				property="noticeBelow2ImageUrl"/>
		<result column="NOTICE_BELOW_1_END_DT"				property="noticeBelow1EndDate"/>
		<result column="NOTICE_BELOW_2_END_DT"				property="noticeBelow2EndDate"/>
		<result column="CREATE_ID"							property="createId"/>
		<result column="CREATE_DT"							property="goodsCreateDate"/>
		<result column="CREATE_USER_ID"						property="createUserId"/>
		<result column="CREATE_USER_NAME"					property="createUserName"/>
		<result column="MODIFY_ID"							property="modifyId"/>
		<result column="MODIFY_DT"							property="modifyDate"/>
		<result column="MODIFY_USER_ID"						property="modifyUserId"/>
		<result column="MODIFY_USER_NAME"					property="modifyUserName"/>
		<result column="TAX_YN"								property="taxYn"/>
		<result column="UR_SUPPLIER_ID"						property="urSupplierId"/>
		<result column="MALLINMALL_CTGRY_ID"				property="mallinmallCategoryId"/>
		<result column="BASE_GOODS_ID"						property="baseGoodsId"/>
		<result column="CTGRY_STD_NM"						property="categoryStandardName"/>
		<result column="GOODS_PACKAGE_IMG_TP"				property="goodsPackageImageType"/>
		<result column="GOODS_PACKAGE_BASIC_DESC_YN"		property="goodsPackageBasicDescYn"/>
		<result column="GOODS_PACKAGE_BASIC_DESC"			property="goodsPackageBasicDesc"/>
		<result column="GOODS_PACKAGE_VIDEO_URL"			property="goodsPackageVideoUrl"/>
		<result column="GOODS_PACKAGE_VIDEO_AUTOPLAY_YN"	property="goodsPackageVideoAutoplayYn"/>
		<result column="GOODS_DAILY_ALLERGY_YN"				property="goodsDailyAllergyYn"/>
		<result column="GOODS_DAILY_BULK_YN"				property="goodsDailyBulkYn"/>
		<result column="GOODS_OUTMALL_SALE_STAT"			property="goodsOutmallSaleStatus"/>
		<result column="EXTINCTION_YN"						property="extinctionYn"/>
		<result column="GOODS_DAILY_TP"						property="goodsDailyType"/>
		<result column="GOODS_REGIST_GOODS_APPR_ID"			property="goodsRegistGoodsApprId" />
		<result column="GOODS_REGIST_APPR_REQ_USER_ID"		property="goodsRegistApprReqUserId" />
		<result column="GOODS_REGIST_APPR_STAT"				property="goodsRegistApprStat" />
		<result column="GOODS_REGIST_APPR_STAT_NAME"		property="goodsRegistApprStatName" />
		<result column="GOODS_REGIST_APPR_STATUS_CMNT"		property="goodsRegistApprStatusCmnt" />
		<result column="GOODS_CLIENT_GOODS_APPR_ID"			property="goodsClientGoodsApprId" />
		<result column="GOODS_CLIENT_APPR_REQ_USER_ID"		property="goodsClientApprReqUserId" />
		<result column="GOODS_CLIENT_APPR_STAT"				property="goodsClientApprStat" />
		<result column="GOODS_CLIENT_APPR_STAT_NAME"		property="goodsClientApprStatName" />
		<result column="GOODS_CLIENT_APPR_STATUS_CMNT"		property="goodsClientApprStatusCmnt" />
		<result column="GOODS_CLIENT_DISP_YN"				property="goodsClientDispYn" />
		<result column="GODOS_CLIENT_SALE_START_DT"			property="godosClientSaleStartDt" />
		<result column="GOODS_CLIENT_SALE_END_DT"			property="goodsClientSaleEndDt" />
		<result column="GOODS_CLIENT_SALE_STATUS"			property="goodsClientSaleStatus" />
		<result column="GIFT_GOODS_OWNER_TP"				property="giftGoodsOwnerType"/>
		<result column="PRESENT_YN"							property="presentYn"/>
		<result column="PO_PER_ITEM_YN"						property="poPerItemYn"/>
		<result column="ERP_CTGRY_LV1_ID"					property="erpCategoryLevel1Id"/>
		<result column="UR_COMPANY_ID"						property="urCompanyId"/>
		<result column="UR_BRAND_ID"						property="urBrandId"/>
	</resultMap>
	<select id="goodsDetail" resultMap="goodsDetailtMap">
		/* goodsRegist.goodsDetail */
		SELECT
			A.IL_GOODS_ID
		,	A.IL_ITEM_CD
		,	C.ITEM_BARCODE AS ITEM_BARCODE
		,	A.UR_WAREHOUSE_ID
		,	F.WAREHOUSE_GRP_CD
		,	A.GOODS_TP
		,	B.NAME AS GOODS_TP_NAME
		,	A.SALE_TP
		,	A.GREEN_JUICE_CLEANSE_OPT_YN
		,	A.GOODS_NM
		,	A.PACKAGE_UNIT_DISP_YN
		,	A.PACKAGE_UNIT_DESC
		,	A.PROMOTION_NM
		,	IFNULL(A.PROMOTION_NM_START_DT, "") AS PROMOTION_NM_START_DT
		,	IFNULL(A.PROMOTION_NM_END_DT, "") AS PROMOTION_NM_END_DT
		,	A.GOODS_DESC
		,	A.SEARCH_KYWRD
		,	A.PURCHASE_MEMBER_YN
		,	A.PURCHASE_EMPLOYEE_YN
		,	A.PURCHASE_NONMEMBER_YN
		,	A.DISP_WEB_PC_YN
		,	A.DISP_WEB_MOBILE_YN
		,	A.DISP_APP_YN
		,	A.SALE_START_DT
		,	A.SALE_END_DT
		,	A.DISP_YN
		,	A.SALE_STATUS
		,	A.AUTO_DISP_SIZE_YN
		,	A.SIZE_ETC
		,	A.SALE_SHOP_YN
		,	A.COUPON_USE_YN
		,	A.LIMIT_MIN_CNT
		,	A.LIMIT_MAX_TP
		,	A.LIMIT_MAX_DURATION
		,	A.LIMIT_MAX_CNT
		,	A.MD_RECOMMEND_YN
		,	A.GOODS_MEMO
		,	A.DEL_YN
		,	A.NOTICE_BELOW_1_IMG_URL
		,	A.NOTICE_BELOW_1_START_DT
		,	A.NOTICE_BELOW_2_START_DT
		,	A.NOTICE_BELOW_2_IMG_URL
		,	A.NOTICE_BELOW_1_END_DT
		,	A.NOTICE_BELOW_2_END_DT
		,	A.CREATE_ID
		,	A.CREATE_DT
		,	CUU.LOGIN_ID AS CREATE_USER_ID
		,	FN_DECRYPT( CUU.USER_NM ) AS CREATE_USER_NAME
		,	IFNULL(A.MODIFY_ID, A.CREATE_ID) AS MODIFY_ID
		,	IFNULL(A.MODIFY_DT, A.CREATE_DT) AS MODIFY_DT
		,	UU.LOGIN_ID AS MODIFY_USER_ID
		,	FN_DECRYPT( UU.USER_NM ) AS MODIFY_USER_NAME
		,	C.TAX_YN
		,	C.UR_SUPPLIER_ID
		,	D.ST_COMN_CODE_ID AS MALLINMALL_CTGRY_ID
		,	E.TARGET_GOODS_ID AS BASE_GOODS_ID
		,	FN_CTGRY_STD_FULL_NAME(C.IL_CTGRY_STD_ID) AS CTGRY_STD_NM		/* 표준 카테고리, 묶음상품의 IL_ITEM_CD는 기준상품과 동일 */
		,	A.GOODS_PACKAGE_IMG_TP
		,	A.GOODS_PACKAGE_BASIC_DESC_YN
		,	A.GOODS_PACKAGE_BASIC_DESC
		,	A.GOODS_PACKAGE_VIDEO_URL
		,	A.GOODS_PACKAGE_VIDEO_AUTOPLAY_YN
		,	A.GOODS_DAILY_ALLERGY_YN
		,	A.GOODS_DAILY_BULK_YN
		,	A.GOODS_OUTMALL_SALE_STAT
		,	C.EXTINCTION_YN
		,	A.GOODS_DAILY_TP
		,	A.GIFT_GOODS_OWNER_TP
		, GRIGA.IL_GOODS_APPR_ID AS GOODS_REGIST_GOODS_APPR_ID
		, GRIGA.APPR_REQ_USER_ID AS GOODS_REGIST_APPR_REQ_USER_ID
		, GRIGA.APPR_STAT AS GOODS_REGIST_APPR_STAT
		, GRIGA.APPR_STAT_NAME AS GOODS_REGIST_APPR_STAT_NAME
		, GRIGA.STATUS_CMNT AS GOODS_REGIST_APPR_STATUS_CMNT
		, GCIGA.IL_GOODS_APPR_ID AS GOODS_CLIENT_GOODS_APPR_ID
		, GCIGA.APPR_REQ_USER_ID AS GOODS_CLIENT_APPR_REQ_USER_ID
		, GCIGA.APPR_STAT AS GOODS_CLIENT_APPR_STAT
		, GCIGA.APPR_STAT_NAME AS GOODS_CLIENT_APPR_STAT_NAME
		, GCIGA.STATUS_CMNT AS GOODS_CLIENT_APPR_STATUS_CMNT
		, CASE WHEN GCIGA.DISP_YN IS NOT NULL AND A.DISP_YN != GCIGA.DISP_YN THEN TRUE
			   ELSE FALSE
		  END AS GOODS_CLIENT_DISP_YN
		, CASE WHEN GCIGA.SALE_START_DT IS NOT NULL AND A.SALE_START_DT != GCIGA.SALE_START_DT THEN TRUE
		       ELSE FALSE
		  END AS GODOS_CLIENT_SALE_START_DT
		, CASE WHEN GCIGA.SALE_END_DT IS NOT NULL AND A.SALE_END_DT != GCIGA.SALE_END_DT THEN TRUE
		       ELSE FALSE
		  END AS GOODS_CLIENT_SALE_END_DT
		, CASE WHEN GCIGA.SALE_STATUS IS NOT NULL AND A.SALE_STATUS != GCIGA.SALE_STATUS THEN TRUE
		       ELSE FALSE
		  END AS GOODS_CLIENT_SALE_STATUS
		, 	A.PRESENT_YN
		,	IPT.PO_PER_ITEM_YN
		,	C.ERP_CTGRY_LV1_ID
		,   UB.UR_BRAND_ID
		,   UC.UR_COMPANY_ID
		FROM
			IL_GOODS A
		INNER JOIN IL_ITEM C ON C.IL_ITEM_CD = A.IL_ITEM_CD
		LEFT JOIN (
			SELECT
				A.ST_COMN_CODE_ID AS CODE
				, B.DIC_NM AS NAME
			FROM
				ST_COMN_CODE A
			INNER JOIN GB_DIC B ON A.GB_DIC_MST_ID = B.GB_DIC_MST_ID AND B.GB_LANG_ID = '1'
			WHERE
				A.ST_COMN_CODE_MST_CD = 'GOODS_TYPE'
			AND A.USE_YN = UPPER('Y')
		) B ON A.GOODS_TP = B.CODE
		LEFT JOIN (
			SELECT
				ST_COMN_CODE_ID
			,	ATTR2
			FROM
				ST_COMN_CODE
			WHERE
				ST_COMN_CODE_MST_CD = 'MALL_DIV'
		) D ON D.ATTR2 = C.UR_BRAND_ID
		LEFT JOIN (
			SELECT
				IL_GOODS_ID
			,	TARGET_GOODS_ID
			FROM
				IL_GOODS_PACKAGE_GOODS_MAPPING
			WHERE
				BASE_GOODS_YN = 'Y'
		) E ON A.IL_GOODS_ID = E.IL_GOODS_ID
		LEFT JOIN UR_WAREHOUSE F
			ON A.UR_WAREHOUSE_ID = F.UR_WAREHOUSE_ID
		LEFT JOIN UR_USER UU
			ON A.MODIFY_ID = UU.UR_USER_ID
		LEFT JOIN UR_USER CUU
			ON A.CREATE_ID = CUU.UR_USER_ID
		LEFT JOIN (
			SELECT
				IGA.IL_GOODS_ID
				, IGA.IL_GOODS_APPR_ID
				, IGA.APPR_REQ_USER_ID
				, IGA.APPR_STAT
				, DIC.NAME AS APPR_STAT_NAME
				, (
					SELECT
						IGASH.STATUS_CMNT
					FROM IL_GOODS_APPR_STATUS_HISTORY IGASH
					WHERE
						IGASH.IL_GOODS_APPR_ID = IGA.IL_GOODS_APPR_ID
						AND IGASH.APPR_STAT = IGA.APPR_STAT
					ORDER BY IGASH.IL_GOODS_APPR_STATUS_HISTORY_ID DESC
					LIMIT 1
				) AS STATUS_CMNT
			FROM IL_GOODS_APPR IGA
				LEFT JOIN (
					SELECT
						SCC.ST_COMN_CODE_ID AS CODE
						, GDM.DIC_MST_NM AS NAME
					FROM ST_COMN_CODE SCC
						INNER JOIN GB_DIC_MST GDM
							ON SCC.GB_DIC_MST_ID = GDM.GB_DIC_MST_ID
					WHERE
						SCC.ST_COMN_CODE_MST_CD = 'APPR_STAT'
						AND SCC.USE_YN = UPPER('Y')
				) DIC
					ON IGA.APPR_STAT = DIC.CODE
			WHERE
				IGA.IL_GOODS_APPR_ID IN (
					SELECT
						MAX(IL_GOODS_APPR_ID) AS IL_GOODS_APPR_ID
					FROM IL_GOODS_APPR
					WHERE
						APPR_KIND_TP = 'APPR_KIND_TP.GOODS_REGIST'
						AND IL_GOODS_ID = #{ilGoodsId}
					GROUP BY IL_GOODS_ID
				)
		) GRIGA
			ON GRIGA.IL_GOODS_ID = A.IL_GOODS_ID
		LEFT JOIN (
			SELECT
				IGA.IL_GOODS_ID
				, IGA.IL_GOODS_APPR_ID
				, IGA.APPR_REQ_USER_ID
				, IGA.APPR_STAT
				, DIC.NAME AS APPR_STAT_NAME
				, (
					SELECT
						IGASH.STATUS_CMNT
					FROM IL_GOODS_APPR_STATUS_HISTORY IGASH
					WHERE
						IGASH.IL_GOODS_APPR_ID = IGA.IL_GOODS_APPR_ID
						AND IGASH.APPR_STAT = IGA.APPR_STAT
					ORDER BY IGASH.IL_GOODS_APPR_STATUS_HISTORY_ID DESC
					LIMIT 1
				) AS STATUS_CMNT
				, IGA.DISP_YN
				, IGA.SALE_START_DT
				, IGA.SALE_END_DT
				, IGA.SALE_STATUS
				, IGA.GOODS_MEMO
		FROM IL_GOODS_APPR IGA
				LEFT JOIN (
					SELECT
						SCC.ST_COMN_CODE_ID AS CODE
						, GDM.DIC_MST_NM AS NAME
					FROM ST_COMN_CODE SCC
						INNER JOIN GB_DIC_MST GDM
							ON SCC.GB_DIC_MST_ID = GDM.GB_DIC_MST_ID
					WHERE
						SCC.ST_COMN_CODE_MST_CD = 'APPR_STAT'
						AND SCC.USE_YN = UPPER('Y')
				) DIC
					ON IGA.APPR_STAT = DIC.CODE
			WHERE
				IGA.IL_GOODS_APPR_ID IN (
					SELECT
						MAX(IL_GOODS_APPR_ID) AS IL_GOODS_APPR_ID
					FROM IL_GOODS_APPR
					WHERE
						APPR_KIND_TP = 'APPR_KIND_TP.GOODS_CLIENT'
						AND IL_GOODS_ID = #{ilGoodsId}
					GROUP BY IL_GOODS_ID
				)
		) GCIGA
			ON GCIGA.IL_GOODS_ID = A.IL_GOODS_ID
		LEFT JOIN IL_ITEM_WAREHOUSE IIW ON A.IL_ITEM_CD = IIW.IL_ITEM_CD
		LEFT JOIN IL_PO_TP IPT ON IIW.IL_PO_TP_ID  = IPT.IL_PO_TP_ID
		INNER JOIN UR_SUPPLIER US ON US.UR_SUPPLIER_ID = C.UR_SUPPLIER_ID
		INNER JOIN UR_COMPANY UC ON UC.UR_COMPANY_ID = US.UR_COMPANY_ID
		INNER JOIN UR_BRAND UB ON UB.UR_BRAND_ID = C.UR_BRAND_ID
		WHERE
			A.DEL_YN = 'N'
			AND A.IL_GOODS_ID = #{ilGoodsId}
		LIMIT 1
	</select>

	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 상품 중복 체크, 거래처 상품 수정 권한 체크
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2020.08.28		임상건		  최초생성
	 * @
	────────────────────────────────────────────────────────────────────────-->
	<resultMap type="kr.co.pulmuone.v1.goods.goods.dto.vo.GoodsRegistVo" id="duplicateGoodsMap">
		<result column="IL_GOODS_ID"			property="ilGoodsId"/>
		<result column="GOODS_TP"				property="goodsType"/>
		<result column="SALE_STATUS"			property="saleStatus"/>
	</resultMap>
	<select id="duplicateGoods" resultMap="duplicateGoodsMap">
		/* goodsRegist.duplicateGoods */
		SELECT
			IG.IL_GOODS_ID
		,	IG.GOODS_TP
		, IG.SALE_STATUS
		FROM
			IL_GOODS IG
<!--
		<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(authSupplierId)">
			INNER JOIN IL_ITEM II ON II.IL_ITEM_CD = IG.IL_ITEM_CD
			INNER JOIN UR_SUPPLIER US ON US.UR_SUPPLIER_ID = II.UR_SUPPLIER_ID
		</if>
-->
		<where>
			<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(ilGoodsId)">
			AND	IG.IL_GOODS_ID = #{ilGoodsId}
			</if>
			<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(ilItemCode)">
			AND	IG.IL_ITEM_CD = #{ilItemCode}
			</if>
			<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(urWarehouseId)">
			AND	IG.UR_WAREHOUSE_ID = #{urWarehouseId}
			</if>
			<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(goodsType)">
			AND GOODS_TP = #{goodsType}
			</if>
		</where>
		LIMIT 1
	</select>

	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 판매 정보 > 판매 유형(예약판매) > 예약 판매 옵션 설정 리스트
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2020.08.28		임상건		  최초생성
	 * @
	────────────────────────────────────────────────────────────────────────-->
	<resultMap type="kr.co.pulmuone.v1.goods.goods.dto.vo.GoodsRegistReserveOptionVo" id="goodsReservationOptionMap">
		<result column="IL_GOODS_RESERVE_OPTN_ID"				property="ilGoodsReserveOptionId"/>
		<result column="SALE_SEQ"								property="saleSequance"/>
		<result column="RESERVE_START_DATE"						property="reservationStartDate"/>
		<result column="RESERVE_START_HOUR"						property="reservationStartHour"/>
		<result column="RESERVE_START_MINUTE"					property="reservationStartMinute"/>
		<result column="RESERVE_END_DATE"						property="reservationEndDate"/>
		<result column="RESERVE_END_HOUR"						property="reservationEndHour"/>
		<result column="RESERVE_END_MINUTE"						property="reservationEndMinute"/>
		<result column="STOCK_QTY"								property="stockQuantity"/>
		<result column="ORDER_IF_DATE"							property="orderIfDate"/>
		<result column="RELEASE_DATE"							property="releaseDate"/>
		<result column="ARRIVE_DATE"							property="arriveDate"/>
		<result column="CREATE_ID"								property="createId"/>
		<result column="CREATE_DT"								property="createDate"/>
		<result column="MODIFY_ID"								property="modifyId"/>
		<result column="MODIFY_DT"								property="modifyDate"/>
		<result column="OPTN_DEL_ALLOW"							property="optnDelAllow"/>
		<result column="ORDER_CNT"								property="orderCnt"/>
	</resultMap>
	<select id="goodsReservationOptionList" resultMap="goodsReservationOptionMap">
		/* goodsRegist.goodsReservationOptionList */
		SELECT RO.IL_GOODS_RESERVE_OPTN_ID
			 , RO.SALE_SEQ
			 , RO.RESERVE_START_DATE
			 , RO.RESERVE_START_HOUR
			 , RO.RESERVE_START_MINUTE
			 , RO.RESERVE_END_DATE
			 , RO.RESERVE_END_HOUR
			 , RO.RESERVE_END_MINUTE
			 , RO.STOCK_QTY
			 , RO.ORDER_IF_DATE
			 , RO.RELEASE_DATE
			 , RO.ARRIVE_DATE
			 , RO.CREATE_ID
			 , RO.CREATE_DT
			 , RO.MODIFY_ID
			 , RO.MODIFY_DT
			 , RO.ORDER_CNT
			 , CASE WHEN NOW() > RO.RESERVE_END_DT AND NOW() > RO.ARRIVE_DATE THEN TRUE		/** 예약주문가능기간 만료, 도착예정일이 지난 과거 옵션 삭제 가능 */
			     ELSE
			         CASE WHEN NOW() >= RO.RESERVE_START_DT THEN	/** 예약주문가능기간이지만 판매건수가 0일 경우 옵션 삭제 가능 */
			             CASE WHEN RO.ORDER_CNT > 0 THEN FALSE
			                 ELSE TRUE
			                 END
			             ELSE TRUE
			             END
			     END AS OPTN_DEL_ALLOW
		FROM (
				 SELECT IGRO.IL_GOODS_RESERVE_OPTN_ID
					  , @rownum:=@rownum+1 AS SALE_SEQ
					  , IGRO.RESERVE_START_DT
					  , IGRO.RESERVE_END_DT
					  , DATE_FORMAT(IGRO.RESERVE_START_DT, '%Y-%m-%d') AS RESERVE_START_DATE
					  , DATE_FORMAT(IGRO.RESERVE_START_DT, '%H')       AS RESERVE_START_HOUR
					  , DATE_FORMAT(IGRO.RESERVE_START_DT, '%i')       AS RESERVE_START_MINUTE
					  , DATE_FORMAT(IGRO.RESERVE_END_DT, '%Y-%m-%d')   AS RESERVE_END_DATE
					  , DATE_FORMAT(IGRO.RESERVE_END_DT, '%H')         AS RESERVE_END_HOUR
					  , DATE_FORMAT(IGRO.RESERVE_END_DT, '%i')         AS RESERVE_END_MINUTE
					  , IGRO.STOCK_QTY
					  , IGRO.ORDER_IF_DATE
					  , IGRO.RELEASE_DATE
					  , IGRO.ARRIVE_DATE
					  , IGRO.CREATE_ID
					  , IGRO.CREATE_DT
					  , IGRO.MODIFY_ID
					  , IGRO.MODIFY_DT
					  , IFNULL(OOD.ORDER_CNT, 0)                       AS ORDER_CNT
				 FROM IL_GOODS_RESERVE_OPTN IGRO
				 		LEFT OUTER JOIN (
				 			SELECT IL_GOODS_ID
						  		 , IL_GOODS_RESERVE_OPTN_ID
						  		 , SUM(ORDER_CNT) - SUM(CANCEL_CNT)     AS ORDER_CNT
						  	FROM OD_ORDER_DETL
					 		WHERE IL_GOODS_ID = #{ilGoodsId}
					 		GROUP BY IL_GOODS_ID, IL_GOODS_RESERVE_OPTN_ID
				 		) OOD ON OOD.IL_GOODS_ID = IGRO.IL_GOODS_ID
					 		AND OOD.IL_GOODS_RESERVE_OPTN_ID = IGRO.IL_GOODS_RESERVE_OPTN_ID
					 	INNER JOIN (SELECT @rownum:=0) F
				 WHERE IGRO.IL_GOODS_ID = #{ilGoodsId}
				 AND IGRO.DEL_YN = 'N'
				 ORDER BY IGRO.SALE_SEQ
			 ) RO
	</select>


	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 배송/발주정보 > 배송 유형에 따른 선택한 배송정책 저장값 리스트
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2020.08.28		임상건		  최초생성
	 * @ 2021.03.05		임상건		  매장배송/픽업 배송정책 추가로 인한 쿼리문 변경함(출고처 ID 자체를 제외함)
	────────────────────────────────────────────────────────────────────────-->
	<resultMap type="kr.co.pulmuone.v1.goods.goods.dto.vo.GoodsRegistShippingTemplateVo" id="goodsShippingTemplateMap">
		<result column="IL_GOODS_SHIPPING_TEMPLATE_ID"			property="ilGoodsShippingTemplateId"/>
		<result column="ORIG_IL_SHIPPING_TMPL_ID"				property="origIlShippingTemplateId"/>
		<result column="ITEM_WAREHOUSE_SHIPPING_TEMPLATE_LIST"	property="itemWarehouseShippingTemplateList"/>
		<result column="UR_WAREHOUSE_ID"						property="urWarehouseId" />
		<result column="NAME"									property="shppingTemplateName"/>
		<result column="CREATE_ID"								property="createId"/>
		<result column="CREATE_DT"								property="createDate"/>
		<result column="MODIFY_ID"								property="modifyId"/>
		<result column="MODIFY_DT"								property="modifyDate"/>
	</resultMap>
	<select id="goodsShippingTemplateList" resultMap="goodsShippingTemplateMap">
		/* goodsRegist.goodsShippingTemplateList */
		SELECT
			IGST.IL_GOODS_SHIPPING_TEMPLATE_ID
		,	IGST.ORIG_IL_SHIPPING_TMPL_ID
		,	IGST.ORIG_IL_SHIPPING_TMPL_ID AS ITEM_WAREHOUSE_SHIPPING_TEMPLATE_LIST
		,	IGST.UR_WAREHOUSE_ID
		,	CASE
				WHEN ISW.BASIC_YN ='Y' THEN CONCAT('(기본) ', IST.NAME)
				WHEN ISW.BASIC_YN ='N' THEN IST.NAME
			END AS NAME
		,	IGST.CREATE_ID
		,	IGST.CREATE_DT
		,	IGST.MODIFY_ID
		,	IGST.MODIFY_DT
		FROM
			IL_GOODS_SHIPPING_TEMPLATE IGST
		INNER JOIN
			IL_SHIPPING_TEMPLATE IST ON IGST.ORIG_IL_SHIPPING_TMPL_ID = IST.ORIG_IL_SHIPPING_TMPL_ID AND IST.DEL_YN = 'N'
		INNER JOIN
			IL_SHIPPING_WAREHOUSE ISW ON ISW.IL_SHIPPING_TMPL_ID = IST.IL_SHIPPING_TMPL_ID AND ISW.UR_WAREHOUSE_ID = IGST.UR_WAREHOUSE_ID
		WHERE
			IL_GOODS_ID = #{ilGoodsId}
	</select>

	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 저장된 배송정책인지 체크
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2021.03.05		임상건		  최초생성
	────────────────────────────────────────────────────────────────────────-->
	<select id="goodsShippingTemplateChkNum" resultType="int">
		/* goodsRegist.goodsShippingTemplateChkNum */
		SELECT
			COUNT(IL_GOODS_SHIPPING_TEMPLATE_ID) AS GOODS_SHIPPING_TEMPLATE_CHK
		FROM
			IL_GOODS_SHIPPING_TEMPLATE
		WHERE
			IL_GOODS_ID = #{ilGoodsId}
		AND	UR_WAREHOUSE_ID = #{urWarehouseId}
	</select>


	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 혜택/구매 정보 > 추가 상품 > 추가 상품 리스트
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2020.08.28		임상건		  최초생성
	 * @
	────────────────────────────────────────────────────────────────────────-->
	<resultMap type="kr.co.pulmuone.v1.goods.goods.dto.vo.GoodsRegistAdditionalGoodsVo" id="goodsAdditionalGoodsMappingMap">
		<result column="IL_GOODS_ADDITIONAL_GOODS_MAPPING_ID"	property="ilGoodsAdditionalGoodsMappingId"/>
		<result column="TARGET_GOODS_ID"						property="targetGoodsId"/>
		<result column="SALE_PRICE"								property="salePrice"/>
		<result column="GOODS_NM"								property="goodsName"/>
		<result column="STANDARD_PRICE"							property="standardPrice"/>
		<result column="RECOMMENDED_PRICE"						property="recommendedPrice"/>
		<result column="CREATE_ID"								property="createId"/>
		<result column="CREATE_DT"								property="createDate"/>
		<result column="MODIFY_ID"								property="modifyId"/>
		<result column="MODIFY_DT"								property="modifyDate"/>
		<result column="IL_ITEM_CD"								property="ilItemCode"/>
		<result column="IL_ITEM_WAREHOUSE_ID"					property="ilItemWarehouseId"/>
		<result column="STOCK_ORDER_YN"							property="stockOrderYn"/>
	</resultMap>
	<select id="goodsAdditionalGoodsMappingList" resultMap="goodsAdditionalGoodsMappingMap">
		/* goodsRegist.goodsAdditionalGoodsMappingList */
		SELECT
			A.IL_GOODS_ADDITIONAL_GOODS_MAPPING_ID
		,	A.TARGET_GOODS_ID
		,	A.SALE_PRICE
		,	B.GOODS_NM
		,	C.STANDARD_PRICE
		,	C.RECOMMENDED_PRICE
		,	A.CREATE_ID
		,	A.CREATE_DT
		,	A.MODIFY_ID
		,	A.MODIFY_DT
		,	II.IL_ITEM_CD
		,	IIW.IL_ITEM_WAREHOUSE_ID
		,	UW.STOCK_ORDER_YN
		FROM
			IL_GOODS_ADDITIONAL_GOODS_MAPPING A
		INNER JOIN IL_GOODS B ON A.TARGET_GOODS_ID = B.IL_GOODS_ID
		INNER JOIN (
			SELECT * FROM IL_ITEM_PRICE
			WHERE NOW() BETWEEN START_DT AND END_DT
		) C ON B.IL_ITEM_CD = C.IL_ITEM_CD
		INNER JOIN IL_ITEM II ON II.IL_ITEM_CD = B.IL_ITEM_CD
		INNER JOIN IL_ITEM_WAREHOUSE IIW ON IIW.IL_ITEM_CD = II.IL_ITEM_CD
		INNER JOIN UR_SUPPLIER_WAREHOUSE USW ON USW.UR_SUPPLIER_WAREHOUSE_ID = IIW.UR_SUPPLIER_WAREHOUSE_ID
		INNER JOIN UR_WAREHOUSE UW ON UW.UR_WAREHOUSE_ID = USW.UR_WAREHOUSE_ID
		INNER JOIN UR_SUPPLIER US ON US.UR_SUPPLIER_ID = II.UR_SUPPLIER_ID
		WHERE
			A.IL_GOODS_ID = #{ilGoodsId}
		AND UW.UR_WAREHOUSE_ID = #{urWarehouseId}
	</select>


	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 추천상품 등록 > 추천 상품 > 추천 상품 리스트
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2021.03.12		임상건		  최초생성
	 * @
	────────────────────────────────────────────────────────────────────────-->
	<resultMap type="kr.co.pulmuone.v1.goods.goods.dto.vo.GoodsRegistAdditionalGoodsVo" id="goodsRecommendListMap">
		<result column="IL_GOODS_ADDITIONAL_GOODS_MAPPING_ID"	property="ilGoodsAdditionalGoodsMappingId"/>
		<result column="TARGET_GOODS_ID"						property="targetGoodsId"/>
		<result column="GOODS_NM"								property="goodsName"/>
		<result column="STANDARD_PRICE"							property="standardPrice"/>
		<result column="RECOMMENDED_PRICE"						property="recommendedPrice"/>
		<result column="CREATE_ID"								property="createId"/>
		<result column="CREATE_DT"								property="createDate"/>
		<result column="MODIFY_ID"								property="modifyId"/>
		<result column="MODIFY_DT"								property="modifyDate"/>
		<result column="IL_ITEM_CD"								property="ilItemCode"/>
		<result column="IL_ITEM_WAREHOUSE_ID"					property="ilItemWarehouseId"/>
		<result column="STOCK_ORDER_YN"							property="stockOrderYn"/>
	</resultMap>
	<select id="goodsRecommendList" resultMap="goodsRecommendListMap">
		/* goodsRegist.goodsRecommendList */
		SELECT
			A.IL_GOODS_RECOMMEND_ID
		,	A.TARGET_GOODS_ID
		,	B.GOODS_NM
		,	C.STANDARD_PRICE
		,	C.RECOMMENDED_PRICE
		,	A.CREATE_ID
		,	A.CREATE_DT
		,	A.MODIFY_ID
		,	A.MODIFY_DT
		,	II.IL_ITEM_CD
		,	IIW.IL_ITEM_WAREHOUSE_ID
		,	UW.STOCK_ORDER_YN
		FROM
			IL_GOODS_RECOMMEND A
		INNER JOIN IL_GOODS B ON A.TARGET_GOODS_ID = B.IL_GOODS_ID
		INNER JOIN (
			SELECT * FROM IL_ITEM_PRICE
			WHERE NOW() BETWEEN START_DT AND END_DT
		) C ON B.IL_ITEM_CD = C.IL_ITEM_CD
		INNER JOIN IL_ITEM II ON II.IL_ITEM_CD = B.IL_ITEM_CD
		INNER JOIN IL_ITEM_WAREHOUSE IIW ON IIW.IL_ITEM_CD = II.IL_ITEM_CD
		INNER JOIN UR_SUPPLIER_WAREHOUSE USW ON USW.UR_SUPPLIER_WAREHOUSE_ID = IIW.UR_SUPPLIER_WAREHOUSE_ID
		INNER JOIN UR_WAREHOUSE UW ON UW.UR_WAREHOUSE_ID = USW.UR_WAREHOUSE_ID
		INNER JOIN UR_SUPPLIER US ON US.UR_SUPPLIER_ID = II.UR_SUPPLIER_ID
		WHERE
			A.IL_GOODS_ID = #{ilGoodsId}
		AND	UW.UR_WAREHOUSE_ID = #{urWarehouseId}
	</select>

	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 상품 카테고리 삭제
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2020.09.02		임상건		  최초생성
	 * @
	────────────────────────────────────────────────────────────────────────-->
	<delete id="deleteGoodsCategory">
		/* goodsRegist.deleteGoodsCategory */
		DELETE FROM IL_GOODS_CTGRY WHERE IL_GOODS_ID = #{ilGoodsId}
	</delete>

	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 판매정보 > 판매유형(예약판매) > 예약 판매 옵션 설정 삭제
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2020.09.02		임상건		  최초생성
	 * @
	────────────────────────────────────────────────────────────────────────-->
	<delete id="deleteGoodsReservationOption">
		/* goodsRegist.deleteGoodsReservationOption */
		UPDATE IL_GOODS_RESERVE_OPTN SET
			DEL_YN = 'Y'
			, MODIFY_ID = #{createId}
			, MODIFY_DT = now()
		WHERE IL_GOODS_RESERVE_OPTN_ID IN
		<foreach collection="delReservationOptionList" item="item" separator="," open="(" close=")" index="index">
			#{item.ilGoodsReserveOptionId}
		</foreach>

	</delete>

	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 판매정보 > 판매유형(예약판매) > 예약 판매 옵션 삭제시 현재 유효한 옵션의 경우 주문수량 체크
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2020.12.01		남기승		  최초생성
	 * @
	────────────────────────────────────────────────────────────────────────-->
	<select id="getGoodsReservationOptionOrderCount" resultType="int">
		/* goodsRegist.getGoodsReservationOptionOrderCount */
		SELECT IFNULL(SUM(OOD.ORDER_CNT) - SUM(OOD.CANCEL_CNT),0) AS CNT
		FROM OD_ORDER_DETL OOD
		WHERE OOD.IL_GOODS_RESERVE_OPTN_ID IN (
		    SELECT IGRO.IL_GOODS_RESERVE_OPTN_ID
			FROM IL_GOODS_RESERVE_OPTN IGRO
			WHERE NOW() BETWEEN IGRO.RESERVE_START_DT AND IGRO.RESERVE_END_DT
			  AND IGRO.IL_GOODS_RESERVE_OPTN_ID IN
		<foreach collection="delReservationOptionList" item="item" separator="," open="(" close=")" index="index">
			#{item.ilGoodsReserveOptionId}
		</foreach>

		)

	</select>

	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 배송/발주 정보 > 배송유형(일반/새벽배송) > 배송 정책 update
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2020.09.02		임상건		  최초생성
	 * @
	────────────────────────────────────────────────────────────────────────-->
	<update id="updateGoodsShippingTemplate">
		/* goodsRegist.updateGoodsShippingTemplate */
		UPDATE IL_GOODS_SHIPPING_TEMPLATE SET
			ORIG_IL_SHIPPING_TMPL_ID = #{itemWarehouseShippingTemplateList}
		WHERE
			IL_GOODS_ID = #{ilGoodsId}
		AND	UR_WAREHOUSE_ID = #{urWarehouseId}
	</update>

	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 혜택/구매정보 > 추가상품 삭제
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2020.09.02		임상건		  최초생성
	 * @
	────────────────────────────────────────────────────────────────────────-->
	<delete id="deleteGoodsAdditionalGoodsMapping">
		/* goodsRegist.deleteGoodsAdditionalGoodsMapping */
		DELETE FROM IL_GOODS_ADDITIONAL_GOODS_MAPPING WHERE IL_GOODS_ID = #{ilGoodsId}
	</delete>

	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 추천상품 등록 > 추천상품 삭제
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2021.03.12		임상건		  최초생성
	 * @
	────────────────────────────────────────────────────────────────────────-->
	<delete id="deleteGoodsRecommend">
		/* goodsRegist.deleteGoodsRecommend */
		DELETE FROM IL_GOODS_RECOMMEND WHERE IL_GOODS_ID = #{ilGoodsId}
	</delete>

	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 가격정보 > 판매 가격정보
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2020.09.09		임상건		  최초생성
	 * @
	────────────────────────────────────────────────────────────────────────-->
	<resultMap type="kr.co.pulmuone.v1.goods.goods.dto.vo.GoodsPriceInfoResultVo" id="getGoodsPriceResultMap">
		<result column="IL_GOODS_PRICE_ID"				property="ilGoodsPriceId"/>
		<result column="IL_GOODS_ID"					property="ilGoodsId"/>
		<result column="IL_ITEM_PRICE_ID"				property="ilItemPriceId"/>
		<result column="IL_GOODS_DISCOUNT_ID"			property="ilGoodsDiscountId"/>
		<result column="GOODS_TP_NAME"					property="goodsTypeName"/>
		<result column="PRICE_START_DT"					property="priceStartDate"/>
		<result column="PRICE_END_DT"					property="priceEndDate"/>
		<result column="STANDARD_PRICE"					property="standardPrice"/>
		<result column="RECOMMENDED_PRICE"				property="recommendedPrice"/>
		<result column="DISCOUNT_RATE"					property="discountRate"/>
		<result column="SALE_PRICE"						property="salePrice"/>
		<result column="MARGIN_RATE"					property="marginRate"/>
	</resultMap>
	<select id="goodsPrice" resultMap="getGoodsPriceResultMap">
		/*	goodsRegist.goodsPrice	*/
		SELECT
			A.IL_GOODS_PRICE_ID
		,	A.IL_GOODS_ID
		,	A.IL_ITEM_PRICE_ID
		,	A.IL_GOODS_DISCOUNT_ID
		,	B.NAME AS GOODS_TP_NAME
		,	DATE_FORMAT(A.PRICE_START_DT, '%Y-%m-%d %H:%i') AS PRICE_START_DT			/* 시작일 */
		,	DATE_FORMAT(A.PRICE_END_DT, '%Y-%m-%d %H:%i') AS PRICE_END_DT				/* 종료일 */
		,	A.STANDARD_PRICE															/* 원가 */
		,	A.RECOMMENDED_PRICE															/* 정상가 */
		,	TRUNCATE((CAST(A.RECOMMENDED_PRICE AS SIGNED) - CAST(A.SALE_PRICE AS SIGNED)) / A.RECOMMENDED_PRICE * 100, 0) AS DISCOUNT_RATE	/* 할인율 */
		,	A.SALE_PRICE																/* 판매가 */
		<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(taxYn)">
			<choose>
				<when test="@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(taxYn, 'Y')"><!-- 과세일때 -->
				,	TRUNCATE(((CAST(A.SALE_PRICE AS SIGNED)-(CAST(A.STANDARD_PRICE AS SIGNED))*1.1))/A.SALE_PRICE*100,0) AS MARGIN_RATE
				</when>
				<when test="@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(taxYn, 'N')"><!-- 비과세일때 -->
				,	TRUNCATE(((CAST(A.SALE_PRICE AS SIGNED)-CAST(A.STANDARD_PRICE AS SIGNED)))/A.SALE_PRICE*100,0) AS MARGIN_RATE
				</when>
			</choose>
		</if>
		FROM
			IL_GOODS_PRICE A
		LEFT JOIN (
			SELECT
				A.ST_COMN_CODE_ID AS CODE
				, B.DIC_NM AS NAME
			FROM
				ST_COMN_CODE A
			INNER JOIN GB_DIC B ON A.GB_DIC_MST_ID = B.GB_DIC_MST_ID AND B.GB_LANG_ID = '1'
			WHERE
				A.ST_COMN_CODE_MST_CD = 'GOODS_DISCOUNT_TP'
			AND A.USE_YN = UPPER('Y')
		) B ON A.DISCOUNT_TP = B.CODE
		WHERE
			A.IL_GOODS_ID = #{ilGoodsId}
		AND	SYSDATE() BETWEEN A.PRICE_START_DT AND A.PRICE_END_DT
		AND	A.USE_YN = 'Y'
		ORDER BY
			CASE
				WHEN A.DISCOUNT_TP = 'GOODS_DISCOUNT_TP.PRIORITY' THEN 1
				WHEN A.DISCOUNT_TP = 'GOODS_DISCOUNT_TP.ERP_EVENT' THEN 2
				WHEN A.DISCOUNT_TP = 'GOODS_DISCOUNT_TP.IMMEDIATE' THEN 3
				WHEN A.DISCOUNT_TP = 'GOODS_DISCOUNT_TP.NONE' THEN 4
			END
		LIMIT 1
	</select>

	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 가격정보 > 판매 가격정보 - 일시기준 조회
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2021.10.05		이원호		  최초생성
	 * @
	────────────────────────────────────────────────────────────────────────-->
	<select id="getGoodsPriceList" resultMap="getGoodsPriceResultMap">
		/*	goodsRegist.getGoodsPriceList	*/
		SELECT A.IL_GOODS_ID
			, DATE_FORMAT(A.PRICE_START_DT, '%Y-%m-%d %H:%i') AS PRICE_START_DT			/* 시작일 */
			, DATE_FORMAT(A.PRICE_END_DT, '%Y-%m-%d %H:%i') AS PRICE_END_DT				/* 종료일 */
			, A.STANDARD_PRICE															/* 원가 */
			, A.RECOMMENDED_PRICE															/* 정상가 */
			, A.SALE_PRICE																/* 판매가 */
		FROM IL_GOODS_PRICE A
		WHERE A.IL_GOODS_ID = #{ilGoodsId}
			AND	#{dateTime} BETWEEN A.PRICE_START_DT AND A.PRICE_END_DT
			AND	A.USE_YN = 'Y'
		ORDER BY
		CASE
		WHEN A.DISCOUNT_TP = 'GOODS_DISCOUNT_TP.PRIORITY' THEN 1
		WHEN A.DISCOUNT_TP = 'GOODS_DISCOUNT_TP.ERP_EVENT' THEN 2
		WHEN A.DISCOUNT_TP = 'GOODS_DISCOUNT_TP.IMMEDIATE' THEN 3
		WHEN A.DISCOUNT_TP = 'GOODS_DISCOUNT_TP.NONE' THEN 4
		END
	</select>

	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 임직원 할인 정보 > 임직원 할인 가격정보
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2021.01.15		임상건		  최초생성
	 * @
	────────────────────────────────────────────────────────────────────────-->
	<resultMap type="kr.co.pulmuone.v1.goods.goods.dto.vo.GoodsPriceInfoResultVo" id="getGoodsEmployeePriceResultMap">
		<result column="IL_GOODS_EMPLOYEE_PRICE_ID"		property="ilGoodsEmployeePriceId"/>
		<result column="IL_GOODS_ID"					property="ilGoodsId"/>
		<result column="IL_ITEM_PRICE_ID"				property="ilItemPriceId"/>
		<result column="IL_GOODS_DISCOUNT_ID"			property="ilGoodsDiscountId"/>
		<result column="DISCOUNT_TYPE_CODE"				property="discountTypeCode"/>
		<result column="GOODS_TP_NAME"					property="goodsTypeName"/>
		<result column="PRICE_START_DT"					property="priceStartDate"/>
		<result column="PRICE_END_DT"					property="priceEndDate"/>
		<result column="STANDARD_PRICE"					property="standardPrice"/>
		<result column="RECOMMENDED_PRICE"				property="recommendedPrice"/>
		<result column="DISCOUNT_RATE"					property="discountRate"/>
		<result column="SALE_PRICE"						property="salePrice"/>
		<result column="MARGIN_RATE"					property="marginRate"/>
	</resultMap>
	<select id="goodsEmployeePrice" resultMap="getGoodsEmployeePriceResultMap">
		/*	goodsRegist.goodsEmployeePrice	*/
		SELECT
			IIP.IL_ITEM_PRICE_ID
		,	IIP.IL_ITEM_CD
		,	IGD.DISCOUNT_TP AS DISCOUNT_TYPE_CODE
		,	IFNULL(B.NAME, '기본할인') AS GOODS_TP_NAME
		,	CASE WHEN NOW() BETWEEN IGD.DISCOUNT_START_DT AND IGD.DISCOUNT_END_DT THEN
				DATE_FORMAT(IGD.DISCOUNT_START_DT, '%Y-%m-%d %H:%i')
			ELSE
				IFNULL(DATE_FORMAT(IG.CREATE_DT, '%Y-%m-%d %H:%i'), DATE_FORMAT(NOW(), '%Y-%m-%d %H:%i'))
			END AS PRICE_START_DT
		,	CASE WHEN NOW() BETWEEN IGD.DISCOUNT_START_DT AND IGD.DISCOUNT_END_DT THEN
				DATE_FORMAT(IGD.DISCOUNT_END_DT, '%Y-%m-%d %H:%i')
			ELSE
				DATE_FORMAT('2999-12-31 23:59:59', '%Y-%m-%d %H:%i')
			END AS PRICE_END_DT
		,	IIP.STANDARD_PRICE												/* 품목 원가 */
		,	IIP.RECOMMENDED_PRICE											/* 품목 정상가 */
		,	II.UR_BRAND_ID													/* 브랜드ID */
		,	II.TAX_YN														/* 과세여부 */
		,	IFNULL(IGD.DISCOUNT_RATIO, IFNULL(PEDBG.DISCOUNT_RATIO,0)) AS DISCOUNT_RATE
		,	TRUNCATE(IIP.RECOMMENDED_PRICE - (IIP.RECOMMENDED_PRICE * (IFNULL(IGD.DISCOUNT_RATIO, IFNULL(PEDBG.DISCOUNT_RATIO,0)) * 0.01)),-1) AS SALE_PRICE	/* 임직원 판매가 */
		,	CASE WHEN II.TAX_YN = 'Y' THEN
				TRUNCATE(
					(
						(CAST(TRUNCATE(IIP.RECOMMENDED_PRICE - (IIP.RECOMMENDED_PRICE * (IFNULL(IGD.DISCOUNT_RATIO, IFNULL(PEDBG.DISCOUNT_RATIO,0)) * 0.01)),-1) AS SIGNED)-(CAST(IIP.STANDARD_PRICE AS SIGNED))*1.1)
					)
					/
					TRUNCATE(IIP.RECOMMENDED_PRICE - (IIP.RECOMMENDED_PRICE * (IFNULL(IGD.DISCOUNT_RATIO, IFNULL(PEDBG.DISCOUNT_RATIO,0)) * 0.01)),-1)*100,0
				)
			ELSE
				TRUNCATE(
					((CAST(TRUNCATE(IIP.RECOMMENDED_PRICE - (IIP.RECOMMENDED_PRICE * (IFNULL(IGD.DISCOUNT_RATIO, IFNULL(PEDBG.DISCOUNT_RATIO,0)) * 0.01)),-1) AS SIGNED)-CAST(IIP.STANDARD_PRICE AS SIGNED)))
					/
					TRUNCATE(IIP.RECOMMENDED_PRICE - (IIP.RECOMMENDED_PRICE * (IFNULL(IGD.DISCOUNT_RATIO, IFNULL(PEDBG.DISCOUNT_RATIO,0)) * 0.01)),-1)*100,0
				)
			END AS MARGIN_RATE																/* 마진율 */
		FROM
			IL_ITEM_PRICE IIP
		INNER JOIN IL_ITEM II ON II.IL_ITEM_CD = IIP.IL_ITEM_CD
		INNER JOIN PS_EMPL_DISC_BRAND_GRP_BRAND PEDBGB ON II.UR_BRAND_ID = PEDBGB.UR_BRAND_ID
		INNER JOIN PS_EMPL_DISC_BRAND_GRP PEDBG ON PEDBG.PS_EMPL_DISC_BRAND_GRP_ID = PEDBGB.PS_EMPL_DISC_BRAND_GRP_ID
		LEFT JOIN (
			SELECT * FROM IL_GOODS WHERE IL_GOODS_ID = #{ilGoodsId}
		) IG ON IG.IL_ITEM_CD = IIP.IL_ITEM_CD
		LEFT JOIN (
			SELECT
				*
			FROM
				IL_GOODS_DISCOUNT
			WHERE
				NOW() BETWEEN DISCOUNT_START_DT AND DISCOUNT_END_DT
			AND	IL_GOODS_ID = #{ilGoodsId}
			AND	DISCOUNT_TP = 'GOODS_DISCOUNT_TP.EMPLOYEE'
			AND USE_YN = 'Y'
			ORDER BY DISCOUNT_END_DT DESC
			LIMIT 1
		) IGD ON IG.IL_GOODS_ID = IGD.IL_GOODS_ID
		LEFT JOIN (
			SELECT
				A.ST_COMN_CODE_ID AS CODE
				, B.DIC_NM AS NAME
			FROM
				ST_COMN_CODE A
			INNER JOIN GB_DIC B ON A.GB_DIC_MST_ID = B.GB_DIC_MST_ID AND B.GB_LANG_ID = '1'
			WHERE
				A.ST_COMN_CODE_MST_CD = 'GOODS_DISCOUNT_TP'
			AND A.USE_YN = UPPER('Y')
		) B ON IGD.DISCOUNT_TP = B.CODE
		WHERE
			IIP.IL_ITEM_CD = #{ilItemCode}
		AND	NOW() BETWEEN IIP.START_DT AND IIP.END_DT
		ORDER BY IIP.END_DT
		LIMIT 1
	</select>

	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 가격정보 > 할인 내역(행사/할인 내역(ERP행사 제외), 임직원 개별적용 할인 가격정보)
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2020.09.10		임상건		  최초생성
	 * @ 2020.12.16		임상건		  임직원 할인 가격정보 관련 추가
	 * @ 승인 프로세스 미적용 상태임
	────────────────────────────────────────────────────────────────────────-->
	<resultMap type="kr.co.pulmuone.v1.goods.goods.dto.vo.GoodsPriceInfoResultVo" id="getGoodsDiscountResultMap">
		<result column="TR_LIST_VISIBLE"					property="trListVisible"/>
		<result column="DISPLAY_ALLOW"						property="displayAllow"/>
		<result column="ROW_COUNT_NUM"						property="rowCountNum"/>

		<result column="GOODS_ID"							property="goodsId"/>
		<result column="GOODS_DISCOUNT_APPR_ID"				property="goodsDiscountApprId"/>
		<result column="GOODS_DISCOUNT_ID"					property="goodsDiscountId"/>
		<result column="DISCOUNT_TYPE_CODE"					property="discountTypeCode"/>
		<result column="DISCOUNT_TYPE_CODE_NAME"			property="discountTypeCodeName"/>
		<result column="APPROVAL_STATUS_CODE"				property="approvalStatusCode"/>
		<result column="APPROVAL_STATUS_CODE_NAME"			property="approvalStatusCodeName"/>

		<result column="DISCOUNT_START_DT_TIME"				property="discountStartDateTime"/>
		<result column="DISCOUNT_START_DATE"				property="discountStartDate"/>
		<result column="DISCOUNT_START_HOUR"				property="discountStartHour"/>
		<result column="DISCOUNT_START_MINUTE"				property="discountStartMinute"/>

		<result column="DISCOUNT_END_DT_TIME"				property="discountEndDateTime"/>
		<result column="DISCOUNT_END_DATE"					property="discountEndDate"/>
		<result column="DISCOUNT_END_DATE_ORIGINAL"			property="discountEndDateOriginal"/>
		<result column="DISCOUNT_END_HOUR"					property="discountEndHour"/>
		<result column="DISCOUNT_END_HOUR_ORIGINAL"			property="discountEndHourOriginal"/>
		<result column="DISCOUNT_END_MINUTE"				property="discountEndMinute"/>
		<result column="DISCOUNT_END_MINUTE_ORIGINAL"		property="discountEndMinuteOriginal"/>

		<result column="DISCOUNT_METHOD_TYPE_CODE"			property="discountMethodTypeCode"/>
		<result column="DISCOUNT_METHOD_TYPE_CODE_NAME"		property="discountMethodTypeCodeName"/>
		<result column="ITEM_RECOMMENDED_PRICE"				property="itemRecommendedPrice"/>
		<result column="ITEM_STANDARD_PRICE"				property="itemStandardPrice"/>
		<result column="DISCOUNT_AMOUNT"					property="discountAmount"/>
		<result column="MARGIN_RATE"						property="marginRate"/>

		<result column="APPR_REQ_USER_ID"					property="apprReqUserId"/>
		<result column="APPR_REQ_NM"						property="apprReqNm"/>
		<result column="APPR_REQ_USER_LOGIN_ID"				property="apprReqUserLoginId"/>
		<result column="APPR_REQ_INFO"						property="apprReqInfo"/>
		<result column="APPR_SUB_USER_ID"					property="apprSubUserId"/>
		<result column="APPR_SUB_NM"						property="apprSubNm"/>
		<result column="APPR_SUB_USER_LOGIN_ID"				property="apprSubUserLoginId"/>
		<result column="APPR_USER_ID"						property="apprUserId"/>
		<result column="APPR_NM"							property="apprNm"/>
		<result column="APPR_USER_LOGIN_ID"					property="apprUserLoginId"/>
		<result column="APPR_INFO"						    property="apprInfo"/>

		<result column="DISCOUNT_RATIO"						property="discountRatio"/>
		<result column="DISCOUNT_SALE_PRICE"				property="discountSalePrice"/>
	</resultMap>
	<select id="goodsDiscountList" resultMap="getGoodsDiscountResultMap">
		/*	goodsRegist.goodsDiscountList	*/
		SELECT
			CASE
				WHEN ROWNUM > 2 THEN FALSE
				WHEN ROWNUM >= 3 AND GDA.EVENT_PROC_STATUS = 'Reservation' THEN FALSE
			ELSE TRUE
			END AS TR_LIST_VISIBLE
		,	CASE
				WHEN ROWNUM = 1 THEN ';'
				WHEN ROWNUM > 1 THEN 'none;'
			END AS DISPLAY_ALLOW
		,	CASE
				WHEN ALL_ROW_COUNT > 1 THEN 2
			ELSE 1 END AS ROW_COUNT_NUM
		,	GDA.*
		FROM
		(
			SELECT
				@rownum:=@rownum+1 AS ROWNUM
			,	GD.*
			FROM
			(
				SELECT U.*
				FROM(
					SELECT
						A.IL_GOODS_ID AS GOODS_ID														/* 상품ID */
					,	A.IL_GOODS_DISCOUNT_APPR_ID AS GOODS_DISCOUNT_APPR_ID							/* 상품할인승인ID */
					,	A.IL_GOODS_DISCOUNT_ID AS GOODS_DISCOUNT_ID										/* 상품할인ID */
					,	A.DISCOUNT_TP AS DISCOUNT_TYPE_CODE												/* 상품할인유형코드 */
					,	B.NAME AS DISCOUNT_TYPE_CODE_NAME												/* 상품할인유형코드명 */
					,	A.APPR_STAT AS APPROVAL_STATUS_CODE												/* 승인상태코드 */
					,	G.NAME AS APPROVAL_STATUS_CODE_NAME												/* 승인상태코드명 */

					,	DATE_FORMAT(A.DISCOUNT_START_DT, '%Y-%m-%d %H:%i') AS DISCOUNT_START_DT_TIME	/* 할인시작일(시간, 분 포함)*/
					,	DATE_FORMAT(A.DISCOUNT_START_DT, '%Y-%m-%d') AS DISCOUNT_START_DATE				/* 할인시작일 */
					,	DATE_FORMAT(A.DISCOUNT_START_DT, '%H') AS DISCOUNT_START_HOUR					/* 할인시작시간 */
					,	DATE_FORMAT(A.DISCOUNT_START_DT, '%i') AS DISCOUNT_START_MINUTE					/* 할인시작분 */

					,	DATE_FORMAT(A.DISCOUNT_END_DT, '%Y-%m-%d %H:%i')  AS DISCOUNT_END_DT_TIME		/* 할인종료일(시간, 분 포함)*/
					,	DATE_FORMAT(A.DISCOUNT_END_DT, '%Y-%m-%d') AS DISCOUNT_END_DATE					/* 할인시작일 */
					,	DATE_FORMAT(A.DISCOUNT_END_DT, '%Y-%m-%d') AS DISCOUNT_END_DATE_ORIGINAL		/* 원본 할인시작일 */
					,	DATE_FORMAT(A.DISCOUNT_END_DT, '%H') AS DISCOUNT_END_HOUR						/* 할인시작시간 */
					,	DATE_FORMAT(A.DISCOUNT_END_DT, '%H') AS DISCOUNT_END_HOUR_ORIGINAL				/* 원본 할인시작시간 */
					,	DATE_FORMAT(A.DISCOUNT_END_DT, '%i') AS DISCOUNT_END_MINUTE						/* 할인시작분 */
					,	DATE_FORMAT(A.DISCOUNT_END_DT, '%i') AS DISCOUNT_END_MINUTE_ORIGINAL			/* 원본 할인시작분 */

					,	A.DISCOUNT_METHOD_TP AS DISCOUNT_METHOD_TYPE_CODE								/* 상품할인방법유형코드 */
					,	C.NAME AS DISCOUNT_METHOD_TYPE_CODE_NAME										/* 상품할인방법유형코드명 */

					,	E.ITEM_RECOMMENDED_PRICE														/* 품목 정상가 */
					,	E.ITEM_STANDARD_PRICE															/* 품목 원가 */

					,	A.APPR_REQ_USER_ID																/* 승인요청자 ID */
					,	FN_DECRYPT(APPR_REQ_USER.USER_NM) AS APPR_REQ_NM								/* 승인요청자명 */
					,	APPR_REQ_USER.LOGIN_ID AS APPR_REQ_USER_LOGIN_ID								/* 승인요청자 LOGIN ID */
					,	CONCAT(FN_DECRYPT(APPR_REQ_USER.USER_NM), '(', APPR_REQ_USER.LOGIN_ID, ')') AS APPR_REQ_INFO
					,	A.APPR_SUB_USER_ID																/* 1차승인자 ID */
					,	FN_DECRYPT(APPR_SUB_USER.USER_NM) AS APPR_SUB_NM								/* 1차승인자명 */
					,	APPR_SUB_USER.LOGIN_ID AS APPR_SUB_USER_LOGIN_ID								/* 1차승인자 LOGIN ID */
					,	A.APPR_USER_ID																	/* 2차승인자 ID */
					,	FN_DECRYPT(APPR_USER.USER_NM) AS APPR_NM										/* 2차승인자명 */
					,	APPR_USER.LOGIN_ID AS APPR_USER_LOGIN_ID										/* 2차승인자 LOGIN ID */
					,	CASE WHEN APPR_SUB_USER.LOGIN_ID IS NOT NULL THEN
							CONCAT(FN_DECRYPT(APPR_SUB_USER.USER_NM), '(', APPR_SUB_USER.LOGIN_ID, ')&lt;BR/&gt;', FN_DECRYPT(APPR_USER.USER_NM), '(', APPR_USER.LOGIN_ID, ')')
						ELSE
							CONCAT(FN_DECRYPT(APPR_USER.USER_NM), '(', APPR_USER.LOGIN_ID, ')')
						END	AS APPR_INFO
					,	CASE WHEN A.DISCOUNT_METHOD_TP = 'GOODS_DISCOUNT_METHOD_TP.FIXED_RATE' THEN
							A.DISCOUNT_RATIO
						ELSE
							TRUNCATE(100-((A.DISCOUNT_SALE_PRICE/E.ITEM_RECOMMENDED_PRICE)*100),0)
						END AS DISCOUNT_RATIO
					,	'0' AS DISCOUNT_AMOUNT
					<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(discountTypeCode)">
						<choose>
							<when test="@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(discountTypeCode, 'GOODS_DISCOUNT_TP.EMPLOYEE')"><!-- 임직원할인 일때, SALE_PRICE 계산은 무조건 정률할인으로 처리 -->
							,	CASE WHEN G.TAX_YN = 'Y' THEN
									TRUNCATE(
										(
											(CAST(TRUNCATE(E.ITEM_RECOMMENDED_PRICE - (E.ITEM_RECOMMENDED_PRICE * (A.DISCOUNT_RATIO * 0.01)),-1) AS SIGNED)-(CAST(E.ITEM_STANDARD_PRICE AS SIGNED))*1.1)
										)
										/
										TRUNCATE(E.ITEM_RECOMMENDED_PRICE - (E.ITEM_RECOMMENDED_PRICE * (A.DISCOUNT_RATIO * 0.01)),-1)*100,0
									)
								ELSE
									TRUNCATE(
										((CAST(TRUNCATE(E.ITEM_RECOMMENDED_PRICE - (E.ITEM_RECOMMENDED_PRICE * (A.DISCOUNT_RATIO * 0.01)),-1) AS SIGNED)-CAST(E.ITEM_STANDARD_PRICE AS SIGNED)))
										/
										TRUNCATE(E.ITEM_RECOMMENDED_PRICE - (E.ITEM_RECOMMENDED_PRICE * (A.DISCOUNT_RATIO * 0.01)),-1)*100,0
									)
								END AS MARGIN_RATE
							</when>
							<otherwise>
							,	'0' AS MARGIN_RATE
							</otherwise>
						</choose>
					</if>
					,	CASE WHEN A.DISCOUNT_METHOD_TP = 'GOODS_DISCOUNT_METHOD_TP.FIXED_PRICE' THEN
							A.DISCOUNT_SALE_PRICE
						ELSE
							TRUNCATE(E.ITEM_RECOMMENDED_PRICE - (E.ITEM_RECOMMENDED_PRICE * (A.DISCOUNT_RATIO * 0.01)),-1)
						END AS DISCOUNT_SALE_PRICE
					,	CASE WHEN NOW() BETWEEN A.DISCOUNT_START_DT AND A.DISCOUNT_END_DT THEN 'Proceeding'
						ELSE 'Reservation' END EVENT_PROC_STATUS
					,	(SELECT COUNT(IL_GOODS_DISCOUNT_ID) FROM IL_GOODS_DISCOUNT_APPR WHERE
							IL_GOODS_ID = A.IL_GOODS_ID
							AND	DISCOUNT_TP = A.DISCOUNT_TP
							AND	( (NOW() BETWEEN DISCOUNT_START_DT AND DISCOUNT_END_DT) OR (NOW() &lt; DISCOUNT_START_DT) )
							AND	APPR_STAT IN ('APPR_STAT.REQUEST', 'APPR_STAT.APPROVED', 'APPR_STAT.SUB_APPROVED')
					) AS ALL_ROW_COUNT
					, A.DISCOUNT_END_DT
					FROM
						IL_GOODS_DISCOUNT_APPR A
					LEFT JOIN IL_GOODS_DISCOUNT IGD ON IGD.IL_GOODS_ID = A.IL_GOODS_DISCOUNT_ID
					LEFT JOIN (
						SELECT
						A.ST_COMN_CODE_ID AS CODE
						, B.DIC_NM AS NAME
						FROM
						ST_COMN_CODE A
						INNER JOIN GB_DIC B ON A.GB_DIC_MST_ID = B.GB_DIC_MST_ID AND B.GB_LANG_ID = '1'
						WHERE
						A.ST_COMN_CODE_MST_CD = 'APPR_STAT'
						AND A.USE_YN = UPPER('Y')
					) G ON A.APPR_STAT = G.CODE
					LEFT JOIN UR_USER APPR_REQ_USER ON APPR_REQ_USER.UR_USER_ID = A.APPR_REQ_USER_ID
					LEFT JOIN UR_USER APPR_SUB_USER ON APPR_SUB_USER.UR_USER_ID = A.APPR_SUB_USER_ID
					LEFT JOIN UR_USER APPR_USER ON APPR_USER.UR_USER_ID = A.APPR_USER_ID
					LEFT JOIN (
						SELECT
							A.ST_COMN_CODE_ID AS CODE
							, B.DIC_NM AS NAME
						FROM
							ST_COMN_CODE A
						INNER JOIN GB_DIC B ON A.GB_DIC_MST_ID = B.GB_DIC_MST_ID AND B.GB_LANG_ID = '1'
						WHERE
							A.ST_COMN_CODE_MST_CD = 'GOODS_DISCOUNT_TP'
						AND A.USE_YN = UPPER('Y')
					) B ON A.DISCOUNT_TP = B.CODE
					LEFT JOIN (
						SELECT
							A.ST_COMN_CODE_ID AS CODE
							, B.DIC_NM AS NAME
						FROM
							ST_COMN_CODE A
						INNER JOIN GB_DIC B ON A.GB_DIC_MST_ID = B.GB_DIC_MST_ID AND B.GB_LANG_ID = '1'
						WHERE
							A.ST_COMN_CODE_MST_CD = 'GOODS_DISCOUNT_METHOD_TP'
						AND A.USE_YN = UPPER('Y')
					) C ON A.DISCOUNT_METHOD_TP = C.CODE
					INNER JOIN IL_GOODS D ON A.IL_GOODS_ID = D.IL_GOODS_ID
					INNER JOIN(
						SELECT
							IIP.IL_ITEM_CD
						,	IIP.RECOMMENDED_PRICE AS ITEM_RECOMMENDED_PRICE
						,	IIP.STANDARD_PRICE AS ITEM_STANDARD_PRICE
						FROM
							IL_ITEM_PRICE IIP
						WHERE
							NOW() BETWEEN IIP.START_DT AND IIP.END_DT
					) E ON D.IL_ITEM_CD = E.IL_ITEM_CD
					INNER JOIN (SELECT @rownum:=0) F
					INNER JOIN IL_ITEM G ON D.IL_ITEM_CD = G.IL_ITEM_CD
					WHERE
						A.IL_GOODS_ID = #{ilGoodsId}
					AND	A.APPR_STAT IN ('APPR_STAT.REQUEST', 'APPR_STAT.APPROVED', 'APPR_STAT.SUB_APPROVED')
					<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(discountTypeCode)">
						AND	A.DISCOUNT_TP = #{discountTypeCode}
					</if>
					AND	( (NOW() BETWEEN A.DISCOUNT_START_DT AND A.DISCOUNT_END_DT) OR (NOW() &lt; A.DISCOUNT_START_DT))
					<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(discountTypeCode)">
						<choose>
							<when test="@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(discountTypeCode, 'GOODS_DISCOUNT_TP.ERP_EVENT')"><!-- ERP 행사일때 -->
							LIMIT 1
							</when>
						</choose>
					</if>
					UNION
					SELECT
						A.IL_GOODS_ID AS GOODS_ID															/* 상품ID */
						,	'' AS GOODS_DISCOUNT_APPR_ID													/* 상품할인승인ID */
						,	A.IL_GOODS_DISCOUNT_ID AS GOODS_DISCOUNT_ID										/* 상품할인ID */
						,	A.DISCOUNT_TP AS DISCOUNT_TYPE_CODE												/* 상품할인유형코드 */
						,	B.NAME AS DISCOUNT_TYPE_CODE_NAME												/* 상품할인유형코드명 */
						,	'APPR_STAT.APPROVED' AS APPROVAL_STATUS_CODE									/* 승인상태코드 */
						,	'승인완료' AS APPROVAL_STATUS_CODE_NAME											/* 승인상태코드명 */
						,	DATE_FORMAT(A.DISCOUNT_START_DT, '%Y-%m-%d %H:%i') AS DISCOUNT_START_DT_TIME	/* 할인시작일(시간, 분 포함)*/
						,	DATE_FORMAT(A.DISCOUNT_START_DT, '%Y-%m-%d') AS DISCOUNT_START_DATE				/* 할인시작일 */
						,	DATE_FORMAT(A.DISCOUNT_START_DT, '%H') AS DISCOUNT_START_HOUR					/* 할인시작시간 */
						,	DATE_FORMAT(A.DISCOUNT_START_DT, '%i') AS DISCOUNT_START_MINUTE					/* 할인시작분 */
						,	DATE_FORMAT(A.DISCOUNT_END_DT, '%Y-%m-%d %H:%i')  AS DISCOUNT_END_DT_TIME		/* 할인종료일(시간, 분 포함)*/
						,	DATE_FORMAT(A.DISCOUNT_END_DT, '%Y-%m-%d') AS DISCOUNT_END_DATE					/* 할인시작일 */
						,	DATE_FORMAT(A.DISCOUNT_END_DT, '%Y-%m-%d') AS DISCOUNT_END_DATE_ORIGINAL		/* 원본 할인시작일 */
						,	DATE_FORMAT(A.DISCOUNT_END_DT, '%H') AS DISCOUNT_END_HOUR						/* 할인시작시간 */
						,	DATE_FORMAT(A.DISCOUNT_END_DT, '%H') AS DISCOUNT_END_HOUR_ORIGINAL				/* 원본 할인시작시간 */
						,	DATE_FORMAT(A.DISCOUNT_END_DT, '%i') AS DISCOUNT_END_MINUTE						/* 할인시작분 */
						,	DATE_FORMAT(A.DISCOUNT_END_DT, '%i') AS DISCOUNT_END_MINUTE_ORIGINAL			/* 원본 할인시작분 */
						,	A.DISCOUNT_METHOD_TP AS DISCOUNT_METHOD_TYPE_CODE								/* 상품할인방법유형코드 */
						,	C.NAME AS DISCOUNT_METHOD_TYPE_CODE_NAME										/* 상품할인방법유형코드명 */
						,	E.ITEM_RECOMMENDED_PRICE														/* 품목 정상가 */
						,	E.ITEM_STANDARD_PRICE															/* 품목 원가 */
						,	'0' AS APPR_REQ_USER_ID															/* 승인요청자 ID */
						,	FN_DECRYPT(APPR_REQ_USER.USER_NM) AS APPR_REQ_NM								/* 승인요청자명 */
						,	APPR_REQ_USER.LOGIN_ID AS APPR_REQ_USER_LOGIN_ID								/* 승인요청자 LOGIN ID */
						,	CONCAT(FN_DECRYPT(APPR_REQ_USER.USER_NM), '(', APPR_REQ_USER.LOGIN_ID, ')') AS APPR_REQ_INFO
						,	'0' AS APPR_SUB_USER_ID															/* 1차승인자 ID */
						,	FN_DECRYPT(APPR_SUB_USER.USER_NM) AS APPR_SUB_NM								/* 1차승인자명 */
						,	APPR_SUB_USER.LOGIN_ID AS APPR_SUB_USER_LOGIN_ID								/* 1차승인자 LOGIN ID */
						,	'0' AS APPR_USER_ID																/* 2차승인자 ID */
						,	FN_DECRYPT(APPR_USER.USER_NM) AS APPR_NM										/* 2차승인자명 */
						,	APPR_USER.LOGIN_ID AS APPR_USER_LOGIN_ID										/* 2차승인자 LOGIN ID */
						,	CONCAT(FN_DECRYPT(APPR_USER.USER_NM), '(', APPR_USER.LOGIN_ID, ')') AS APPR_INFO
						,	CASE WHEN A.DISCOUNT_METHOD_TP = 'GOODS_DISCOUNT_METHOD_TP.FIXED_RATE' THEN
						A.DISCOUNT_RATIO
						ELSE
						TRUNCATE(100-((A.DISCOUNT_SALE_PRICE/E.ITEM_RECOMMENDED_PRICE)*100),0)
						END AS DISCOUNT_RATIO
						,	'0' AS DISCOUNT_AMOUNT
						<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(discountTypeCode)">
							<choose>
								<when test="@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(discountTypeCode, 'GOODS_DISCOUNT_TP.EMPLOYEE')"><!-- 임직원할인 일때, SALE_PRICE 계산은 무조건 정률할인으로 처리 -->
									,	CASE WHEN G.TAX_YN = 'Y' THEN
											TRUNCATE(
											(
											(CAST(TRUNCATE(E.ITEM_RECOMMENDED_PRICE - (E.ITEM_RECOMMENDED_PRICE * (A.DISCOUNT_RATIO * 0.01)),-1) AS SIGNED)-(CAST(E.ITEM_STANDARD_PRICE AS SIGNED))*1.1)
											)
											/
											TRUNCATE(E.ITEM_RECOMMENDED_PRICE - (E.ITEM_RECOMMENDED_PRICE * (A.DISCOUNT_RATIO * 0.01)),-1)*100,0
											)
										ELSE
											TRUNCATE(
											((CAST(TRUNCATE(E.ITEM_RECOMMENDED_PRICE - (E.ITEM_RECOMMENDED_PRICE * (A.DISCOUNT_RATIO * 0.01)),-1) AS SIGNED)-CAST(E.ITEM_STANDARD_PRICE AS SIGNED)))
											/
											TRUNCATE(E.ITEM_RECOMMENDED_PRICE - (E.ITEM_RECOMMENDED_PRICE * (A.DISCOUNT_RATIO * 0.01)),-1)*100,0
											)
										END AS MARGIN_RATE
								</when>
								<otherwise>
									,	'0' AS MARGIN_RATE
								</otherwise>
							</choose>
						</if>
						,	CASE WHEN A.DISCOUNT_METHOD_TP = 'GOODS_DISCOUNT_METHOD_TP.FIXED_PRICE' THEN
									A.DISCOUNT_SALE_PRICE
								ELSE
									TRUNCATE(E.ITEM_RECOMMENDED_PRICE - (E.ITEM_RECOMMENDED_PRICE * (A.DISCOUNT_RATIO * 0.01)),-1)
								END AS DISCOUNT_SALE_PRICE
						,	CASE WHEN NOW() BETWEEN A.DISCOUNT_START_DT AND A.DISCOUNT_END_DT THEN 'Proceeding'
								ELSE 'Reservation' END EVENT_PROC_STATUS
						,  cast('1' as unsigned) AS ALL_ROW_COUNT
						, A.DISCOUNT_END_DT
					FROM
						IL_GOODS_DISCOUNT A
					LEFT JOIN UR_USER APPR_REQ_USER ON APPR_REQ_USER.UR_USER_ID = '0'
					LEFT JOIN UR_USER APPR_SUB_USER ON APPR_SUB_USER.UR_USER_ID = '0'
					LEFT JOIN UR_USER APPR_USER ON APPR_USER.UR_USER_ID = '0'
					LEFT JOIN (
						SELECT
							A.ST_COMN_CODE_ID AS CODE
							, B.DIC_NM AS NAME
						FROM
							ST_COMN_CODE A
						INNER JOIN GB_DIC B ON A.GB_DIC_MST_ID = B.GB_DIC_MST_ID AND B.GB_LANG_ID = '1'
						WHERE
							A.ST_COMN_CODE_MST_CD = 'GOODS_DISCOUNT_TP'
						AND A.USE_YN = UPPER('Y')
					) B ON A.DISCOUNT_TP = B.CODE
					LEFT JOIN (
						SELECT
							A.ST_COMN_CODE_ID AS CODE
							, B.DIC_NM AS NAME
						FROM
							ST_COMN_CODE A
						INNER JOIN GB_DIC B ON A.GB_DIC_MST_ID = B.GB_DIC_MST_ID AND B.GB_LANG_ID = '1'
						WHERE
							A.ST_COMN_CODE_MST_CD = 'GOODS_DISCOUNT_METHOD_TP'
						AND A.USE_YN = UPPER('Y')
					) C ON A.DISCOUNT_METHOD_TP = C.CODE
					INNER JOIN IL_GOODS D ON A.IL_GOODS_ID = D.IL_GOODS_ID
					INNER JOIN(
						SELECT
							IIP.IL_ITEM_CD
							,	IIP.RECOMMENDED_PRICE AS ITEM_RECOMMENDED_PRICE
							,	IIP.STANDARD_PRICE AS ITEM_STANDARD_PRICE
						FROM
							IL_ITEM_PRICE IIP
						WHERE
							NOW() BETWEEN IIP.START_DT AND IIP.END_DT
					) E ON D.IL_ITEM_CD = E.IL_ITEM_CD
					INNER JOIN (SELECT @rownum:=0) F
					INNER JOIN IL_ITEM G ON D.IL_ITEM_CD = G.IL_ITEM_CD
					WHERE
					A.IL_GOODS_ID = #{ilGoodsId}
					<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(discountTypeCode)">
						AND	A.DISCOUNT_TP = #{discountTypeCode}
					</if>
					AND  NOT EXISTS (
						SELECT  1
						FROM  IL_GOODS_DISCOUNT_APPR  IGDA
						WHERE 1=1
						AND IGDA.IL_GOODS_DISCOUNT_ID = A.IL_GOODS_DISCOUNT_ID
						AND IGDA.DISCOUNT_TP = A.DISCOUNT_TP
						AND IGDA.APPR_STAT IN ('APPR_STAT.APPROVED', 'APPR_STAT.APPROVED_BY_SYSTEM')
					)
					AND	( (NOW() BETWEEN A.DISCOUNT_START_DT AND A.DISCOUNT_END_DT) OR (NOW() &lt; A.DISCOUNT_START_DT))
					<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(discountTypeCode)">
						<choose>
							<when test="@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(discountTypeCode, 'GOODS_DISCOUNT_TP.ERP_EVENT')"><!-- ERP 행사일때 -->
								LIMIT 1
							</when>
						</choose>
					</if>
				) AS U
					ORDER BY U.DISCOUNT_END_DT
			) GD
			INNER JOIN (SELECT @rownum:=0) F
		) GDA
	</select>

	<!--───────────────────────────────────────────────────────────────────────
 * description 		: 가격정보 > 할인 내역(행사/할인 내역 > ERP행사)
 * @
 * @ 수정일			수정자		  수정내용
 * @ ──────────────────────────────────────────────────────────────────────
 * @ 2021.05.04		임상건		  최초생성
 * @ 승인 프로세스 미적용 상태임
────────────────────────────────────────────────────────────────────────-->
	<resultMap type="kr.co.pulmuone.v1.goods.goods.dto.vo.GoodsPriceInfoResultVo" id="getGoodsDiscountErpEventResultMap">
		<result column="TR_LIST_VISIBLE"					property="trListVisible"/>
		<result column="DISPLAY_ALLOW"						property="displayAllow"/>
		<result column="ROW_COUNT_NUM"						property="rowCountNum"/>

		<result column="GOODS_ID"							property="goodsId"/>
		<result column="GOODS_DISCOUNT_ID"					property="goodsDiscountId"/>
		<result column="DISCOUNT_TYPE_CODE"					property="discountTypeCode"/>
		<result column="DISCOUNT_TYPE_CODE_NAME"			property="discountTypeCodeName"/>
		<result column="APPROVAL_STATUS_CODE"				property="approvalStatusCode"/>
		<result column="APPROVAL_STATUS_CODE_NAME"			property="approvalStatusCodeName"/>

		<result column="DISCOUNT_START_DT_TIME"				property="discountStartDateTime"/>
		<result column="DISCOUNT_START_DATE"				property="discountStartDate"/>
		<result column="DISCOUNT_START_HOUR"				property="discountStartHour"/>
		<result column="DISCOUNT_START_MINUTE"				property="discountStartMinute"/>

		<result column="DISCOUNT_END_DT_TIME"				property="discountEndDateTime"/>
		<result column="DISCOUNT_END_DATE"					property="discountEndDate"/>
		<result column="DISCOUNT_END_DATE_ORIGINAL"			property="discountEndDateOriginal"/>
		<result column="DISCOUNT_END_HOUR"					property="discountEndHour"/>
		<result column="DISCOUNT_END_HOUR_ORIGINAL"			property="discountEndHourOriginal"/>
		<result column="DISCOUNT_END_MINUTE"				property="discountEndMinute"/>
		<result column="DISCOUNT_END_MINUTE_ORIGINAL"		property="discountEndMinuteOriginal"/>

		<result column="DISCOUNT_METHOD_TYPE_CODE"			property="discountMethodTypeCode"/>
		<result column="DISCOUNT_METHOD_TYPE_CODE_NAME"		property="discountMethodTypeCodeName"/>
		<result column="ITEM_RECOMMENDED_PRICE"				property="itemRecommendedPrice"/>
		<result column="ITEM_STANDARD_PRICE"				property="itemStandardPrice"/>
		<result column="DISCOUNT_AMOUNT"					property="discountAmount"/>
		<result column="MARGIN_RATE"						property="marginRate"/>

		<result column="APPR_REQ_USER_ID"					property="apprReqUserId"/>
		<result column="APPR_REQ_NM"						property="apprReqNm"/>
		<result column="APPR_REQ_USER_LOGIN_ID"				property="apprReqUserLoginId"/>
		<result column="APPR_REQ_INFO"						property="apprReqInfo"/>
		<result column="APPR_SUB_USER_ID"					property="apprSubUserId"/>
		<result column="APPR_SUB_NM"						property="apprSubNm"/>
		<result column="APPR_SUB_USER_LOGIN_ID"				property="apprSubUserLoginId"/>
		<result column="APPR_USER_ID"						property="apprUserId"/>
		<result column="APPR_NM"							property="apprNm"/>
		<result column="APPR_USER_LOGIN_ID"					property="apprUserLoginId"/>
		<result column="APPR_INFO"						    property="apprInfo"/>

		<result column="DISCOUNT_RATIO"						property="discountRatio"/>
		<result column="DISCOUNT_SALE_PRICE"				property="discountSalePrice"/>
	</resultMap>
	<select id="goodsDiscountErpEventList" resultMap="getGoodsDiscountErpEventResultMap">
		/*	goodsRegist.goodsDiscountErpEventList	*/
		SELECT
			CASE
				WHEN ROWNUM > 2 THEN FALSE
				WHEN ROWNUM >= 3 AND GDA.EVENT_PROC_STATUS = 'Reservation' THEN FALSE
			ELSE TRUE
			END AS TR_LIST_VISIBLE
		,	CASE
				WHEN ROWNUM = 1 THEN ';'
				WHEN ROWNUM > 1 THEN 'none;'
			END AS DISPLAY_ALLOW
		,	CASE
				WHEN ALL_ROW_COUNT > 1 THEN 2
			ELSE 1 END AS ROW_COUNT_NUM
		,	GDA.*
		FROM
		(
		SELECT
			@rownum:=@rownum+1 AS ROWNUM
		,	GD.*
		FROM
		(
			SELECT
				A.IL_GOODS_ID AS GOODS_ID														/* 상품ID */
			,	A.IL_GOODS_DISCOUNT_ID AS GOODS_DISCOUNT_ID										/* 상품할인ID */
			,	A.DISCOUNT_TP AS DISCOUNT_TYPE_CODE												/* 상품할인유형코드 */
			,	B.NAME AS DISCOUNT_TYPE_CODE_NAME												/* 상품할인유형코드명 */
			,	'APPR_STAT.APPROVED' AS APPROVAL_STATUS_CODE									/* 승인상태코드 (승인프로세스가 정의되지 않아서 하드코딩으로 처리)  */
			,	'승인완료' AS APPROVAL_STATUS_CODE_NAME											/* 승인상태코드명 (승인프로세스가 정의되지 않아서 하드코딩으로 처리)  */

			,	DATE_FORMAT(A.DISCOUNT_START_DT, '%Y-%m-%d %H:%i') AS DISCOUNT_START_DT_TIME	/* 할인시작일(시간, 분 포함)*/
			,	DATE_FORMAT(A.DISCOUNT_START_DT, '%Y-%m-%d') AS DISCOUNT_START_DATE				/* 할인시작일 */
			,	DATE_FORMAT(A.DISCOUNT_START_DT, '%H') AS DISCOUNT_START_HOUR					/* 할인시작시간 */
			,	DATE_FORMAT(A.DISCOUNT_START_DT, '%i') AS DISCOUNT_START_MINUTE					/* 할인시작분 */

			,	DATE_FORMAT(A.DISCOUNT_END_DT, '%Y-%m-%d %H:%i')  AS DISCOUNT_END_DT_TIME		/* 할인종료일(시간, 분 포함)*/
			,	DATE_FORMAT(A.DISCOUNT_END_DT, '%Y-%m-%d') AS DISCOUNT_END_DATE					/* 할인시작일 */
			,	DATE_FORMAT(A.DISCOUNT_END_DT, '%Y-%m-%d') AS DISCOUNT_END_DATE_ORIGINAL		/* 원본 할인시작일 */
			,	DATE_FORMAT(A.DISCOUNT_END_DT, '%H') AS DISCOUNT_END_HOUR						/* 할인시작시간 */
			,	DATE_FORMAT(A.DISCOUNT_END_DT, '%H') AS DISCOUNT_END_HOUR_ORIGINAL				/* 원본 할인시작시간 */
			,	DATE_FORMAT(A.DISCOUNT_END_DT, '%i') AS DISCOUNT_END_MINUTE						/* 할인시작분 */
			,	DATE_FORMAT(A.DISCOUNT_END_DT, '%i') AS DISCOUNT_END_MINUTE_ORIGINAL			/* 원본 할인시작분 */

			,	A.DISCOUNT_METHOD_TP AS DISCOUNT_METHOD_TYPE_CODE								/* 상품할인방법유형코드 */
			,	C.NAME AS DISCOUNT_METHOD_TYPE_CODE_NAME										/* 상품할인방법유형코드명 */

			,	E.ITEM_RECOMMENDED_PRICE														/* 품목 정상가 */
			,	E.ITEM_STANDARD_PRICE															/* 품목 원가 */

			,	A.CREATE_ID AS APPR_REQ_USER_ID
			,	'시스템' AS APPR_REQ_NM
			,	'system' AS APPR_REQ_USER_LOGIN_ID
			,	'시스템(system)' AS APPR_REQ_INFO
			,	'0' AS APPR_SUB_USER_ID
			,	'시스템' AS APPR_SUB_NM
			,	'system' AS APPR_SUB_USER_LOGIN_ID
			,	'0' AS APPR_USER_ID
			,	'시스템' AS APPR_NM
			,	'system' AS APPR_USER_LOGIN_ID
			,	'시스템(system)' AS APPR_INFO

			,	CASE WHEN A.DISCOUNT_METHOD_TP = 'GOODS_DISCOUNT_METHOD_TP.FIXED_RATE' THEN
					A.DISCOUNT_RATIO
				ELSE
					TRUNCATE(100-((A.DISCOUNT_SALE_PRICE/E.ITEM_RECOMMENDED_PRICE)*100),0)
				END AS DISCOUNT_RATIO
			,	'0' AS DISCOUNT_AMOUNT
			<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(discountTypeCode)">
				<choose>
					<when test="@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(discountTypeCode, 'GOODS_DISCOUNT_TP.EMPLOYEE')"><!-- 임직원할인 일때, SALE_PRICE 계산은 무조건 정률할인으로 처리 -->
					,	CASE WHEN G.TAX_YN = 'Y' THEN
							TRUNCATE(
								(
								(CAST(TRUNCATE(E.ITEM_RECOMMENDED_PRICE - (E.ITEM_RECOMMENDED_PRICE * (A.DISCOUNT_RATIO * 0.01)),-1) AS SIGNED)-(CAST(E.ITEM_STANDARD_PRICE AS SIGNED))*1.1)
								)
								/
								TRUNCATE(E.ITEM_RECOMMENDED_PRICE - (E.ITEM_RECOMMENDED_PRICE * (A.DISCOUNT_RATIO * 0.01)),-1)*100,0
							)
						ELSE
							TRUNCATE(
								((CAST(TRUNCATE(E.ITEM_RECOMMENDED_PRICE - (E.ITEM_RECOMMENDED_PRICE * (A.DISCOUNT_RATIO * 0.01)),-1) AS SIGNED)-CAST(E.ITEM_STANDARD_PRICE AS SIGNED)))
								/
								TRUNCATE(E.ITEM_RECOMMENDED_PRICE - (E.ITEM_RECOMMENDED_PRICE * (A.DISCOUNT_RATIO * 0.01)),-1)*100,0
							)
						END AS MARGIN_RATE
					</when>
					<otherwise>
					,	'0' AS MARGIN_RATE
					</otherwise>
				</choose>
			</if>
			,	CASE WHEN A.DISCOUNT_METHOD_TP = 'GOODS_DISCOUNT_METHOD_TP.FIXED_PRICE' THEN
					A.DISCOUNT_SALE_PRICE
				ELSE
					TRUNCATE(E.ITEM_RECOMMENDED_PRICE - (E.ITEM_RECOMMENDED_PRICE * (A.DISCOUNT_RATIO * 0.01)),-1)
				END AS DISCOUNT_SALE_PRICE
			,	CASE WHEN NOW() BETWEEN A.DISCOUNT_START_DT AND A.DISCOUNT_END_DT THEN 'Proceeding'
				ELSE 'Reservation' END EVENT_PROC_STATUS
			,	(SELECT COUNT(IL_GOODS_DISCOUNT_ID) FROM IL_GOODS_DISCOUNT WHERE USE_YN = 'Y'
					AND	IL_GOODS_ID = A.IL_GOODS_ID
					AND	DISCOUNT_TP = A.DISCOUNT_TP
					AND	( (NOW() BETWEEN DISCOUNT_START_DT AND DISCOUNT_END_DT) OR (NOW() &lt; DISCOUNT_START_DT))
				) AS ALL_ROW_COUNT
			FROM
				IL_GOODS_DISCOUNT A
			LEFT JOIN (
				SELECT
				A.ST_COMN_CODE_ID AS CODE
				, B.DIC_NM AS NAME
				FROM
				ST_COMN_CODE A
				INNER JOIN GB_DIC B ON A.GB_DIC_MST_ID = B.GB_DIC_MST_ID AND B.GB_LANG_ID = '1'
				WHERE
				A.ST_COMN_CODE_MST_CD = 'GOODS_DISCOUNT_TP'
				AND A.USE_YN = UPPER('Y')
			) B ON A.DISCOUNT_TP = B.CODE
			LEFT JOIN (
				SELECT
				A.ST_COMN_CODE_ID AS CODE
				, B.DIC_NM AS NAME
				FROM
				ST_COMN_CODE A
				INNER JOIN GB_DIC B ON A.GB_DIC_MST_ID = B.GB_DIC_MST_ID AND B.GB_LANG_ID = '1'
				WHERE
				A.ST_COMN_CODE_MST_CD = 'GOODS_DISCOUNT_METHOD_TP'
				AND A.USE_YN = UPPER('Y')
			) C ON A.DISCOUNT_METHOD_TP = C.CODE
			INNER JOIN IL_GOODS D ON A.IL_GOODS_ID = D.IL_GOODS_ID
			INNER JOIN(
				SELECT
				IIP.IL_ITEM_CD
				,	IIP.RECOMMENDED_PRICE AS ITEM_RECOMMENDED_PRICE
				,	IIP.STANDARD_PRICE AS ITEM_STANDARD_PRICE
				FROM
				IL_ITEM_PRICE IIP
				WHERE
				NOW() BETWEEN IIP.START_DT AND IIP.END_DT
			) E ON D.IL_ITEM_CD = E.IL_ITEM_CD
			INNER JOIN (SELECT @rownum:=0) F
			INNER JOIN IL_ITEM G ON D.IL_ITEM_CD = G.IL_ITEM_CD
			WHERE
				A.USE_YN = 'Y'
			AND	A.IL_GOODS_ID = #{ilGoodsId}
			<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(discountTypeCode)">
				AND	A.DISCOUNT_TP = #{discountTypeCode}
			</if>
			AND	( (NOW() BETWEEN A.DISCOUNT_START_DT AND A.DISCOUNT_END_DT) OR (NOW() &lt; A.DISCOUNT_START_DT))
			ORDER BY
				A.DISCOUNT_END_DT LIMIT 1
			) GD
			INNER JOIN (SELECT @rownum:=0) F
		) GDA
	</select>


	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 묶음상품 > 가격정보 > 행사/할인 내역
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2020.12.01		임상건		  최초생성
	────────────────────────────────────────────────────────────────────────-->
	<resultMap type="kr.co.pulmuone.v1.goods.goods.dto.vo.GoodsPriceInfoResultVo" id="getGoodsPackageDiscountResultMap">
		<result column="TR_LIST_VISIBLE"				property="trListVisible"/>
		<result column="DISPLAY_ALLOW"					property="displayAllow"/>
		<result column="ROW_COUNT_NUM"					property="rowCountNum"/>

		<result column="GOODS_ID"						property="goodsId"/>
		<result column="REG_TP_NM"						property="regTypeName"/>
		<result column="GOODS_DISCOUNT_ID"				property="goodsDiscountId"/>
		<result column="DISCOUNT_TYPE_CODE"				property="discountTypeCode"/>
		<result column="DISCOUNT_TYPE_CODE_NAME"		property="discountTypeCodeName"/>
		<result column="APPROVAL_STATUS_CODE"			property="approvalStatusCode"/>
		<result column="APPROVAL_STATUS_CODE_NAME"		property="approvalStatusCodeName"/>

		<result column="DISCOUNT_START_DT_TIME"			property="discountStartDateTime"/>
		<result column="DISCOUNT_START_DATE"			property="discountStartDate"/>
		<result column="DISCOUNT_START_HOUR"			property="discountStartHour"/>
		<result column="DISCOUNT_START_MINUTE"			property="discountStartMinute"/>

		<result column="DISCOUNT_END_DT_TIME"			property="discountEndDateTime"/>
		<result column="DISCOUNT_END_DATE"				property="discountEndDate"/>
		<result column="DISCOUNT_END_DATE_ORIGINAL"		property="discountEndDateOriginal"/>
		<result column="DISCOUNT_END_HOUR"				property="discountEndHour"/>
		<result column="DISCOUNT_END_HOUR_ORIGINAL"		property="discountEndHourOriginal"/>
		<result column="DISCOUNT_END_MINUTE"			property="discountEndMinute"/>
		<result column="DISCOUNT_END_MINUTE_ORIGINAL"	property="discountEndMinuteOriginal"/>

		<result column="DISCOUNT_METHOD_TYPE_CODE"		property="discountMethodTypeCode"/>
		<result column="DISCOUNT_METHOD_TYPE_CODE_NAME"	property="discountMethodTypeCodeName"/>
		<result column="RECOMMENDED_PRICE"				property="recommendedPrice"/>
		<result column="STANDARD_PRICE"					property="standardPrice"/>
		<result column="DISCOUNT_AMOUNT"				property="discountAmount"/>
		<result column="MARGIN_RATE"					property="marginRate"/>
		<result column="APPROVE_ID"						property="approveId"/>
		<result column="APPROVE_NM"						property="approveName"/>
		<result column="DISCOUNT_RATIO"					property="discountRatio"/>
		<result column="DISCOUNT_SALE_PRICE"			property="discountSalePrice"/>
	</resultMap>
	<select id="goodsPackageDiscountList" resultMap="getGoodsPackageDiscountResultMap">
		/*	goodsRegist.goodsPackageDiscountList	*/
		SELECT
			CASE
				WHEN ROWNUM > 2 THEN FALSE
				WHEN ROWNUM >= 3 AND GDA.EVENT_PROC_STATUS = 'Reservation' THEN FALSE
			ELSE TRUE
			END AS TR_LIST_VISIBLE
		,	CASE
				WHEN ROWNUM = 1 THEN ';'
				WHEN ROWNUM > 1 THEN 'none;'
			END AS DISPLAY_ALLOW
		,	CASE
				WHEN ALL_ROW_COUNT > 1 THEN 2
			ELSE 1 END AS ROW_COUNT_NUM
		,	GDA.*
		FROM
		(
			SELECT
				@rownum:=@rownum+1 AS ROWNUM
			,	GD.*
			FROM
			(
				SELECT U.*
				FROM(
				SELECT
					A.IL_GOODS_ID AS GOODS_ID															/* 상품ID */
					,	'시스템' AS REG_TP_NM															/* 구분 */
					,	A.IL_GOODS_DISCOUNT_ID AS GOODS_DISCOUNT_ID										/* 상품할인ID */
					,	A.IL_GOODS_DISCOUNT_APPR_ID AS GOODS_DISCOUNT_APPR_ID							/* 상품할인승인ID */
					,	A.DISCOUNT_TP AS DISCOUNT_TYPE_CODE												/* 상품할인유형코드 */
					,	B.NAME AS DISCOUNT_TYPE_CODE_NAME												/* 상품할인유형코드명 */
					,	A.APPR_STAT AS APPROVAL_STATUS_CODE												/* 승인상태코드 */
					,	G.NAME AS APPROVAL_STATUS_CODE_NAME												/* 승인상태코드명 */
					,	DATE_FORMAT(A.DISCOUNT_START_DT, '%Y-%m-%d %H:%i') AS DISCOUNT_START_DT_TIME	/* 할인시작일(시간, 분 포함)*/
					,	DATE_FORMAT(A.DISCOUNT_START_DT, '%Y-%m-%d') AS DISCOUNT_START_DATE				/* 할인시작일 */
					,	DATE_FORMAT(A.DISCOUNT_START_DT, '%H') AS DISCOUNT_START_HOUR					/* 할인시작시간 */
					,	DATE_FORMAT(A.DISCOUNT_START_DT, '%i') AS DISCOUNT_START_MINUTE					/* 할인시작분 */
					,	DATE_FORMAT(A.DISCOUNT_END_DT, '%Y-%m-%d %H:%i')  AS DISCOUNT_END_DT_TIME		/* 할인종료일(시간, 분 포함)*/
					,	DATE_FORMAT(A.DISCOUNT_END_DT, '%Y-%m-%d') AS DISCOUNT_END_DATE					/* 할인시작일 */
					,	DATE_FORMAT(A.DISCOUNT_END_DT, '%Y-%m-%d') AS DISCOUNT_END_DATE_ORIGINAL		/* 원본 할인시작일 */
					,	DATE_FORMAT(A.DISCOUNT_END_DT, '%H') AS DISCOUNT_END_HOUR						/* 할인시작시간 */
					,	DATE_FORMAT(A.DISCOUNT_END_DT, '%H') AS DISCOUNT_END_HOUR_ORIGINAL				/* 원본 할인시작시간 */
					,	DATE_FORMAT(A.DISCOUNT_END_DT, '%i') AS DISCOUNT_END_MINUTE						/* 할인시작분 */
					,	DATE_FORMAT(A.DISCOUNT_END_DT, '%i') AS DISCOUNT_END_MINUTE_ORIGINAL			/* 원본 할인시작분 */
					,	A.DISCOUNT_METHOD_TP AS DISCOUNT_METHOD_TYPE_CODE								/* 상품할인방법유형코드 */
					,	C.NAME AS DISCOUNT_METHOD_TYPE_CODE_NAME										/* 상품할인방법유형코드명 */
					,	E.RECOMMENDED_PRICE																/* 품목 정상가 */
					,	E.STANDARD_PRICE																/* 품목 원가 */
					,	A.APPR_REQ_USER_ID																/* 승인요청자 ID */
					,	FN_DECRYPT(APPR_REQ_USER.USER_NM) AS APPR_REQ_NM								/* 승인요청자명 */
					,	APPR_REQ_USER.LOGIN_ID AS APPR_REQ_USER_LOGIN_ID								/* 승인요청자 LOGIN ID */
					,	CONCAT(FN_DECRYPT(APPR_REQ_USER.USER_NM), '(', APPR_REQ_USER.LOGIN_ID, ')') AS APPR_REQ_INFO
					,	A.APPR_SUB_USER_ID																/* 1차승인자 ID */
					,	FN_DECRYPT(APPR_SUB_USER.USER_NM) AS APPR_SUB_NM								/* 1차승인자명 */
					,	APPR_SUB_USER.LOGIN_ID AS APPR_SUB_USER_LOGIN_ID								/* 1차승인자 LOGIN ID */
					,	A.APPR_USER_ID																	/* 2차승인자 ID */
					,	FN_DECRYPT(APPR_USER.USER_NM) AS APPR_NM										/* 2차승인자명 */
					,	APPR_USER.LOGIN_ID AS APPR_USER_LOGIN_ID										/* 2차승인자 LOGIN ID */
					,	CASE WHEN APPR_SUB_USER.LOGIN_ID IS NOT NULL THEN
							CONCAT(FN_DECRYPT(APPR_SUB_USER.USER_NM), '(', APPR_SUB_USER.LOGIN_ID, ')&lt;BR/&gt;', FN_DECRYPT(APPR_USER.USER_NM), '(', APPR_USER.LOGIN_ID, ')')
						ELSE
							CONCAT(FN_DECRYPT(APPR_USER.USER_NM), '(', APPR_USER.LOGIN_ID, ')')
						END	AS APPR_INFO
					,	CASE WHEN A.DISCOUNT_METHOD_TP = 'GOODS_DISCOUNT_METHOD_TP.FIXED_RATE' THEN
							A.DISCOUNT_RATIO
						ELSE
							TRUNCATE(100-((A.DISCOUNT_SALE_PRICE/E.RECOMMENDED_PRICE)*100),0)
						END AS DISCOUNT_RATIO
					,	'0' AS DISCOUNT_AMOUNT
					,	'0' AS MARGIN_RATE
					,	CASE WHEN A.DISCOUNT_METHOD_TP = 'GOODS_DISCOUNT_METHOD_TP.FIXED_PRICE' THEN
					A.DISCOUNT_SALE_PRICE
					ELSE
					TRUNCATE(E.RECOMMENDED_PRICE - (E.RECOMMENDED_PRICE * (A.DISCOUNT_RATIO * 0.01)),-1)
					END AS DISCOUNT_SALE_PRICE
					,	CASE WHEN NOW() BETWEEN A.DISCOUNT_START_DT AND A.DISCOUNT_END_DT THEN 'Proceeding'
					ELSE 'Reservation' END EVENT_PROC_STATUS
					,	(SELECT COUNT(IL_GOODS_DISCOUNT_ID) FROM IL_GOODS_DISCOUNT_APPR WHERE
							IL_GOODS_ID = A.IL_GOODS_ID
						AND	DISCOUNT_TP = A.DISCOUNT_TP
						AND	( (NOW() BETWEEN DISCOUNT_START_DT AND DISCOUNT_END_DT) OR (NOW() &lt; DISCOUNT_START_DT) )
						AND	APPR_STAT IN ('APPR_STAT.REQUEST', 'APPR_STAT.APPROVED', 'APPR_STAT.SUB_APPROVED', 'APPR_STAT.APPROVED_BY_SYSTEM')
					) AS ALL_ROW_COUNT
					, A.DISCOUNT_END_DT
				FROM
				IL_GOODS_DISCOUNT_APPR A
				LEFT JOIN IL_GOODS_DISCOUNT IGD ON IGD.IL_GOODS_ID = A.IL_GOODS_DISCOUNT_ID
				LEFT JOIN (
					SELECT
						A.ST_COMN_CODE_ID AS CODE
						, B.DIC_NM AS NAME
					FROM
						ST_COMN_CODE A
						INNER JOIN GB_DIC B ON A.GB_DIC_MST_ID = B.GB_DIC_MST_ID AND B.GB_LANG_ID = '1'
					WHERE
						A.ST_COMN_CODE_MST_CD = 'APPR_STAT'
					AND A.USE_YN = UPPER('Y')
				) G ON A.APPR_STAT = G.CODE
				LEFT JOIN UR_USER APPR_REQ_USER ON APPR_REQ_USER.UR_USER_ID = A.APPR_REQ_USER_ID
				LEFT JOIN UR_USER APPR_SUB_USER ON APPR_SUB_USER.UR_USER_ID = A.APPR_SUB_USER_ID
				LEFT JOIN UR_USER APPR_USER ON APPR_USER.UR_USER_ID = A.APPR_USER_ID
				LEFT JOIN (
					SELECT
						A.ST_COMN_CODE_ID AS CODE
						, B.DIC_NM AS NAME
					FROM
						ST_COMN_CODE A
						INNER JOIN GB_DIC B ON A.GB_DIC_MST_ID = B.GB_DIC_MST_ID AND B.GB_LANG_ID = '1'
					WHERE
						A.ST_COMN_CODE_MST_CD = 'GOODS_DISCOUNT_TP'
					AND A.USE_YN = UPPER('Y')
				) B ON A.DISCOUNT_TP = B.CODE
				LEFT JOIN (
					SELECT
						A.ST_COMN_CODE_ID AS CODE
						, B.DIC_NM AS NAME
					FROM
						ST_COMN_CODE A
						INNER JOIN GB_DIC B ON A.GB_DIC_MST_ID = B.GB_DIC_MST_ID AND B.GB_LANG_ID = '1'
					WHERE
						A.ST_COMN_CODE_MST_CD = 'GOODS_DISCOUNT_METHOD_TP'
					AND A.USE_YN = UPPER('Y')
				) C ON A.DISCOUNT_METHOD_TP = C.CODE
				INNER JOIN IL_GOODS D ON A.IL_GOODS_ID = D.IL_GOODS_ID
				INNER JOIN (
					SELECT
						IGP.IL_GOODS_ID
						,	IGP.RECOMMENDED_PRICE
						,	IGP.STANDARD_PRICE
					FROM
						IL_GOODS_PRICE IGP
					WHERE
						NOW() BETWEEN IGP.PRICE_START_DT AND IGP.PRICE_END_DT
					AND	USE_YN = 'Y'
				) E ON A.IL_GOODS_ID = E.IL_GOODS_ID
				INNER JOIN (SELECT @rownum:=0) F
				WHERE
					A.IL_GOODS_ID = #{ilGoodsId}
				AND	A.APPR_STAT IN ('APPR_STAT.REQUEST', 'APPR_STAT.APPROVED', 'APPR_STAT.SUB_APPROVED', 'APPR_STAT.APPROVED_BY_SYSTEM')
				<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(discountTypeCode)">
					AND	A.DISCOUNT_TP = #{discountTypeCode}
				</if>
				AND	( (NOW() BETWEEN A.DISCOUNT_START_DT AND A.DISCOUNT_END_DT) OR (NOW() &lt; A.DISCOUNT_START_DT))
				UNION
				SELECT A.IL_GOODS_ID AS GOODS_ID														/* 상품ID */
					,	'시스템' AS REG_TP_NM															/* 구분 */
					,	A.IL_GOODS_DISCOUNT_ID AS GOODS_DISCOUNT_ID										/* 상품할인ID */
					,   '' AS GOODS_DISCOUNT_APPR_ID
					,	A.DISCOUNT_TP AS DISCOUNT_TYPE_CODE												/* 상품할인유형코드 */
					,	B.NAME AS DISCOUNT_TYPE_CODE_NAME												/* 상품할인유형코드명 */
					,   'APPR_STAT.APPROVED' AS APPROVAL_STATUS_CODE
					,	'승인완료' AS APPROVAL_STATUS_CODE_NAME											/* 승인상태코드명 */
					,	DATE_FORMAT(A.DISCOUNT_START_DT, '%Y-%m-%d %H:%i') AS DISCOUNT_START_DT_TIME	/* 할인시작일(시간, 분 포함)*/
					,	DATE_FORMAT(A.DISCOUNT_START_DT, '%Y-%m-%d') AS DISCOUNT_START_DATE				/* 할인시작일 */
					,	DATE_FORMAT(A.DISCOUNT_START_DT, '%H') AS DISCOUNT_START_HOUR					/* 할인시작시간 */
					,	DATE_FORMAT(A.DISCOUNT_START_DT, '%i') AS DISCOUNT_START_MINUTE					/* 할인시작분 */
					,	DATE_FORMAT(A.DISCOUNT_END_DT, '%Y-%m-%d %H:%i')  AS DISCOUNT_END_DT_TIME		/* 할인종료일(시간, 분 포함)*/
					,	DATE_FORMAT(A.DISCOUNT_END_DT, '%Y-%m-%d') AS DISCOUNT_END_DATE					/* 할인시작일 */
					,	DATE_FORMAT(A.DISCOUNT_END_DT, '%Y-%m-%d') AS DISCOUNT_END_DATE_ORIGINAL		/* 원본 할인시작일 */
					,	DATE_FORMAT(A.DISCOUNT_END_DT, '%H') AS DISCOUNT_END_HOUR						/* 할인시작시간 */
					,	DATE_FORMAT(A.DISCOUNT_END_DT, '%H') AS DISCOUNT_END_HOUR_ORIGINAL				/* 원본 할인시작시간 */
					,	DATE_FORMAT(A.DISCOUNT_END_DT, '%i') AS DISCOUNT_END_MINUTE						/* 할인시작분 */
					,	DATE_FORMAT(A.DISCOUNT_END_DT, '%i') AS DISCOUNT_END_MINUTE_ORIGINAL			/* 원본 할인시작분 */
					,	A.DISCOUNT_METHOD_TP AS DISCOUNT_METHOD_TYPE_CODE								/* 상품할인방법유형코드 */
					,	C.NAME AS DISCOUNT_METHOD_TYPE_CODE_NAME										/* 상품할인방법유형코드명 */
					,	E.RECOMMENDED_PRICE																/* 품목 정상가 */
					,	E.STANDARD_PRICE																/* 품목 원가 */
					,   '0' AS APPR_REQ_USER_ID
					,	FN_DECRYPT(APPR_REQ_USER.USER_NM) AS APPR_REQ_NM								/* 승인요청자명 */
					,	APPR_REQ_USER.LOGIN_ID AS APPR_REQ_USER_LOGIN_ID								/* 승인요청자 LOGIN ID */
					,	CONCAT(FN_DECRYPT(APPR_REQ_USER.USER_NM), '(', APPR_REQ_USER.LOGIN_ID, ')') AS APPR_REQ_INFO
					,   '0' AS APPR_SUB_USER_ID
					,	FN_DECRYPT(APPR_SUB_USER.USER_NM) AS APPR_SUB_NM								/* 1차승인자명 */
					,	APPR_SUB_USER.LOGIN_ID AS APPR_SUB_USER_LOGIN_ID								/* 1차승인자 LOGIN ID */
					,   '0' AS APPR_USER_ID
					,	FN_DECRYPT(APPR_USER.USER_NM) AS APPR_NM										/* 2차승인자명 */
					,	APPR_USER.LOGIN_ID AS APPR_USER_LOGIN_ID										/* 2차승인자 LOGIN ID */
					,	CONCAT(FN_DECRYPT(APPR_USER.USER_NM), '(', APPR_USER.LOGIN_ID, ')') AS APPR_INFO
					,	CASE WHEN A.DISCOUNT_METHOD_TP = 'GOODS_DISCOUNT_METHOD_TP.FIXED_RATE' THEN
							A.DISCOUNT_RATIO
						ELSE
							TRUNCATE(100-((A.DISCOUNT_SALE_PRICE/E.RECOMMENDED_PRICE)*100),0)
						END AS DISCOUNT_RATIO
					,	'0' AS DISCOUNT_AMOUNT
					,	'0' AS MARGIN_RATE
					,	CASE WHEN A.DISCOUNT_METHOD_TP = 'GOODS_DISCOUNT_METHOD_TP.FIXED_PRICE' THEN
						A.DISCOUNT_SALE_PRICE
					ELSE
					TRUNCATE(E.RECOMMENDED_PRICE - (E.RECOMMENDED_PRICE * (A.DISCOUNT_RATIO * 0.01)),-1)
					END AS DISCOUNT_SALE_PRICE
					,	CASE WHEN NOW() BETWEEN A.DISCOUNT_START_DT AND A.DISCOUNT_END_DT THEN 'Proceeding'
					ELSE 'Reservation' END EVENT_PROC_STATUS
					,  cast('1' as unsigned) AS ALL_ROW_COUNT
					, A.DISCOUNT_END_DT
				FROM
				IL_GOODS_DISCOUNT A
				LEFT JOIN UR_USER APPR_REQ_USER ON APPR_REQ_USER.UR_USER_ID = '0'
				LEFT JOIN UR_USER APPR_SUB_USER ON APPR_SUB_USER.UR_USER_ID = '0'
				LEFT JOIN UR_USER APPR_USER ON APPR_USER.UR_USER_ID = '0'
				LEFT JOIN (
					SELECT
						A.ST_COMN_CODE_ID AS CODE
						, B.DIC_NM AS NAME
					FROM
						ST_COMN_CODE A
					INNER JOIN GB_DIC B ON A.GB_DIC_MST_ID = B.GB_DIC_MST_ID AND B.GB_LANG_ID = '1'
					WHERE
						A.ST_COMN_CODE_MST_CD = 'GOODS_DISCOUNT_TP'
					AND A.USE_YN = UPPER('Y')
				) B ON A.DISCOUNT_TP = B.CODE
				LEFT JOIN (
					SELECT
						A.ST_COMN_CODE_ID AS CODE
						, B.DIC_NM AS NAME
					FROM
						ST_COMN_CODE A
					INNER JOIN GB_DIC B ON A.GB_DIC_MST_ID = B.GB_DIC_MST_ID AND B.GB_LANG_ID = '1'
					WHERE
						A.ST_COMN_CODE_MST_CD = 'GOODS_DISCOUNT_METHOD_TP'
					AND A.USE_YN = UPPER('Y')
				) C ON A.DISCOUNT_METHOD_TP = C.CODE
				INNER JOIN IL_GOODS D ON A.IL_GOODS_ID = D.IL_GOODS_ID
				INNER JOIN (
					SELECT
						IGP.IL_GOODS_ID
						,	IGP.RECOMMENDED_PRICE
						,	IGP.STANDARD_PRICE
					FROM
						IL_GOODS_PRICE IGP
					WHERE
						NOW() BETWEEN IGP.PRICE_START_DT AND IGP.PRICE_END_DT
					AND	USE_YN = 'Y'
				) E ON A.IL_GOODS_ID = E.IL_GOODS_ID
				INNER JOIN (SELECT @rownum:=0) F
				WHERE
				A.IL_GOODS_ID = #{ilGoodsId}
				<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(discountTypeCode)">
					AND	A.DISCOUNT_TP = #{discountTypeCode}
				</if>
				AND  NOT EXISTS (
					SELECT  1
					FROM  IL_GOODS_DISCOUNT_APPR  IGDA
					WHERE  IGDA.IL_GOODS_DISCOUNT_ID = A.IL_GOODS_DISCOUNT_ID
					AND IGDA.DISCOUNT_TP = A.DISCOUNT_TP
					AND IGDA.APPR_STAT IN ('APPR_STAT.APPROVED', 'APPR_STAT.APPROVED_BY_SYSTEM')
				)
				AND	( (NOW() BETWEEN A.DISCOUNT_START_DT AND A.DISCOUNT_END_DT) OR (NOW() &lt; A.DISCOUNT_START_DT))
				) AS U
				ORDER BY
					U.DISCOUNT_END_DT
			) GD
			INNER JOIN (SELECT @rownum:=0) F
		) GDA
	</select>

	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 가격정보 > 마스터 품목 가격정보
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2020.09.10		임상건		  최초생성
	 * @ 승인 프로세스 적용 처리가 진행 되어야 완료 됨
	────────────────────────────────────────────────────────────────────────-->
	<resultMap type="kr.co.pulmuone.v1.goods.goods.dto.vo.GoodsPriceInfoResultVo" id="getItemPriceResultMap">
		<result column="IL_ITEM_PRICE_ID"		property="ilItemPriceId"/>
		<result column="IL_ITEM_CD"				property="ilItemCode"/>
		<result column="REG_TP"					property="regType"/>
		<result column="REG_TP_NM"				property="regTypeName"/>
		<result column="STATUS"					property="status"/>
		<result column="STATUS_NM"				property="statusName"/>
		<result column="START_DT"				property="startDate"/>
		<result column="END_DT"					property="endDate"/>
		<result column="APPROVE_ID"				property="approveId"/>
		<result column="APPROVE_NM"				property="approveName"/>
		<result column="STANDARD_PRICE"			property="standardPrice"/>
		<result column="RECOMMENDED_PRICE"		property="recommendedPrice"/>
	</resultMap>
	<select id="itemPriceList" resultMap="getItemPriceResultMap">
		/*	goodsRegist.itemPriceList	*/
		SELECT
			IL_ITEM_PRICE_ID
		,	IL_ITEM_CD
		,	'S' AS REG_TP
		,	'시스템' AS REG_TP_NM
		,	'0' AS STATUS
		,	'승인완료' AS STATUS_NM
		,	START_DT
		,	END_DT
		,	99 AS APPROVE_ID
		,	'나승인' AS APPROVE_NM
		,	STANDARD_PRICE
		,	RECOMMENDED_PRICE
		FROM
			IL_ITEM_PRICE
		WHERE
			IL_ITEM_CD = #{ilItemCode}
		AND	NOW() BETWEEN START_DT AND END_DT
		ORDER BY END_DT
		LIMIT 1
	</select>

	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 가격정보 > 행사/할인 내역 > 할인 내역 시작일이 유효한지 Validation check
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2021.07.02		원종한		  최초생성
	 * @ 승인 프로세스 적용 처리가 진행 되어야 완료 됨
	────────────────────────────────────────────────────────────────────────-->
	<select id="isValidStartTimeAddGoodsDiscount" resultType="int">
	/* goodsRegist.isValidStartTimeAddGoodsDiscount */
		SELECT
			IF(NOW() <![CDATA[ > ]]> #{discountStartDateTime}, 1, 0) AS COUNT
	</select>

	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 가격정보 > 행사/할인 내역 > 할인 내역 저장 가능한지 Validation check
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2021.07.02		원종한		  최초생성
	 * @ 승인 프로세스 적용 처리가 진행 되어야 완료 됨
	────────────────────────────────────────────────────────────────────────-->
	<select id="isValidAddGoodsDiscount" resultType="int">
	/* goodsRegist.isValidAddGoodsDiscount */
		SELECT
			COUNT(0) AS COUNT
		FROM (
			SELECT
				IL_GOODS_DISCOUNT_ID
			FROM IL_GOODS_DISCOUNT
			WHERE
				USE_YN= 'Y'
				AND IL_GOODS_ID = #{goodsId}
				AND DISCOUNT_TP = #{discountTypeCode}
				AND (
					CASE
						WHEN DISCOUNT_TP = 'GOODS_DISCOUNT_TP.PACKAGE'
							THEN #{discountStartDateTime} <![CDATA[ <= ]]>  DISCOUNT_START_DT
						ELSE (
							#{discountStartDateTime} <![CDATA[ <= ]]> DISCOUNT_END_DT
							AND #{discountEndDateTime} <![CDATA[ >= ]]> DISCOUNT_START_DT
						)
					END
				)
		) T
	</select>

	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 가격정보 > 행사/할인 내역 > 우선할인, 즉시할인 > 할인 설정 > 승인 요청
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2021.04.28		임상건		  최초생성
	────────────────────────────────────────────────────────────────────────-->
	<insert id="addGoodsDiscountAppr" useGeneratedKeys="true" keyProperty="ilGoodsDiscountApprId">
		/* goodsRegist.addGoodsDiscountAppr */
		INSERT INTO IL_GOODS_DISCOUNT_APPR(
			IL_GOODS_ID
		<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(ilGoodsDiscountId)">
		,	IL_GOODS_DISCOUNT_ID
		</if>
		,	DISCOUNT_TP
		,	DISCOUNT_START_DT
		,	DISCOUNT_END_DT
		,	DISCOUNT_METHOD_TP
		,	RECOMMENDED_PRICE
		,	STANDARD_PRICE
		,	DISCOUNT_RATIO
		,	DISCOUNT_SALE_PRICE
		,	APPR_STAT
		,	APPR_REQ_DT
		,	APPR_REQ_USER_ID
		,	APPR_SUB_USER_ID
		,	APPR_USER_ID
		,	CREATE_ID
		,   CREATE_DT
		)
		VALUES(
			#{ilGoodsId}
		<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(ilGoodsDiscountId)">
		,	#{ilGoodsDiscountId}
		</if>
		,	#{discountTp}
		,	#{discountStartDt}
		,	#{discountEndDt}
		,	#{discountMethodTp}
		,	#{recommendedPrice}
		,	#{standardPrice}
		,	#{discountRatio}
		,	#{discountSalePrice}
		,	#{apprStat}
		,	#{apprReqDt}
		,	#{apprReqUserId}
		,	#{apprSubUserId}
		,	#{apprUserId}
		,	#{createId}
		,	#{createDt}
		)
	</insert>

	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 가격정보 > 행사/할인 내역 > 우선할인, 즉시할인 > 할인 설정 > 승인 요청 히스토리
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2021.04.28		임상건		  최초생성
	────────────────────────────────────────────────────────────────────────-->
	<insert id="addGoodsDiscountApprStatusHistory">
		/* goodsRegist.addGoodsDiscountApprStatusHistory */
		INSERT INTO IL_GOODS_DISCOUNT_APPR_STATUS_HISTORY (
			IL_GOODS_DISCOUNT_APPR_ID
		,	PREV_APPR_STAT
		,	APPR_STAT
		,	STATUS_CMNT
		,	APPR_SUB_USER_ID
		,	APPR_USER_ID
		,	CREATE_DT
		,	CREATE_ID
		)
		VALUES(
			#{ilGoodsDiscountApprId}
		,	#{prevApprStat}
		,	#{apprStat}
		,	#{statusCmnt}
		,	#{apprSubUserId}
		,	#{apprUserId}
		,	#{createDt}
		,	#{createId}
		)
	</insert>

	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 가격정보 > 행사/할인 내역 > 우선할인,즉시할인 승인완료 후 할인내역 추가
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2021.04.30		임상건		  최초생성
	────────────────────────────────────────────────────────────────────────-->
	<insert id="addGoodsDiscountByAppr" useGeneratedKeys="true" keyProperty="ilGoodsDiscountId">
		/* goodsRegist.addGoodsDiscountByAppr */
		INSERT INTO IL_GOODS_DISCOUNT (
			IL_GOODS_ID
		,	DISCOUNT_TP
		,	DISCOUNT_START_DT
		,	DISCOUNT_END_DT
		,	DISCOUNT_METHOD_TP
		,	DISCOUNT_RATIO
		,	DISCOUNT_SALE_PRICE
		,	USE_YN
		,	CREATE_ID
		,	CREATE_DT
		)
		SELECT
			IL_GOODS_ID
		,	DISCOUNT_TP
		,	DISCOUNT_START_DT
		,	DISCOUNT_END_DT
		,	DISCOUNT_METHOD_TP
		,	DISCOUNT_RATIO
		,	DISCOUNT_SALE_PRICE
		,	'Y'
		,	CREATE_ID
		,	NOW()
		FROM
			IL_GOODS_DISCOUNT_APPR
		WHERE
			IL_GOODS_DISCOUNT_APPR_ID = #{ilGoodsDiscountApprId}
	</insert>

	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 묶음상품 > 가격정보 > 행사/할인 내역 > 할인 승인완료 후 묶음상품 개별품목 할인정보 승인 추가
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2020.12.01		임상건		  최초생성
	 * @
	────────────────────────────────────────────────────────────────────────-->
	<insert id="addGoodsPackageItemFixedDiscountPriceByAppr">
		/* goodsRegist.addGoodsPackageItemFixedDiscountPriceByAppr */
		INSERT INTO IL_GOODS_PACKAGE_ITEM_FIXED_DISCOUNT_PRICE (
			IL_GOODS_DISCOUNT_ID
		,	IL_GOODS_PACKAGE_GOODS_MAPPING_ID
		,	SALE_PRICE
		,	UNIT_SALE_PRICE
		,	DISCOUNT_RATIO
		,	CREATE_DT
		)
		SELECT
			#{ilGoodsDiscountId}
		,	IL_GOODS_PACKAGE_GOODS_MAPPING_ID
		,	SALE_PRICE
		,	UNIT_SALE_PRICE
		,	DISCOUNT_RATIO
		,	NOW()
		FROM
			IL_GOODS_PACKAGE_ITEM_FIXED_DISCOUNT_PRICE_APPR
		WHERE
			IL_GOODS_DISCOUNT_APPR_ID = #{ilGoodsDiscountApprId}
	</insert>

	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 가격정보 > 행사/할인 내역 > 우선할인,즉시할인 승인완료 후 할인내역 추가
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2021.04.30		임상건		  최초생성
	────────────────────────────────────────────────────────────────────────-->
	<update id="updateGoodsDiscountAppr">
		/* goodsRegist.updateGoodsDiscountAppr */
		UPDATE IL_GOODS_DISCOUNT_APPR SET
			IL_GOODS_DISCOUNT_ID = #{ilGoodsDiscountId}
		WHERE
			IL_GOODS_DISCOUNT_APPR_ID = #{ilGoodsDiscountApprId}
	</update>

	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 가격정보 > 행사/할인 내역 > 우선할인, 즉시할인 > 할인 설정
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2020.09.11		임상건		  최초생성
	 * @ 승인 프로세스 적용 처리가 진행 되어야 완료 됨
	────────────────────────────────────────────────────────────────────────-->
	<insert id="addGoodsDiscount" useGeneratedKeys="true" keyProperty="goodsDiscountId">
		/* goodsRegist.addGoodsDiscount */
		INSERT INTO IL_GOODS_DISCOUNT (
			IL_GOODS_ID
		,	DISCOUNT_TP
		,	DISCOUNT_START_DT
		,	DISCOUNT_END_DT
		,	DISCOUNT_METHOD_TP
		,	DISCOUNT_RATIO
		,	DISCOUNT_SALE_PRICE
		,	USE_YN
		,	CREATE_ID
		,	CREATE_DT
		)
		VALUES(
			#{goodsId}
		,	#{discountTypeCode}
		,	#{discountStartDateTime}
		,	DATE_FORMAT(CONCAT(#{discountEndDateTime}, ':59'), '%Y-%m-%d %H:%i:%s')
		,	#{discountMethodTypeCode}
		,	#{discountRatio}
		,	#{discountSalePrice}
		,	'Y'
		,	#{createId}
		,	SYSDATE()
		)
		ON DUPLICATE KEY UPDATE
			  DISCOUNT_END_DT = DATE_FORMAT(CONCAT(#{discountEndDateTime}, ':59'), '%Y-%m-%d %H:%i:%s')
			, DISCOUNT_METHOD_TP= #{discountMethodTypeCode}
			, DISCOUNT_RATIO= #{discountRatio}
			, DISCOUNT_SALE_PRICE= #{discountSalePrice}
			, USE_YN= 'Y'
	</insert>

	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 가격정보 > 행사/할인 내역 > 우선할인, 즉시할인 > 할인 설정 > 승인 요청 수정
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2020.09.11		임상건		  최초생성
	 * @ 승인 프로세스 적용 처리가 진행 되어야 완료 됨
	────────────────────────────────────────────────────────────────────────-->
	<update id="modifyGoodsDiscount">
		/* goodsRegist.modifyGoodsDiscount */
		UPDATE IL_GOODS_DISCOUNT SET
 			DISCOUNT_TP = #{discountTypeCode}
 		,	DISCOUNT_START_DT = #{discountStartDateTime}
 		,	DISCOUNT_END_DT = DATE_FORMAT(CONCAT(#{discountEndDateTime}, ':59'), '%Y-%m-%d %H:%i:%s')
 		,	DISCOUNT_METHOD_TP = #{discountMethodTypeCode}
 		,	DISCOUNT_RATIO = #{discountRatio}
 		,	DISCOUNT_SALE_PRICE = #{discountSalePrice}
 		,	MODIFY_ID = #{createId}
 		,	MODIFY_DT = SYSDATE()
		,	PRICE_CHANGE_PROC_YN = 'N'
		,	PRICE_CHANGE_PROC_DT = '1900-01-01 00:00:00'
		WHERE
			IL_GOODS_DISCOUNT_ID = #{goodsDiscountId}
		AND	IL_GOODS_ID = #{goodsId}
	</update>

	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 묶음 상품 > 기준상품, 묶음 상품 목록 조회
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2020.08.18		박영후		  최초생성
	 * @ 2020.11.05		임상건			리팩토링
	────────────────────────────────────────────────────────────────────────-->
	<resultMap type="kr.co.pulmuone.v1.goods.goods.dto.vo.GoodsRegistVo" id="getGoodsListMap">
		<result column="IL_GOODS_ID"				property="ilGoodsId" />
		<result column="IL_ITEM_CODE"				property="ilItemCode" />
		<result column="ITEM_BARCODE"				property="itemBarcode" />
		<result column="GOODS_TYPE"					property="goodsType" />
		<result column="GOODS_TYPE_NAME"			property="goodsTypeName" />
		<result column="GOODS_NAME"					property="goodsName" />
		<result column="TAX_YN"						property="taxYn" />
		<result column="TAX_YN_NAME"				property="taxYnName" />
		<result column="RECOMMENDED_PRICE"			property="recommendedPrice" />
		<result column="SALE_PRICE"					property="salePrice" />
		<result column="STANDARD_PRICE"				property="standardPrice" />
		<result column="PURCHASE_QUANITY"			property="purchaseQuanity" />
		<result column="IMAGE_NAME "				property="imageName " />
		<result column="SIZE_75_IMAGE"				property="size75Image" />
		<result column="SIZE_180_IMAGE"				property="size180Image" />
		<result column="CREATE_DATE"				property="createDate" />
		<result column="MODIFY_DATE"				property="modifyDate" />
		<result column="MODIFY_ID"					property="modifyId" />
		<result column="UR_WAREHOUSE_ID"			property="urWarehouseId" />
		<result column="UR_SUPPLIER_ID"				property="urSupplierId" />
		<result column="SUPPLIER_CD"				property="supplierCode" />
		<result column="UR_BRAND_ID"				property="urBrandId"/>
		<result column="CTGRY_STD_NM"				property="categoryStandardName"/>
		<result column="IL_CTGRY_STD_ID"			property="ilCategoryStadardId"/>
		<result column="UNDELIVERABLE_AREA_TP"		property="undeliverableAreaType"/>
		<result column="STORAGE_METHOD_TP"			property="storageMethodType"/>
		<result column="MALLINMALL_CTGRY_ID"		property="mallinmallCategoryId"/>
		<result column="EXTINCTION_YN"				property="extinctionYn"/>
		<result column="SALE_STATUS"				property="saleStatus"/>
		<result column="PRESENT_YN"					property="presentYn"/>
	</resultMap>

	<select id="getGoodsList" resultMap="getGoodsListMap">
		/*	goodsRegist.getGoodsList	*/
		SELECT
			  IG.IL_GOODS_ID
			, IG.IL_ITEM_CD AS IL_ITEM_CODE
			, IFNULL(IT.ITEM_BARCODE, '') AS ITEM_BARCODE
			, IG.GOODS_TP AS GOODS_TYPE
			, FN_DIC(SCC1.GB_DIC_MST_ID, #{gbLangId}) AS GOODS_TYPE_NAME
			, CASE
				WHEN IFNULL(IT.QTY_PER_PACKAGE, '') = ''
					THEN CONCAT(
						IG.GOODS_NM
						, ' ('
						, TRIM(IFNULL(IT.SIZE_PER_PACKAGE, ''))+0
						, IF(TRIM(IFNULL(IT.SIZE_UNIT_ETC, '')) != '', IT.SIZE_UNIT_ETC, IFNULL(FN_COMN_CODE_DIC(IT.SIZE_UNIT), ''))
						, ')'
					)
				ELSE CONCAT(
					IG.GOODS_NM
					, ' ('
					, TRIM(IFNULL(IT.SIZE_PER_PACKAGE, ''))+0
					, IF(TRIM(IFNULL(IT.SIZE_UNIT_ETC, '')) != '', IT.SIZE_UNIT_ETC, IFNULL(FN_COMN_CODE_DIC(IT.SIZE_UNIT), ''))
					, 'X'
					, IT.QTY_PER_PACKAGE
					, IF(TRIM(IFNULL(IT.PACKAGE_UNIT_ETC, '')) != '', IT.PACKAGE_UNIT_ETC, IFNULL(FN_COMN_CODE_DIC(IT.PACKAGE_UNIT), ''))
					, ')'
				)
			END AS GOODS_NAME
			, IT.TAX_YN
			, IF (IT.TAX_YN ='Y', '과세', '면세') AS TAX_YN_NAME
			, GP.RECOMMENDED_PRICE
			, GP.SALE_PRICE
			, GP.STANDARD_PRICE
			, 1 AS PURCHASE_QUANITY
			, II.IMG_NM AS IMAGE_NAME
			, II.C_IMG AS SIZE_75_IMAGE
			, II.S_IMG AS SIZE_180_IMAGE
			, DATE_FORMAT(IG.CREATE_DT, '%Y-%m-%d %T') AS CREATE_DATE
			, DATE_FORMAT(IG.MODIFY_DT, '%Y-%m-%d %T') AS MODIFY_DATE
			, UU.LOGIN_ID AS MODIFY_ID
			, IG.UR_WAREHOUSE_ID
			, IT.UR_SUPPLIER_ID
			, US.SUPPLIER_CD
			, IT.UR_BRAND_ID
			, FN_CTGRY_STD_FULL_NAME(IT.IL_CTGRY_STD_ID) AS CTGRY_STD_NM										/* 표준 카테고리 */
			, IT.IL_CTGRY_STD_ID																				/* 표준 카테고리ID */
			, IT.UNDELIVERABLE_AREA_TP																			/* 배송불가지역 코드*/
			, IT.STORAGE_METHOD_TP																				/* 보관방법 CODE */
			, SCC.ST_COMN_CODE_ID AS MALLINMALL_CTGRY_ID														/* 몰인몰 카테고리 분류값 */
			, IG.PRESENT_YN
		FROM
			IL_GOODS AS IG
			INNER JOIN IL_ITEM IT
				ON IG.IL_ITEM_CD = IT.IL_ITEM_CD
			INNER JOIN
			(
				SELECT
					A.IL_GOODS_ID
				,	CASE
						WHEN A.DISCOUNT_TP = 'GOODS_DISCOUNT_TP.PRIORITY' THEN 1
						WHEN A.DISCOUNT_TP = 'GOODS_DISCOUNT_TP.ERP_EVENT' THEN 2
						WHEN A.DISCOUNT_TP = 'GOODS_DISCOUNT_TP.IMMEDIATE' THEN 3
					ELSE
						4
					END AS DISCOUNT_PRIORITY
				,	A.RECOMMENDED_PRICE
				,	A.SALE_PRICE
				,	A.STANDARD_PRICE
				FROM
					IL_GOODS_PRICE A
				WHERE
					NOW() BETWEEN A.PRICE_START_DT AND A.PRICE_END_DT
				AND	A.USE_YN = 'Y'
			) GP
				ON IG.IL_GOODS_ID = GP.IL_GOODS_ID
			INNER JOIN ST_COMN_CODE SCC1		<!-- 상품유형 코드 -->
				ON SCC1.ST_COMN_CODE_ID = IG.GOODS_TP
				AND SCC1.ST_COMN_CODE_MST_CD = 'GOODS_TYPE'
			INNER JOIN UR_SUPPLIER US ON US.UR_SUPPLIER_ID = IT.UR_SUPPLIER_ID
			LEFT OUTER JOIN IL_ITEM_IMG II
				ON II.IL_ITEM_CD = IT.IL_ITEM_CD
				AND II.BASIC_YN = 'Y'
			LEFT OUTER JOIN UR_USER UU
				ON IG.MODIFY_ID = UU.UR_USER_ID
			LEFT JOIN (
				SELECT
					ST_COMN_CODE_ID
				,	ATTR2
				FROM
					ST_COMN_CODE
				WHERE
					ST_COMN_CODE_MST_CD = 'MALL_DIV'
			) SCC ON SCC.ATTR2 = IT.UR_BRAND_ID
		WHERE
			IG.DEL_YN = 'N'
		AND IG.IL_GOODS_ID IN (
			<foreach collection="ilGoodsIds" item="ilGoodsId" separator=",">
				#{ilGoodsId}
			</foreach>
		)
		ORDER BY IG.IL_GOODS_ID
	</select>

	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 묶음상품 상품정보 제공고시 목록 조회
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2020.08.19		박영후		  최초생성
	 * @ 2020.11.05		임상건			리팩토링
	────────────────────────────────────────────────────────────────────────-->
	<resultMap type="kr.co.pulmuone.v1.goods.goods.dto.vo.GoodsRegistVo" id="goodsInfoAnnounceListMap">
		<result column="IL_GOODS_ID" property="ilGoodsId" />
		<result column="GOODS_NAME" property="goodsName" />
		<result column="IL_ITEM_CODE" property="ilItemCode" />
		<result column="IL_SPEC_MASTER_ID" property="ilSpecMasterId" />
		<result column="SPEC_MASTER_NM" property="specMasterName" />
		<result column="IL_SPEC_FIELD_ID" property="ilSpecFieldId" />
		<result column="SPEC_FIELD_NAME" property="specFieldName" />
		<result column="SPEC_FIELD_VALUE" property="specFieldValue" />
		<result column="GROUP_SEQUENCE" property="groupSequence" />
	</resultMap>
	<select id="getGoodsInfoAnnounceList" resultMap="goodsInfoAnnounceListMap">
		/*	goodsRegist.getGoodsInfoAnnounceList	*/
		SELECT
			A.IL_GOODS_ID
		,	A.GOODS_NM AS GOODS_NAME
		,	B.IL_ITEM_CD AS IL_ITEM_CODE
		,	C.IL_SPEC_MASTER_ID
		,	C.SPEC_MASTER_NM AS SPEC_MASTER_NAME
		,	E.IL_SPEC_FIELD_ID
		,	E.SPEC_FIELD_NM AS SPEC_FIELD_NAME
		,	CASE
				WHEN E.SPEC_FIELD_CD = 'SPEC_FIELD_02' THEN IFNULL((
					SELECT
						CSTMR_SRVC_TEL
					FROM
						UR_COMPANY A1
						INNER JOIN UR_HEADQUARTERS B1
							ON B1.UR_COMPANY_ID = A1.UR_COMPANY_ID
					WHERE
						A1.COMP_TP = 'COMPANY_TYPE.HEADQUARTERS'
					LIMIT 1
				), '080-022-0085')
				WHEN E.SPEC_FIELD_CD = 'SPEC_FIELD_01' THEN
					CASE
						WHEN F.IL_ITEM_SPEC_VALUE_ID IS NOT NULL AND F.DIRECT_YN = 'Y' THEN F.SPEC_FIELD_VAL
						ELSE
							IFNULL((
								SELECT
									CASE
										WHEN DELIVERY > 30 THEN CONCAT('잔여 유통기한이 ', DELIVERY, '일 이상 남은 제품이 배송됩니다. / 유통기한 : ', C2.DISTRIBUTION_PERIOD, '일')
										ELSE CONCAT(DELIVERY, '일 이내 제조된 제품이 배송됩니다. / 유통기한 : ', C2.DISTRIBUTION_PERIOD, '일')
									END
								FROM
									IL_ITEM_WAREHOUSE A2
									INNER JOIN UR_SUPPLIER_WAREHOUSE B2
										ON B2.UR_SUPPLIER_WAREHOUSE_ID = A2.UR_SUPPLIER_WAREHOUSE_ID
									INNER JOIN IL_STOCK_DEADLINE C2
										ON C2.UR_SUPPLIER_ID = B2.UR_SUPPLIER_ID
										AND C2.UR_WAREHOUSE_ID IN (B2.UR_WAREHOUSE_ID, 0)
										AND C2.BASIC_YN = 'Y'
								WHERE
									A2.IL_ITEM_CD = B.IL_ITEM_CD
									AND B2.UR_WAREHOUSE_ID = #{urWarehouseId}
									AND C2.DISTRIBUTION_PERIOD &lt;= B.DISTRIBUTION_PERIOD
								ORDER BY C2.UR_WAREHOUSE_ID DESC, C2.DISTRIBUTION_PERIOD DESC
								LIMIT 1
							), '0일 이내 제조된 제품이 배송됩니다. / 유통기한 : 0일')
					END
				WHEN F.IL_ITEM_SPEC_VALUE_ID IS NULL THEN E.BASIC_VAL
				ELSE F.SPEC_FIELD_VAL
			END AS SPEC_FIELD_VALUE
		,	ROW_NUMBER() OVER (PARTITION BY A.IL_GOODS_ID ORDER BY A.IL_GOODS_ID, D.SORT) AS GROUP_SEQUENCE
		FROM
			IL_GOODS A
			INNER JOIN IL_ITEM B
				ON B.IL_ITEM_CD = A.IL_ITEM_CD
			INNER JOIN IL_SPEC_MASTER C
				ON C.IL_SPEC_MASTER_ID = B.IL_SPEC_MASTER_ID
				AND C.USE_YN = 'Y'
			INNER JOIN IL_SPEC_MASTER_FIELD D
				ON D.IL_SPEC_MASTER_ID = C.IL_SPEC_MASTER_ID
			INNER JOIN IL_SPEC_FIELD E
				ON E.IL_SPEC_FIELD_ID = D.IL_SPEC_FIELD_ID
			LEFT JOIN IL_ITEM_SPEC_VALUE F
				ON F.IL_ITEM_CD = B.IL_ITEM_CD
				AND F.IL_SPEC_FIELD_ID = E.IL_SPEC_FIELD_ID
		WHERE
			A.IL_GOODS_ID IN (
				<foreach collection="ilGoodsIds" item="ilGoodsId" separator=",">
					#{ilGoodsId}
				</foreach>
			)
		ORDER BY FIELD(A.IL_GOODS_ID,
			<foreach collection="ilGoodsIds" item="ilGoodsId" separator=",">
				#{ilGoodsId}
			</foreach>
		)
		,	ROW_NUMBER() OVER (PARTITION BY A.IL_GOODS_ID ORDER BY A.IL_GOODS_ID, D.SORT)
	</select>

	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 상품 영양정보 목록 조회
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2020.08.19		박영후		  최초생성
	 * @ 2020.11.05		임상건			리팩토링
	────────────────────────────────────────────────────────────────────────-->
	<resultMap type="kr.co.pulmuone.v1.goods.goods.dto.vo.GoodsRegistVo" id="goodsNutritionListMap">
		<result column="IL_GOODS_ID" property="ilGoodsId" />
		<result column="GOODS_NAME" property="goodsName" />
		<result column="IL_ITEM_CODE" property="ilItemCode" />
		<result column="NUTRITION_DISP_YN" property="nutritionDisplayYn" />
		<result column="NUTRITION_QTY_PER_ONCE" property="nutritionQuantityPerOnce" />
		<result column="NUTRITION_QTY_TOTAL" property="nutritionQuantityTotal" />
		<result column="NUTRITION_NAME" property="nutritionName" />
		<result column="NUTRITION_QUANTITY" property="nutritionQuantity" />
		<result column="NUTRITION_UNIT" property="nutritionUnit" />
		<result column="NUTRITION_PERCENT_YN" property="nutritionPercentYn" />
		<result column="NUTRITION_PERCENT" property="nutritionPercent" />
		<result column="NUTRITION_ETC" property="nutritionEtc" />
		<result column="GROUP_SEQUENCE" property="groupSequence" />
		<result column="MAX_NUMBER" property="maxNumber" />
	</resultMap>

	<select id="getGoodsNutritionList" resultMap="goodsNutritionListMap">
		/*	goodsPackage.getGoodsNutritionList	*/
		SELECT
			TBL.*
			, MAX(TBL.GROUP_SEQUENCE) OVER (PARTITION BY TBL.IL_GOODS_ID ORDER BY TBL.IL_GOODS_ID ) AS MAX_NUMBER
		FROM
		(
			SELECT
				  GS.IL_GOODS_ID
				, GS.GOODS_NM AS GOODS_NAME
				, IT.IL_ITEM_CD AS IL_ITEM_CODE
				, IT.NUTRITION_DISP_YN
				, IT.NUTRITION_QTY_PER_ONCE
				, IT.NUTRITION_QTY_TOTAL

				, NR.NUTRITION_NM AS NUTRITION_NAME
				, INR.NUTRITION_QTY AS NUTRITION_QUANTITY
				, NR.NUTRITION_UNIT
				, NR.NUTRITION_PERCENT_YN
				, INR.NUTRITION_PERCENT

				, IT.NUTRITION_ETC

				, ROW_NUMBER() OVER (PARTITION BY GS.IL_GOODS_ID ORDER BY GS.IL_GOODS_ID, NR.SORT) AS GROUP_SEQUENCE
			FROM
				IL_GOODS GS
				INNER JOIN IL_ITEM IT
					ON GS.IL_ITEM_CD = IT.IL_ITEM_CD

				INNER JOIN IL_ITEM_NUTRITION INR
					ON IT.IL_ITEM_CD = INR.IL_ITEM_CD
				INNER JOIN IL_NUTRITION NR
					ON INR.IL_NUTRITION_CD = NR.IL_NUTRITION_CD
			WHERE
				NR.DEL_YN = 'N'
			AND	GS.IL_GOODS_ID IN (
					<foreach collection="ilGoodsIds" item="ilGoodsId" separator=",">
						#{ilGoodsId}
					</foreach>
				)
		) TBL
		ORDER BY FIELD(TBL.IL_GOODS_ID,
			<foreach collection="ilGoodsIds" item="ilGoodsId" separator=",">
				#{ilGoodsId}
			</foreach>
		)
		, TBL.GROUP_SEQUENCE
	</select>

	<!--───────────────────────────────────────────────────────────────────────
	 * description : 묶음 상품/증정품 구성목록 저장
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2020.11.09		임상건		  최초생성
	 * @
	────────────────────────────────────────────────────────────────────────-->
	<insert id="addPackageGoodsMapping" useGeneratedKeys="true" keyProperty="ilGoodsPackageGoodsMappingId">
		/* goodsRegist.addPackageGoodsMapping */
		INSERT INTO IL_GOODS_PACKAGE_GOODS_MAPPING (
			IL_GOODS_ID
		,	TARGET_GOODS_ID
		,	GOODS_TP
		,	BASE_GOODS_YN
		,	GOODS_QTY
		,	SALE_PRICE_PER_UNIT
		,	SALE_PRICE
		,	IMG_SORT
		,	CREATE_ID
		,	CREATE_DT
		) VALUES (
			#{ilGoodsId}
		,	#{targetGoodsId}
		,	#{goodsType}
		,	#{baseGoodsYn}
		,	#{goodsQuantity}
		,	#{salePricePerUnit}
		,	#{salePrice}
		,	#{imageSort}
		,	#{createId}
		,	SYSDATE()
		)
	</insert>

	<!--───────────────────────────────────────────────────────────────────────
	 * description : 묶음 상품 이미지 등록
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2020.11.09		임상건		  최초생성
	 * @
	────────────────────────────────────────────────────────────────────────-->
	<insert id="addGoodsImage">
		/* goodsRegist.addGoodsImage */
		INSERT INTO IL_GOODS_IMG (
			IL_GOODS_ID
		,	BASIC_YN
		,	IMG_NM
		,	IMG_ORIGIN_NM
		,	B_IMG
		,	M_IMG
		,	MS_IMG
		,	S_IMG
		,	C_IMG
		,	SORT
		,	CREATE_ID
		) VALUES (
			#{ilGoodsId}
		,	#{basicYn}
		,	#{imagePath}
		,	#{imageOriginalName}
		,	#{bImage}
		,	#{mImage}
		,	#{msImage}
		,	#{sImage}
		,	#{cImage}
		,	#{sort}
		,	#{createId}
		)
	</insert>

	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 묶음상품 기본설정 > 묶음 조합 설정 > 묶음상품 구성 정보
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2020.11.11		임상건		  최초생성
	 * @
	────────────────────────────────────────────────────────────────────────-->
	<resultMap type="kr.co.pulmuone.v1.goods.goods.dto.vo.GoodsPackageGoodsMappingVo" id="goodsPackageGoodsMappingMap">
		<result column="IL_GOODS_PACKAGE_GOODS_MAPPING_ID"		property="ilGoodsPackageGoodsMappingId"/>
		<result column="GOODS_PACKAGE_TYPE"						property="goodsPackageType"/>
		<result column="IL_ITEM_CD"								property="ilItemCode"/>
		<result column="ITEM_BARCODE"							property="itemBarcode"/>
		<result column="TARGET_GOODS_ID"						property="targetGoodsId"/>
		<result column="GOODS_TP"								property="goodsType"/>
		<result column="GOODS_TYPE_NAME"						property="goodsTypeName"/>
		<result column="GOODS_NM"								property="goodsName"/>
		<result column="TAX_YN"									property="taxYn"/>
		<result column="TAX_NAME"								property="taxName"/>
		<result column="BASE_GOODS_YN"							property="baseGoodsYn"/>
		<result column="GOODS_QTY"								property="goodsQuantity"/>
		<result column="SALE_PRICE_PER_UNIT"					property="salePricePerUnit"/>
		<result column="SALE_PRICE"								property="salePrice"/>
		<result column="STANDARD_PRICE"							property="standardPrice"/>
		<result column="RECOMMENDED_PRICE"						property="recommendedPrice"/>
		<result column="SIZE_75_IMAGE"							property="size75Image"/>
		<result column="SIZE_180_IMAGE"							property="size180Image"/>
		<result column="IMG_SORT"								property="imageSort"/>
		<result column="EXTINCTION_YN"							property="extinctionYn"/>
		<result column="CREATE_ID"								property="createId"/>
		<result column="CREATE_DT"								property="createDate"/>
		<result column="MODIFY_ID"								property="modifyId"/>
		<result column="MODIFY_DT"								property="modifyDate"/>
		<result column="SALE_STATUS"							property="saleStatusCode"/>
		<result column="DISP_YN"								property="displayYn"/>
		<result column="STOCK_ORDER_YN"							property="stockOrderYn"/>
		<result column="UNLIMIT_STOCK_YN"						property="unlimitStockYn"/>
		<result column="NOT_IF_STOCK_CNT"						property="notIfStockCnt"/>
		<result column="D0_ORDER_QTY"							property="d0OrderQty"/>
		<result column="D1_ORDER_QTY"							property="d1OrderQty"/>
		<result column="D0_ORDER_DISCARD_QTY"					property="d0OrderDiscardQty"/>
		<result column="ITEM_WAREHOUSE_ID"						property="ilItemWarehouseId"/>
		<result column="PRESENT_YN"								property="presentYn"/>
	</resultMap>
	<select id="goodsPackageGoodsMappingList" resultMap="goodsPackageGoodsMappingMap">
		/* goodsRegist.goodsPackageGoodsMappingList */
		SELECT
			A.IL_GOODS_PACKAGE_GOODS_MAPPING_ID
		,	CASE
				WHEN A.GOODS_TP = 'GOODS_TYPE.GIFT' THEN '증정상품'
				WHEN A.GOODS_TP = 'GOODS_TYPE.GIFT_FOOD_MARKETING' THEN '식품마케팅증정'
			ELSE
				'묶음상품'
			END AS GOODS_PACKAGE_TYPE
		,	C.IL_ITEM_CD
		,	C.ITEM_BARCODE
		,	A.TARGET_GOODS_ID
		,	A.GOODS_TP
		,	D.NAME AS GOODS_TYPE_NAME
		, CASE
			WHEN IFNULL(C.QTY_PER_PACKAGE, '') = ''
				THEN CONCAT(
					B.GOODS_NM
					, ' ('
					, TRIM(IFNULL(C.SIZE_PER_PACKAGE, ''))+0
					, IF(TRIM(IFNULL(C.SIZE_UNIT_ETC, '')) != '', C.SIZE_UNIT_ETC, IFNULL(FN_COMN_CODE_DIC(C.SIZE_UNIT), ''))
					, ')'
				)
			ELSE CONCAT(
				B.GOODS_NM
				, ' ('
				, TRIM(IFNULL(C.SIZE_PER_PACKAGE, ''))+0
				, IF(TRIM(IFNULL(C.SIZE_UNIT_ETC, '')) != '', C.SIZE_UNIT_ETC, IFNULL(FN_COMN_CODE_DIC(C.SIZE_UNIT), ''))
				, 'X'
				, C.QTY_PER_PACKAGE
				, IF(TRIM(IFNULL(C.PACKAGE_UNIT_ETC, '')) != '', C.PACKAGE_UNIT_ETC, IFNULL(FN_COMN_CODE_DIC(C.PACKAGE_UNIT), ''))
				, ')'
			)
		END AS GOODS_NM
		,	C.TAX_YN
		,	CASE
				WHEN C.TAX_YN = 'Y' THEN '과세'
				WHEN C.TAX_YN = 'N' THEN '면세'
			END AS TAX_NAME
		,	A.BASE_GOODS_YN
		,	A.GOODS_QTY
		,	A.SALE_PRICE_PER_UNIT
		,	A.SALE_PRICE
		,	IFNULL(F.STANDARD_PRICE, 0) AS STANDARD_PRICE
		,	IFNULL(F.RECOMMENDED_PRICE, 0) AS RECOMMENDED_PRICE
		,	E.C_IMG AS SIZE_75_IMAGE
		,	E.S_IMG AS SIZE_180_IMAGE
		,	A.IMG_SORT
		,	C.EXTINCTION_YN
		,	A.CREATE_ID
		,	A.CREATE_DT
		,	A.MODIFY_ID
		,	A.MODIFY_DT
		,	IF (B.DISP_YN ='Y', '전시', '미전시') AS DISP_YN
		,	B.SALE_STATUS
		, 	UW.STOCK_ORDER_YN AS STOCK_ORDER_YN
		, 	IIW.UNLIMIT_STOCK_YN AS UNLIMIT_STOCK_YN
		, 	IIW.NOT_IF_STOCK_CNT AS NOT_IF_STOCK_CNT
		, 	IIS.D0_ORDER_QTY AS D0_ORDER_QTY
		, 	IIS.D1_ORDER_QTY AS D1_ORDER_QTY
		, 	IIS.D0_ORDER_DISCARD_QTY AS D0_ORDER_DISCARD_QTY
		,	IIW.IL_ITEM_WAREHOUSE_ID AS ITEM_WAREHOUSE_ID
		,	B.PRESENT_YN
		FROM
			IL_GOODS_PACKAGE_GOODS_MAPPING A
		INNER JOIN IL_GOODS B ON A.TARGET_GOODS_ID = B.IL_GOODS_ID
		INNER JOIN IL_ITEM C ON B.IL_ITEM_CD = C.IL_ITEM_CD
		INNER JOIN UR_SUPPLIER_WAREHOUSE USW ON USW.UR_SUPPLIER_ID = C.UR_SUPPLIER_ID AND USW.UR_WAREHOUSE_ID = B.UR_WAREHOUSE_ID
		INNER JOIN UR_WAREHOUSE UW ON UW.UR_WAREHOUSE_ID = B.UR_WAREHOUSE_ID
		INNER JOIN IL_ITEM_WAREHOUSE IIW ON IIW.IL_ITEM_CD = C.IL_ITEM_CD AND IIW.UR_SUPPLIER_WAREHOUSE_ID = USW.UR_SUPPLIER_WAREHOUSE_ID
		LEFT JOIN IL_ITEM_STOCK IIS ON IIS.IL_ITEM_WAREHOUSE_ID = IIW.IL_ITEM_WAREHOUSE_ID AND IIS.BASE_DT = CURDATE()
		LEFT JOIN (
			SELECT
				A.ST_COMN_CODE_ID AS CODE
				, B.DIC_NM AS NAME
			FROM
				ST_COMN_CODE A
			INNER JOIN GB_DIC B ON A.GB_DIC_MST_ID = B.GB_DIC_MST_ID AND B.GB_LANG_ID = '1'
			WHERE
				A.ST_COMN_CODE_MST_CD = 'GOODS_TYPE'
			AND A.USE_YN = UPPER('Y')
		) D ON A.GOODS_TP = D.CODE
		LEFT JOIN IL_ITEM_IMG E ON B.IL_ITEM_CD = E.IL_ITEM_CD AND E.BASIC_YN = 'Y'
		LEFT JOIN IL_GOODS_PRICE F ON F.IL_GOODS_ID = B.IL_GOODS_ID AND NOW() BETWEEN F.PRICE_START_DT AND F.PRICE_END_DT AND F.USE_YN = 'Y'
		WHERE
			A.IL_GOODS_ID = #{ilGoodsId}
		ORDER BY
		<choose>
			<when test="@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(imageSortYn, 'Y')">
				IMG_SORT
			</when>
			<otherwise>
				A.BASE_GOODS_YN	DESC
			,	(
					CASE
						WHEN A.GOODS_TP = 'GOODS_TYPE.NORMAL' THEN 1
						WHEN A.GOODS_TP = 'GOODS_TYPE.DISPOSAL' THEN 2
						WHEN A.GOODS_TP = 'GOODS_TYPE.GIFT' THEN 3
						WHEN A.GOODS_TP = 'GOODS_TYPE.GIFT_FOOD_MARKETING' THEN 4
						ELSE 5
					END
				)
			</otherwise>
		</choose>
	</select>

	<!--───────────────────────────────────────────────────────────────────────
	 * description : 묶음상품 전용 이미지 리스트 조회
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2020.11.11		임상건		  최초생성
	 * @
	────────────────────────────────────────────────────────────────────────-->
	<resultMap type="kr.co.pulmuone.v1.goods.goods.dto.vo.GoodsRegistImageVo" id="goodsImageMap">
		<result column="IL_GOODS_ID"					property="ilGoodsId"/>
		<result column="BASIC_YN"						property="basicYn"/>
		<result column="IMAGE_PATH"						property="imagePath"/>
		<result column="IMAGE_PHYSICAL_NAME"			property="imagePhysicalName"/>
		<result column="IMAGE_ORIGINAL_NAME"			property="imageOriginalName"/>
		<result column="SIZE_640_IMAGE_PATH"			property="size640ImagePath"/>
		<result column="SIZE_640_IMAGE_PHYSICAL_NAME"	property="size640ImagePhysicalName"/>
		<result column="SIZE_320_IMAGE_PATH"			property="size320ImagePath"/>
		<result column="SIZE_320_IMAGE_PHYSICAL_NAME"	property="size320ImagePhysicalName"/>
		<result column="SIZE_216_IMAGE_PATH"			property="size216ImagePath"/>
		<result column="SIZE_216_IMAGE_PHYSICAL_NAME"	property="size216ImagePhysicalName"/>
		<result column="SIZE_180_IMAGE_PATH"			property="size180ImagePath"/>
		<result column="SIZE_180_IMAGE_PHYSICAL_NAME"	property="size180ImagePhysicalName"/>
		<result column="SIZE_75_IMAGE_PATH"				property="size75ImagePath"/>
		<result column="SIZE_75_IMAGE_PHYSICAL_NAME"	property="size75ImagePhysicalName"/>
		<result column="SORT"							property="sort"/>
		<result column="CREATE_ID"						property="createId"/>
		<result column="MODIFY_ID"						property="modifyId"/>
	</resultMap>

	<select id="goodsImageList" resultMap="goodsImageMap">
	/* goodsRegist.goodsImageList */
	SELECT
		IL_GOODS_ID
	,	BASIC_YN
	,	IMG_NM AS IMAGE_PATH
	,	SUBSTRING_INDEX( IMG_NM, '/' , -1) AS IMAGE_PHYSICAL_NAME
	,	IMG_ORIGIN_NM AS IMAGE_ORIGINAL_NAME
	,	B_IMG AS SIZE_640_IMAGE_PATH
	,	SUBSTRING_INDEX( B_IMG, '/' , -1) AS SIZE_640_IMAGE_PHYSICAL_NAME
	,	M_IMG AS SIZE_320_IMAGE_PATH
	,	SUBSTRING_INDEX( M_IMG, '/' , -1) AS SIZE_320_IMAGE_PHYSICAL_NAME
	,	MS_IMG AS SIZE_216_IMAGE_PATH
	,	SUBSTRING_INDEX( MS_IMG, '/' , -1) AS SIZE_216_IMAGE_PHYSICAL_NAME
	,	S_IMG AS SIZE_180_IMAGE_PATH
	,	SUBSTRING_INDEX( S_IMG, '/' , -1) AS SIZE_180_IMAGE_PHYSICAL_NAME
	,	C_IMG AS SIZE_75_IMAGE_PATH
	,	SUBSTRING_INDEX( C_IMG, '/' , -1) AS SIZE_75_IMAGE_PHYSICAL_NAME
	,	SORT
	,	CREATE_ID AS CREATE_ID
	,	MODIFY_ID AS MODIFY_ID
	FROM
		IL_GOODS_IMG
	WHERE
		IL_GOODS_ID = #{ilGoodsId}
	ORDER BY SORT
	</select>

	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 묶음상품 전용이미지 삭제
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2020.11.11		임상건		  최초생성
	 * @
	────────────────────────────────────────────────────────────────────────-->
	<delete id="delGoodsImage">
		/* goodsRegist.delGoodsImage */
		DELETE FROM IL_GOODS_IMG WHERE IL_GOODS_ID = #{ilGoodsId}
	</delete>

	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 일일상품 > 판매 정보 > 일일 판매 옵션 설정 > 식단 주기 입력
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2020.11.18		임상건		  최초생성
	 * @
	────────────────────────────────────────────────────────────────────────-->
	<insert id="addGoodsDailyCycle" useGeneratedKeys="true" keyProperty="ilGoodsDailyCycleId">
		/* goodsRegist.addGoodsDailyCycle */
		INSERT INTO IL_GOODS_DAILY_CYCLE (
			IL_GOODS_ID
		,	GOODS_CYCLE_TP
		,	GOODS_CYCLE_TERM_TP
		,	CREATE_ID
		,	CREATE_DT
		)
		VALUES (
			#{ilGoodsId}
		,	#{goodsCycleType}
		,	#{goodsCycleTermType}
		,	#{createId}
		,	SYSDATE()
		)
	</insert>

	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 일일상품 > 판매 정보 > 일일 판매 옵션 설정 > 일괄배달 입력
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2020.11.18		임상건		  최초생성
	 * @
	────────────────────────────────────────────────────────────────────────-->
	<insert id="addGoodsDailyBulk" useGeneratedKeys="true" keyProperty="ilGoodsDailyBulkId">
		/* goodsRegist.addGoodsDailyBulk */
		INSERT INTO IL_GOODS_DAILY_BULK (
			IL_GOODS_ID
		,	GOODS_BULK_TP
		,	CREATE_ID
		,	CREATE_DT
		)
		VALUES (
			#{ilGoodsId}
		,	#{goodsBulkType}
		,	#{createId}
		,	SYSDATE()
		)
	</insert>

	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 일일상품 > 판매 정보 > 일일 판매 옵션 설정 > 식단 주기 리스트
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2020.11.18		임상건		  최초생성
	 * @
	────────────────────────────────────────────────────────────────────────-->
	<resultMap type="kr.co.pulmuone.v1.goods.goods.dto.vo.GoodsDailyCycleBulkVo" id="goodsDailyCycleMap">
		<result column="IL_GOODS_DAILY_CYCLE_ID"		property="ilGoodsDailyCycleId"/>
		<result column="IL_GOODS_ID"					property="ilGoodsId"/>
		<result column="GOODS_CYCLE_TP"					property="goodsCycleType"/>
		<result column="GOODS_CYCLE_TERM_TP"			property="goodsCycleTermType"/>
		<result column="CREATE_ID"						property="createId"/>
		<result column="MODIFY_ID"						property="modifyId"/>
	</resultMap>

	<select id="goodsDailyCycleList" resultMap="goodsDailyCycleMap">
		/* goodsRegist.goodsDailyCycleList */
		SELECT
			IL_GOODS_DAILY_CYCLE_ID
		,	IL_GOODS_ID
		,	GOODS_CYCLE_TP
		,	GOODS_CYCLE_TERM_TP
		,	CREATE_ID
		,	MODIFY_ID
		FROM
			IL_GOODS_DAILY_CYCLE
		WHERE
			IL_GOODS_ID = #{ilGoodsId}
	</select>

	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 일일상품 > 판매 정보 > 일일 판매 옵션 설정 > 일괄배달설정 리스트
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2020.11.18		임상건		  최초생성
	 * @
	────────────────────────────────────────────────────────────────────────-->
	<resultMap type="kr.co.pulmuone.v1.goods.goods.dto.vo.GoodsDailyCycleBulkVo" id="goodsDailyBulkMap">
		<result column="IL_GOODS_DAILY_BULK_ID"			property="ilGoodsDailyBulkId"/>
		<result column="IL_GOODS_ID"					property="ilGoodsId"/>
		<result column="GOODS_BULK_TP"					property="goodsBulkType"/>
		<result column="CREATE_ID"						property="createId"/>
		<result column="MODIFY_ID"						property="modifyId"/>
	</resultMap>

	<select id="goodsDailyBulkList" resultMap="goodsDailyBulkMap">
		/* goodsRegist.goodsDailyBulkList */
		SELECT
			IL_GOODS_DAILY_BULK_ID
		,	IL_GOODS_ID
		,	GOODS_BULK_TP
		,	CREATE_ID
		,	MODIFY_ID
		FROM
			IL_GOODS_DAILY_BULK
		WHERE
			IL_GOODS_ID = #{ilGoodsId}
	</select>

	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 일일상품 식단주기 삭제
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2020.11.19		임상건		  최초생성
	 * @
	────────────────────────────────────────────────────────────────────────-->
	<delete id="delGoodsDailyCycle">
		/* goodsRegist.delGoodsDailyCycle */
		DELETE FROM IL_GOODS_DAILY_CYCLE WHERE IL_GOODS_ID = #{ilGoodsId}
	</delete>

	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 일일상품 일괄 배달 설정 삭제
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2020.11.19		임상건		  최초생성
	 * @
	────────────────────────────────────────────────────────────────────────-->
	<delete id="delGoodsDailyBulk">
		/* goodsRegist.delGoodsDailyBulk */
		DELETE FROM IL_GOODS_DAILY_BULK WHERE IL_GOODS_ID = #{ilGoodsId}
	</delete>

	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 묶음상품 > 묶음상품 원본 가격 입력
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2020.11.30		임상건		  최초생성
	 * @
	────────────────────────────────────────────────────────────────────────-->
	<insert id="addGoodsPackagePriceOrig">
		/* goodsRegist.addGoodsPackagePriceOrig */
		INSERT INTO IL_GOODS_PACKAGE_PRICE_ORIG (
			IL_GOODS_ID
		,	PRICE_START_DT
		,	PRICE_END_DT
		,	STANDARD_PRICE
		,	RECOMMENDED_PRICE
		,	CREATE_DT
		)
		VALUES (
			#{ilGoodsId}
		,	#{priceStartDate}
		,	#{priceEndDate}
		,	#{standardPrice}
		,	#{recommendedPrice}
		,	SYSDATE()
		)
	</insert>

	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 묶음상품 > 묶음상품 개별품목 고정가 할인가격 입력
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2020.12.01		임상건		  최초생성
	 * @
	────────────────────────────────────────────────────────────────────────-->
	<insert id="addGoodsPackageItemFixedDiscountPrice">
		/* goodsRegist.addGoodsPackageItemFixedDiscountPrice */
		INSERT INTO IL_GOODS_PACKAGE_ITEM_FIXED_DISCOUNT_PRICE (
			IL_GOODS_DISCOUNT_ID
		,	IL_GOODS_PACKAGE_GOODS_MAPPING_ID
		,	SALE_PRICE
		,	UNIT_SALE_PRICE
		,	DISCOUNT_RATIO
		,	CREATE_DT
		)
		VALUES (
			#{ilGoodsDiscountId}
		,	#{ilGoodsPackageGoodsMappingId}
		,	#{salePrice}
		,	#{salePricePerUnit}
		,	#{discountRatio}
		,	SYSDATE()
		)
	</insert>

	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 묶음상품 > 묶음상품 개별품목 고정가 할인가격 입력
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2020.12.01		임상건		  최초생성
	 * @
	────────────────────────────────────────────────────────────────────────-->
	<insert id="addGoodsPackageItemFixedDiscountPriceAppr">
		/* goodsRegist.addGoodsPackageItemFixedDiscountPriceAppr */
		INSERT INTO IL_GOODS_PACKAGE_ITEM_FIXED_DISCOUNT_PRICE_APPR (
			IL_GOODS_DISCOUNT_APPR_ID
		,	IL_GOODS_PACKAGE_GOODS_MAPPING_ID
		,	SALE_PRICE
		,	UNIT_SALE_PRICE
		,	DISCOUNT_RATIO
		,	CREATE_DT
		)
		VALUES (
			#{ilGoodsDiscountApprId}
		,	#{ilGoodsPackageGoodsMappingId}
		,	#{salePrice}
		,	#{unitSalePrice}
		,	#{discountRatio}
		,	SYSDATE()
		)
	</insert>

	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 묶음 상품 > 기본할인 등록 > 가격 계산 상품 리스트
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2020.12.03		임상건		  최초생성
	────────────────────────────────────────────────────────────────────────-->
	<resultMap type="kr.co.pulmuone.v1.goods.goods.dto.vo.GoodsPackageCalcListVo" id="getGoodsPackageCalcMap">
		<result column="IL_ITEM_CD"							property="ilItemCode" />
		<result column="IL_GOODS_PACKAGE_GOODS_MAPPING_ID"	property="ilGoodsPackageGoodsMappingId" />
		<result column="ITEM_BARCODE"						property="itemBarcode" />
		<result column="IL_GOODS_ID"						property="ilGoodsId" />
		<result column="GOODS_TP"							property="goodsType" />
		<result column="GOODS_TYPE_NAME"					property="goodsTypeName" />
		<result column="GOODS_NM"							property="goodsName" />
		<result column="TAX_YN"								property="taxYn" />
		<result column="TAX_YN_NAME"						property="taxYnName" />
		<result column="STANDARD_PRICE"						property="standardPrice" />
		<result column="RECOMMENDED_PRICE"					property="recommendedPrice" />
		<result column="GOODS_QTY"							property="goodsQuantity" />
		<result column="STANDARD_TOTAL_PRICE"				property="standardTotalPrice" />
		<result column="RECOMMENDED_TOTAL_PRICE"			property="recommendedTotalPrice" />
		<result column="IL_GOODS_DISCOUNT_ID"				property="ilGoodsDiscountId" />
		<result column="DISCOUNT_RATIO"						property="discountRatio" />
		<result column="DISCOUNT_SALE_PRICE"				property="discountSalePrice" />
		<result column="SALE_PRICE"							property="salePrice" />
		<result column="SALE_TOTAL_PRICE"					property="saleTotalPrice" />
	</resultMap>

	<select id="goodsPackageCalcList" resultMap="getGoodsPackageCalcMap">
		/*	goodsRegist.goodsPackageCalcList	*/
		SELECT
			IG.IL_ITEM_CD														<!-- #품목코드 -->
		,	IGPGM.IL_GOODS_PACKAGE_GOODS_MAPPING_ID								<!-- #묶음상품 관리ID -->
		,	IFNULL(IT.ITEM_BARCODE, '') AS ITEM_BARCODE							<!-- #품목바코드 -->
		,	IG.IL_GOODS_ID														<!-- #상품ID -->
		,	IG.GOODS_TP															<!-- #상품유형Type -->
		,	FN_DIC(SCC1.GB_DIC_MST_ID, '1') AS GOODS_TYPE_NAME					<!-- #상품유형명 -->
		,	IG.GOODS_NM															<!-- #상품명 -->
		,	IT.TAX_YN															<!-- #과세여부 -->
		,	IF (IT.TAX_YN ='Y', '과세', '면세') AS TAX_YN_NAME					<!-- #과세여부명 -->
		,	GP.STANDARD_PRICE													<!-- #원가 -->
		,	GP.RECOMMENDED_PRICE												<!-- #정상가 -->
		,	IGPGM.GOODS_QTY														<!-- #구성수량 -->
		,	(GP.STANDARD_PRICE * IGPGM.GOODS_QTY) AS STANDARD_TOTAL_PRICE		<!-- #원가 총액 -->
		,	(GP.RECOMMENDED_PRICE * IGPGM.GOODS_QTY) AS RECOMMENDED_TOTAL_PRICE	<!-- #정상가 총액 -->
		,	IGD.IL_GOODS_DISCOUNT_ID											<!-- #상품할인 ID -->
		,	IGD.DISCOUNT_RATIO													<!-- #정률할인액 -->
		,	IGD.DISCOUNT_SALE_PRICE												<!-- #고정할인가 -->
		, 	IF(IGPGM.GOODS_TP='GOODS_TYPE.GIFT' OR IGPGM.GOODS_TP='GOODS_TYPE.GIFT_FOOD_MARKETING', 0
				,CASE
					WHEN IGD.DISCOUNT_RATIO = 0 AND IGD.DISCOUNT_SALE_PRICE > 0 THEN
						IGPIFDP.SALE_PRICE/IGPGM.GOODS_QTY
					WHEN IGD.DISCOUNT_RATIO > 0 AND IGD.DISCOUNT_SALE_PRICE = 0 THEN
						GP.RECOMMENDED_PRICE - TRUNCATE(GP.RECOMMENDED_PRICE * (IGD.DISCOUNT_RATIO/100), -1)
				END) AS SALE_PRICE												<!-- #묶음상품(개당) 가격 -->
		,	IF(IGPGM.GOODS_TP='GOODS_TYPE.GIFT' OR IGPGM.GOODS_TP='GOODS_TYPE.GIFT_FOOD_MARKETING', 0
				,CASE
					WHEN IGD.DISCOUNT_RATIO = 0 AND IGD.DISCOUNT_SALE_PRICE > 0 THEN
						IGPIFDP.SALE_PRICE
					WHEN IGD.DISCOUNT_RATIO > 0 AND IGD.DISCOUNT_SALE_PRICE = 0 THEN
						(GP.RECOMMENDED_PRICE - TRUNCATE(GP.RECOMMENDED_PRICE * (IGD.DISCOUNT_RATIO/100), -1)) * IGPGM.GOODS_QTY
				END) AS SALE_TOTAL_PRICE										<!-- #묶음상품 총액 -->
		FROM
			IL_GOODS IG
		INNER JOIN IL_ITEM IT
			ON IG.IL_ITEM_CD = IT.IL_ITEM_CD
		INNER JOIN IL_GOODS_PACKAGE_GOODS_MAPPING IGPGM
			ON IG.IL_GOODS_ID = IGPGM.TARGET_GOODS_ID
		INNER JOIN
		(
			SELECT
				A.IL_GOODS_ID
			,	CASE
					WHEN A.DISCOUNT_TP = 'GOODS_DISCOUNT_TP.PRIORITY' THEN 1
					WHEN A.DISCOUNT_TP = 'GOODS_DISCOUNT_TP.ERP_EVENT' THEN 2
					WHEN A.DISCOUNT_TP = 'GOODS_DISCOUNT_TP.IMMEDIATE' THEN 3
				ELSE
					4
				END AS DISCOUNT_PRIORITY
			,	A.RECOMMENDED_PRICE
			,	A.SALE_PRICE
			,	A.STANDARD_PRICE
			FROM
				IL_GOODS_PRICE A
			WHERE
				NOW() BETWEEN A.PRICE_START_DT AND A.PRICE_END_DT
			AND	A.USE_YN = 'Y'
		) GP
			ON IG.IL_GOODS_ID = GP.IL_GOODS_ID
		INNER JOIN ST_COMN_CODE SCC1
			ON SCC1.ST_COMN_CODE_ID = IG.GOODS_TP
			AND SCC1.ST_COMN_CODE_MST_CD = 'GOODS_TYPE'
		INNER JOIN (
			SELECT
				*
			FROM
				IL_GOODS_DISCOUNT A
			WHERE
				A.IL_GOODS_ID = #{ilGoodsId}
			AND NOW() BETWEEN A.DISCOUNT_START_DT AND A.DISCOUNT_END_DT
			AND A.DISCOUNT_TP = 'GOODS_DISCOUNT_TP.PACKAGE'
			AND USE_YN = 'Y'
		) IGD
			ON IGD.IL_GOODS_ID = IGPGM.IL_GOODS_ID
		LEFT JOIN IL_GOODS_PACKAGE_ITEM_FIXED_DISCOUNT_PRICE IGPIFDP
			ON IGD.IL_GOODS_DISCOUNT_ID = IGPIFDP.IL_GOODS_DISCOUNT_ID
			AND IGPGM.IL_GOODS_PACKAGE_GOODS_MAPPING_ID  = IGPIFDP.IL_GOODS_PACKAGE_GOODS_MAPPING_ID
		WHERE
			IGPGM.IL_GOODS_ID = #{ilGoodsId}
		<if test="!isGiftGoodsYn">
		AND	IGPGM.GOODS_TP NOT IN('GOODS_TYPE.GIFT', 'GOODS_TYPE.GIFT_FOOD_MARKETING')
		</if>
	</select>

	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 묶음상품 > 묶음 상품 가격정보 저장(프로시져 호출)
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2020.12.07		임상건		  최초생성
	 * @
	────────────────────────────────────────────────────────────────────────-->
	<update id="spGoodsPriceUpdateWhenPackageGoodsChanges" statementType="CALLABLE" parameterType="kr.co.pulmuone.v1.goods.goods.dto.GoodsRegistRequestDto">
		/* goodsRegist.spGoodsPriceUpdateWhenPackageGoodsChanges */
		CALL SP_GOODS_PRICE_UPDATE_WHEN_PACKAGE_GOODS_CHANGES(
			#{ilGoodsId}
		,	#{inDebugFlag}
		)
	</update>

	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 일반상품 > 품목 가격정보 Update(프로시져 호출)
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2020.12.07		임상건		  최초생성
	 * @
	────────────────────────────────────────────────────────────────────────-->
	<update id="spGoodsPriceUpdateWhenItemPriceChanges" statementType="CALLABLE">
		/* goodsRegist.spGoodsPriceUpdateWhenItemPriceChanges */
		CALL SP_GOODS_PRICE_UPDATE_WHEN_ITEM_PRICE_CHANGES(
			#{ilItemCode}
		,	#{inDebugFlag}
		)
	</update>

	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 묶음상품 > 품목 가격정보 Update(프로시져 호출)
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2021.04.28		원종한		  최초생성
	 * @
	────────────────────────────────────────────────────────────────────────-->
	<update id="spPackageGoodsPriceUpdateWhenItemPriceChanges" statementType="CALLABLE" >
		/* goodsRegist.spPackageGoodsPriceUpdateWhenItemPriceChanges */
		CALL SP_PACKAGE_GOODS_PRICE_UPDATE_WHEN_ITEM_PRICE_CHANGES(
			#{inDebugFlag}
		)
	</update>


	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 일반상품 저장시 기본 상품 가격정보 생성(프로시져 호출)
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2020.12.18		임상건		  최초생성
	 * @
	────────────────────────────────────────────────────────────────────────-->
	<update id="spGoodsPriceUpdateWhenGoodsRegist" statementType="CALLABLE" parameterType="kr.co.pulmuone.v1.goods.goods.dto.GoodsRegistRequestDto">
		/* goodsRegist.spGoodsPriceUpdateWhenGoodsRegist */
		CALL SP_GOODS_PRICE_UPDATE_WHEN_GOODS_REGIST(
			#{ilGoodsId}
		,	#{inDebugFlag}
		)
	</update>

	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 묶음 상품 > 묶음상품 기본 판매가 > 기존 종료일 변경
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2020.12.07		임상건		  최초생성
	 * @
	────────────────────────────────────────────────────────────────────────-->
	<update id="updateGoodsDiscountEndTime">
		/* goodsRegist.updateGoodsDiscountEndTime */
		UPDATE IL_GOODS_DISCOUNT SET
			DISCOUNT_END_DT = DATE_ADD(DATE_FORMAT(CONCAT(#{newGoodsDiscountStartTime}, ':00'), '%Y-%m-%d %H:%i:%s'), INTERVAL -1 SECOND)
			, PRICE_CHANGE_PROC_YN = 'N'
			, PRICE_CHANGE_PROC_DT = '1900-01-01 00:00:00'
		WHERE
			IL_GOODS_ID = #{ilGoodsId}
		AND	DISCOUNT_TP = 'GOODS_DISCOUNT_TP.PACKAGE'
		AND	DISCOUNT_END_DT = '2999-12-31 23:59:59'
		AND	DISCOUNT_START_DT != DATE_FORMAT(CONCAT(#{newGoodsDiscountStartTime}, ':00'), '%Y-%m-%d %H:%i:%s')
	</update>

	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 묶음 상품 > 묶음상품 기본 판매가 승인 > 기존 종료일 변경
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2020.12.07		임상건		  최초생성
	 * @
	────────────────────────────────────────────────────────────────────────-->
	<update id="updateGoodsDiscountApprEndTime">
		/* goodsRegist.updateGoodsDiscountApprEndTime */
		UPDATE IL_GOODS_DISCOUNT_APPR SET
		DISCOUNT_END_DT = DATE_ADD(DATE_FORMAT(CONCAT(#{newGoodsDiscountStartTime}, ':00'), '%Y-%m-%d %H:%i:%s'), INTERVAL -1 SECOND)
		WHERE
			IL_GOODS_ID = #{ilGoodsId}
		AND	DISCOUNT_TP = 'GOODS_DISCOUNT_TP.PACKAGE'
		AND	DISCOUNT_END_DT = '2999-12-31 23:59:59'
		AND	DISCOUNT_START_DT != DATE_FORMAT(CONCAT(#{newGoodsDiscountStartTime}, ':00'), '%Y-%m-%d %H:%i:%s')
	</update>

	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 일반상품 > 임직원 할인 정보 > 임직원 기본할인 정보
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2020.12.17		임상건		  최초생성
	────────────────────────────────────────────────────────────────────────-->
	<resultMap type="kr.co.pulmuone.v1.goods.goods.dto.vo.GoodsPriceInfoResultVo" id="goodsBaseDiscountEmployeeListMap">
		<result column="IL_ITEM_PRICE_ID"					property="ilItemPriceId"/>
		<result column="IL_ITEM_CD"							property="ilItemCode"/>
		<result column="DISCOUNT_START_DT_TIME"				property="discountStartDateTime"/>
		<result column="DISCOUNT_END_DT_TIME"				property="discountEndDateTime"/>
		<result column="STANDARD_PRICE"						property="standardPrice"/>
		<result column="RECOMMENDED_PRICE"					property="recommendedPrice"/>
		<result column="UR_BRAND_ID"						property="urBrandId"/>
		<result column="TAX_YN"								property="taxYn"/>
		<result column="DISCOUNT_RATIO"						property="discountRatio"/>
		<result column="DISCOUNT_SALE_PRICE"				property="discountSalePrice"/>
		<result column="MARGIN_RATE"						property="marginRate"/>
	</resultMap>
	<select id="goodsBaseDiscountEmployeeList" resultMap="goodsBaseDiscountEmployeeListMap">
		/*	goodsRegist.goodsBaseDiscountEmployeeList	*/
		SELECT
			IIP.IL_ITEM_PRICE_ID
		,	IIP.IL_ITEM_CD
		,	DATE_FORMAT(NOW(), '%Y-%m-%d %H:%i') AS DISCOUNT_START_DT_TIME					/* 할인시작일(시간, 분 포함)/ 상품등록시에 오늘날짜, 상품수정시에 상품등록일*/
		,	DATE_FORMAT('2999-12-31 23:59:59', '%Y-%m-%d %H:%i') AS DISCOUNT_END_DT_TIME	/* 할인종료일(시간, 분 포함)*/
		,	IIP.STANDARD_PRICE																/* 품목 원가 */
		,	IIP.RECOMMENDED_PRICE															/* 품목 정상가 */
		,	II.UR_BRAND_ID																	/* 브랜드ID */
		,	II.TAX_YN																		/* 과세여부 */
		,	IFNULL(PEDBG.DISCOUNT_RATIO,0) AS DISCOUNT_RATIO								/* 브랜드별 임직원 할인율 */
		,	TRUNCATE(IIP.RECOMMENDED_PRICE - (IIP.RECOMMENDED_PRICE * (IFNULL(PEDBG.DISCOUNT_RATIO,0) * 0.01)),-1) AS DISCOUNT_SALE_PRICE	/* 임직원 판매가 */
		,	CASE WHEN II.TAX_YN = 'Y' THEN
				TRUNCATE(
					(
						(CAST(TRUNCATE(IIP.RECOMMENDED_PRICE - (IIP.RECOMMENDED_PRICE * (IFNULL(PEDBG.DISCOUNT_RATIO,0) * 0.01)),-1) AS SIGNED)-(CAST(IIP.STANDARD_PRICE AS SIGNED))*1.1)
					)
					/
					TRUNCATE(IIP.RECOMMENDED_PRICE - (IIP.RECOMMENDED_PRICE * (IFNULL(PEDBG.DISCOUNT_RATIO,0) * 0.01)),-1)*100,0
				)
			ELSE
				TRUNCATE(
					((CAST(TRUNCATE(IIP.RECOMMENDED_PRICE - (IIP.RECOMMENDED_PRICE * (IFNULL(PEDBG.DISCOUNT_RATIO,0) * 0.01)),-1) AS SIGNED)-CAST(IIP.STANDARD_PRICE AS SIGNED)))
					/
					TRUNCATE(IIP.RECOMMENDED_PRICE - (IIP.RECOMMENDED_PRICE * (IFNULL(PEDBG.DISCOUNT_RATIO,0) * 0.01)),-1)*100,0
				)
			END AS MARGIN_RATE																/* 마진율 */
		FROM
			IL_ITEM_PRICE IIP
		INNER JOIN IL_ITEM II ON II.IL_ITEM_CD = IIP.IL_ITEM_CD
		INNER JOIN PS_EMPL_DISC_BRAND_GRP_BRAND PEDBGB ON II.UR_BRAND_ID = PEDBGB.UR_BRAND_ID
		INNER JOIN PS_EMPL_DISC_BRAND_GRP PEDBG ON PEDBG.PS_EMPL_DISC_BRAND_GRP_ID = PEDBGB.PS_EMPL_DISC_BRAND_GRP_ID
		WHERE
			IIP.IL_ITEM_CD = #{ilItemCode}
		AND	NOW() BETWEEN IIP.START_DT AND IIP.END_DT
		ORDER BY IIP.END_DT
		LIMIT 1
	</select>

	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 묶음상품 > 임직원 할인 정보 > 임직원 기본할인 정보
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2020.12.18		임상건		  최초생성
	────────────────────────────────────────────────────────────────────────-->
	<resultMap type="kr.co.pulmuone.v1.goods.goods.dto.vo.GoodsPriceInfoResultVo" id="goodsPackageBaseDiscountEmployeeListMap">
		<result column="ROW_NUM"							property="rowNum"/>
		<result column="ROW_GROUP_NUM"						property="rowGroupNum"/>
		<result column="ROW_COUNT"							property="rowCount"/>
		<result column="IL_GOODS_PACKAGE_GOODS_MAPPING_ID"	property="ilGoodsPackageGoodsMappingId" />
		<result column="IL_ITEM_PRICE_ID"					property="ilItemPriceId"/>
		<result column="IL_ITEM_CD"							property="ilItemCode"/>
		<result column="DISCOUNT_TYPE_CODE_NAME"			property="discountTypeCodeName"/>
		<result column="DISCOUNT_START_DT_TIME"				property="discountStartDateTime"/>
		<result column="DISCOUNT_END_DT_TIME"				property="discountEndDateTime"/>
		<result column="IL_GOODS_ID"						property="ilGoodsId"/>
		<result column="GOODS_NM"							property="goodsName"/>
		<result column="STANDARD_PRICE"						property="standardPrice"/>
		<result column="RECOMMENDED_PRICE"					property="recommendedPrice"/>
		<result column="GOODS_QTY"							property="goodsQuantity"/>
		<result column="RECOMMENDED_TOTAL_PRICE"			property="recommendedTotalPrice"/>
		<result column="UR_BRAND_ID"						property="urBrandId"/>
		<result column="TAX_YN"								property="taxYn"/>
		<result column="DISCOUNT_RATIO"						property="discountRatio"/>
		<result column="DISCOUNT_SALE_PRICE"				property="discountSalePrice"/>
		<result column="MARGIN_RATE"						property="marginRate"/>
	</resultMap>
	<select id="goodsPackageBaseDiscountEmployeeList" resultMap="goodsPackageBaseDiscountEmployeeListMap">
		/*	goodsRegist.goodsPackageBaseDiscountEmployeeList	*/
		SELECT
			@rownum:=@rownum+1 AS ROW_NUM
		,	@rowGroupNum:=@rowGroupNum+1 AS ROW_GROUP_NUM
		,	GPBDEL.*
		FROM
		(
			SELECT
				IGPGM.IL_GOODS_PACKAGE_GOODS_MAPPING_ID
			,	IIP.IL_ITEM_PRICE_ID
			,	IIP.IL_ITEM_CD
			,	'기본' AS DISCOUNT_TYPE_CODE_NAME												/* 할인구분(무조건 기본임) */
			,	DATE_FORMAT(IGM.CREATE_DT, '%Y-%m-%d %H:%i') AS DISCOUNT_START_DT_TIME			/* 할인시작일(시간, 분 포함)/ 상품등록시에 오늘날짜, 상품수정시에 상품등록일*/
			,	DATE_FORMAT('2999-12-31 23:59:59', '%Y-%m-%d %H:%i') AS DISCOUNT_END_DT_TIME	/* 할인종료일(시간, 분 포함)*/
			,	COALESCE(IG.IL_GOODS_ID, '합계') AS IL_GOODS_ID									/* 상품ID */
			,	IG.GOODS_NM																		/* 상품명 */
			,	SUM(IIP.STANDARD_PRICE) AS STANDARD_PRICE										/* 품목 원가 */
			,	SUM(IIP.RECOMMENDED_PRICE) AS RECOMMENDED_PRICE									/* 품목 정상가 */
			,	SUM(IGPGM.GOODS_QTY) AS GOODS_QTY												/* 구성수량 */
			,	SUM(IIP.RECOMMENDED_PRICE * IGPGM.GOODS_QTY) AS RECOMMENDED_TOTAL_PRICE			/* 정상가 총액*/
			,	II.UR_BRAND_ID																	/* 브랜드ID */
			,	II.TAX_YN																		/* 과세여부 */
			,	AVG(IFNULL(PEDBG.DISCOUNT_RATIO,0)) AS DISCOUNT_RATIO							/* 브랜드별 임직원 할인율 */
			,	SUM(
					(IIP.RECOMMENDED_PRICE - (IIP.RECOMMENDED_PRICE * IFNULL(PEDBG.DISCOUNT_RATIO,0) / 100) -
					( (IIP.RECOMMENDED_PRICE - (IIP.RECOMMENDED_PRICE * IFNULL(PEDBG.DISCOUNT_RATIO,0) / 100)) % 10 )) * IGPGM.GOODS_QTY
				) AS DISCOUNT_SALE_PRICE	/* 임직원 할인가 */
			,	(SELECT COUNT(IL_GOODS_PACKAGE_GOODS_MAPPING_ID) FROM IL_GOODS_PACKAGE_GOODS_MAPPING WHERE IL_GOODS_ID = #{ilGoodsId} AND GOODS_TP NOT IN('GOODS_TYPE.GIFT', 'GOODS_TYPE.GIFT_FOOD_MARKETING')) AS ROW_COUNT
			FROM
				IL_GOODS_PACKAGE_GOODS_MAPPING IGPGM
			INNER JOIN IL_GOODS IG ON IG.IL_GOODS_ID = IGPGM.TARGET_GOODS_ID
			INNER JOIN IL_ITEM_PRICE IIP ON IIP.IL_ITEM_CD = IG.IL_ITEM_CD
			INNER JOIN IL_ITEM II ON II.IL_ITEM_CD = IIP.IL_ITEM_CD
			LEFT JOIN PS_EMPL_DISC_BRAND_GRP_BRAND PEDBGB ON II.UR_BRAND_ID = PEDBGB.UR_BRAND_ID
			LEFT JOIN PS_EMPL_DISC_BRAND_GRP PEDBG ON PEDBG.PS_EMPL_DISC_BRAND_GRP_ID = PEDBGB.PS_EMPL_DISC_BRAND_GRP_ID
			INNER JOIN IL_GOODS IGM ON IGM.IL_GOODS_ID = IGPGM.IL_GOODS_ID
			WHERE
				IGPGM.IL_GOODS_ID = #{ilGoodsId}
			AND	IGPGM.GOODS_TP NOT IN('GOODS_TYPE.GIFT', 'GOODS_TYPE.GIFT_FOOD_MARKETING')
			AND	NOW() BETWEEN IIP.START_DT AND IIP.END_DT
			GROUP BY IG.IL_GOODS_ID
			WITH ROLLUP
		) GPBDEL
		INNER JOIN (SELECT @rownum:=0, @rowGroupNum:=0) RN
		ORDER BY
			GPBDEL.IL_GOODS_ID = '합계'
		,	GPBDEL.IL_GOODS_PACKAGE_GOODS_MAPPING_ID
	</select>

	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 일반상품 > 판매 정보 > 일일 판매 옵션 설정 > 예약판매 > 주문수집I/F일, 출고예정일, 도착예정일 산출
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2020.12.10		임상건		  최초생성
	 * @
	────────────────────────────────────────────────────────────────────────-->
	<resultMap type="kr.co.pulmuone.v1.goods.goods.dto.vo.GoodsRegistReserveOptionVo" id="goodsReservationCalcMap">
		<result column="PS_SHIPPING_PATTERN_ID"					property="psShippingPatternId"/>
		<result column="WEEK_CD"								property="weekCode"/>
		<result column="WEEK_CD_WEEKDAY"						property="weekCodeWeekday"/>
		<result column="ORDER_IF_DATE"							property="orderIfDate"/>
		<result column="RESERVE_END_DT_WEEKDAY"					property="reserveEndDateWeekday"/>
		<result column="RESERVE_END_DT"							property="reserveEndDate"/>
		<result column="FORWARDING_SCHEDULED_DAY"				property="forwardingScheduledDay"/>
		<result column="ARRIVAL_SCHEDULED_DAY"					property="arrivalScheduledDay"/>
		<result column="RELEASE_DATE"							property="releaseDate"/>
		<result column="ARRIVE_DATE"							property="arriveDate"/>
		<result column="CREATE_ID"								property="createId"/>
		<result column="CREATE_DT"								property="createDate"/>
		<result column="MODIFY_ID"								property="modifyId"/>
		<result column="MODIFY_DT"								property="modifyDate"/>
	</resultMap>

	<select id="goodsReservationDateCalc" resultMap="goodsReservationCalcMap">
		/* goodsRegist.goodsReservationDateCalc */
		SELECT
			T.PS_SHIPPING_PATTERN_ID
			, T.WEEK_CD
			, T.WEEK_CD_WEEKDAY
			, T.PATTERN_STANDARD_DATE_WEEKDAY
			, T.FORWARDING_SCHEDULED_DAY
			, T.ARRIVAL_SCHEDULED_DAY
			, T.PATTERN_STANDARD_DATE
			, T.ORDER_IF_DATE
			, T.RELEASE_DATE
			, T.ARRIVE_DATE
			, T.CREATE_DT
			, T.CREATE_ID
			, T.MODIFY_DT
			, T.MODIFY_ID
		FROM (
			SELECT
				PSPD.PS_SHIPPING_PATTERN_ID
				, PSPD.WEEK_CD
				, WEEKDAY(CAL.DT) AS WEEK_CD_WEEKDAY
				, WEEKDAY(#{patternStandardDate}) AS PATTERN_STANDARD_DATE_WEEKDAY
				, PSPD.FORWARDING_SCHEDULED_DAY
				, PSPD.ARRIVAL_SCHEDULED_DAY
				, #{patternStandardDate} AS PATTERN_STANDARD_DATE
				, CAL.DT AS ORDER_IF_DATE
				, DATE_ADD(CAL.DT, INTERVAL PSPD.FORWARDING_SCHEDULED_DAY DAY) AS RELEASE_DATE
				, DATE_ADD(CAL.DT, INTERVAL PSPD.ARRIVAL_SCHEDULED_DAY DAY) AS ARRIVE_DATE
				, PSPD.CREATE_DT
				, PSPD.CREATE_ID
				, PSPD.MODIFY_DT
				, PSPD.MODIFY_ID
				, UW.UR_WAREHOUSE_ID
			FROM PS_SHIPPING_PATTERN_DAY PSPD
				INNER JOIN UR_WAREHOUSE UW
					ON UW.PS_SHIPPING_PATTERN_ID = PSPD.PS_SHIPPING_PATTERN_ID
				INNER JOIN (
					SELECT
						DT
						, CASE
							WHEN WEEKDAY(DT) = 0 THEN 'WEEK_CD.MON'
							WHEN WEEKDAY(DT) = 1 THEN 'WEEK_CD.TUE'
							WHEN WEEKDAY(DT) = 2 THEN 'WEEK_CD.WED'
							WHEN WEEKDAY(DT) = 3 THEN 'WEEK_CD.THU'
							WHEN WEEKDAY(DT) = 4 THEN 'WEEK_CD.FRI'
							WHEN WEEKDAY(DT) = 5 THEN 'WEEK_CD.SAT'
							WHEN WEEKDAY(DT) = 6 THEN 'WEEK_CD.SUN'
						END AS WEEK_CD
					FROM CALENDAR_TABLE
					WHERE
						DT <![CDATA[ >= ]]> #{patternStandardDate}
					LIMIT 70
				) CAL
					ON CAL.WEEK_CD = PSPD.WEEK_CD
			WHERE
				UW.UR_WAREHOUSE_ID = #{urWarehouseId}
		) T
		WHERE
			T.RELEASE_DATE NOT IN (
				SELECT
					HOLIDAY_DT
				FROM PS_HOLIDAY
				WHERE
					HOLIDAY_DT <![CDATA[ >= ]]> #{patternStandardDate}
				UNION
				SELECT
					DATE_FORMAT(HOLIDAY_DT, '%Y-%m-%d') AS HOLIDAY_DT
				FROM UR_WAREHOUSE_HLDY
				WHERE
					UR_WAREHOUSE_ID = T.UR_WAREHOUSE_ID
					AND DATE_FORMAT(HOLIDAY_DT, '%Y-%m-%d') <![CDATA[ >= ]]> #{patternStandardDate}
			)
		ORDER BY T.ORDER_IF_DATE, T.RELEASE_DATE
		LIMIT 1
	</select>

	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 일반상품 > 판매 정보 > 일일 판매 옵션 설정 > 예약판매 > 주문수집I/F일 배송패턴에 따른 요일 날짜 제한
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2020.12.14		임상건		  최초생성
	 * @
	────────────────────────────────────────────────────────────────────────-->
	<resultMap type="kr.co.pulmuone.v1.goods.goods.dto.vo.GoodsRegistReserveOptionVo" id="orderIfDateLimitMap">
		<result column="WEEK_CD"								property="weekCode"/>
		<result column="CUTOFF_TIME"							property="cutoffTime"/>
	</resultMap>

	<select id="orderIfDateLimitList" resultMap="orderIfDateLimitMap">
		/* goodsRegist.orderIfDateLimitList */
		SELECT
			LEFT(SUBSTRING_INDEX(WEEK_CD, '.', -1),2) AS WEEK_CD
			, IFNULL(UW.CUTOFF_TIME, '00:00:00') AS CUTOFF_TIME
		FROM
			PS_SHIPPING_PATTERN_DAY PSPD
		INNER JOIN UR_WAREHOUSE UW ON UW.PS_SHIPPING_PATTERN_ID = PSPD.PS_SHIPPING_PATTERN_ID
		WHERE
			UW.UR_WAREHOUSE_ID = #{urWarehouseId}
	</select>

	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 묶음상품 > 임직원 할인 정보 > 임직원 개별할인 내역
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2020.12.28		임상건		  최초생성
	 * @ 승인 프로세스 미적용 상태임
	────────────────────────────────────────────────────────────────────────-->
	<resultMap type="kr.co.pulmuone.v1.goods.goods.dto.vo.GoodsPriceInfoResultVo" id="goodsPackageEmployeeDiscountMap">
		<result column="ROW_NUM"							property="rowNum"/>
		<result column="ROW_GROUP_NUM"						property="rowGroupNum"/>
		<result column="GOODS_ID"							property="goodsId"/>
		<result column="GOODS_DISCOUNT_ID"					property="goodsDiscountId"/>
		<result column="DISCOUNT_TYPE_CODE"					property="discountTypeCode"/>
		<result column="DISCOUNT_TYPE_CODE_NAME"			property="discountTypeCodeName"/>
		<result column="APPROVAL_STATUS_CODE"				property="approvalStatusCode"/>
		<result column="APPROVAL_STATUS_CODE_NAME"			property="approvalStatusCodeName"/>

		<result column="DISCOUNT_START_DT_TIME"				property="discountStartDateTime"/>
		<result column="DISCOUNT_START_DATE"				property="discountStartDate"/>
		<result column="DISCOUNT_START_HOUR"				property="discountStartHour"/>
		<result column="DISCOUNT_START_MINUTE"				property="discountStartMinute"/>

		<result column="DISCOUNT_END_DT_TIME"				property="discountEndDateTime"/>
		<result column="DISCOUNT_END_DATE"					property="discountEndDate"/>
		<result column="DISCOUNT_END_DATE_ORIGINAL"			property="discountEndDateOriginal"/>
		<result column="DISCOUNT_END_HOUR"					property="discountEndHour"/>
		<result column="DISCOUNT_END_HOUR_ORIGINAL"			property="discountEndHourOriginal"/>
		<result column="DISCOUNT_END_MINUTE"				property="discountEndMinute"/>
		<result column="DISCOUNT_END_MINUTE_ORIGINAL"		property="discountEndMinuteOriginal"/>

		<result column="DISCOUNT_METHOD_TYPE_CODE"			property="discountMethodTypeCode"/>
		<result column="DISCOUNT_METHOD_TYPE_CODE_NAME"		property="discountMethodTypeCodeName"/>
		<result column="RECOMMENDED_PRICE"					property="recommendedPrice"/>
		<result column="STANDARD_PRICE"						property="standardPrice"/>
		<result column="DISCOUNT_AMOUNT"					property="discountAmount"/>
		<result column="MARGIN_RATE"						property="marginRate"/>
		<result column="APPROVE_ID"							property="approveId"/>
		<result column="APPROVE_NM"							property="approveName"/>
		<result column="DISCOUNT_RATIO"						property="discountRatio"/>
		<result column="DISCOUNT_SALE_PRICE"				property="discountSalePrice"/>

		<result column="GOODS_NM"							property="goodsName"/>
		<result column="GOODS_QTY"							property="goodsQuantity"/>
		<result column="RECOMMENDED_TOTAL_PRICE"			property="recommendedTotalPrice"/>
	</resultMap>
	<select id="goodsPackageDiscountEmployeeList" resultMap="goodsPackageEmployeeDiscountMap">
		/* goodsRegist.goodsPackageDiscountEmployeeList */
		SELECT
			@rownum:=@rownum+1 AS ROW_NUM
		,	(CASE @discountGroupId WHEN GPDEL.GOODS_DISCOUNT_ID THEN @rowGroupNum:=@rowGroupNum+1 ELSE @rowGroupNum:=1 END) AS ROW_GROUP_NUM
		,	(@discountGroupId:=GPDEL.GOODS_DISCOUNT_ID) AS DISCOUNT_GROUP_ID
		,	GPDEL.*
		FROM
		(
			SELECT
				IGDA.IL_GOODS_ID AS GOODS_ID													/* 상품ID */
			,	'시스템' AS REG_TP_NM															/* 구분 */
			,	IGDA.IL_GOODS_DISCOUNT_APPR_ID AS GOODS_DISCOUNT_APPR_ID						/* 상품할인승인ID */
			,	IGDA.IL_GOODS_DISCOUNT_ID AS GOODS_DISCOUNT_ID									/* 상품할인ID */
			,	IGDA.DISCOUNT_TP AS DISCOUNT_TYPE_CODE											/* 상품할인유형코드 */
			,	B.NAME AS DISCOUNT_TYPE_CODE_NAME												/* 상품할인유형코드명 */
			,	IGDA.APPR_STAT AS APPROVAL_STATUS_CODE											/* 승인상태코드 */
			,	G.NAME AS APPROVAL_STATUS_CODE_NAME												/* 승인상태코드명 */

			,	DATE_FORMAT(IGDA.DISCOUNT_START_DT, '%Y-%m-%d %H:%i') AS DISCOUNT_START_DT_TIME	/* 할인시작일(시간, 분 포함)*/
			,	DATE_FORMAT(IGDA.DISCOUNT_START_DT, '%Y-%m-%d') AS DISCOUNT_START_DATE			/* 할인시작일 */
			,	DATE_FORMAT(IGDA.DISCOUNT_START_DT, '%H') AS DISCOUNT_START_HOUR				/* 할인시작시간 */
			,	DATE_FORMAT(IGDA.DISCOUNT_START_DT, '%i') AS DISCOUNT_START_MINUTE				/* 할인시작분 */

			,	DATE_FORMAT(IGDA.DISCOUNT_END_DT, '%Y-%m-%d %H:%i')  AS DISCOUNT_END_DT_TIME	/* 할인종료일(시간, 분 포함)*/
			,	DATE_FORMAT(IGDA.DISCOUNT_END_DT, '%Y-%m-%d') AS DISCOUNT_END_DATE				/* 할인시작일 */
			,	DATE_FORMAT(IGDA.DISCOUNT_END_DT, '%Y-%m-%d') AS DISCOUNT_END_DATE_ORIGINAL		/* 원본 할인시작일 */
			,	DATE_FORMAT(IGDA.DISCOUNT_END_DT, '%H') AS DISCOUNT_END_HOUR					/* 할인시작시간 */
			,	DATE_FORMAT(IGDA.DISCOUNT_END_DT, '%H') AS DISCOUNT_END_HOUR_ORIGINAL			/* 원본 할인시작시간 */
			,	DATE_FORMAT(IGDA.DISCOUNT_END_DT, '%i') AS DISCOUNT_END_MINUTE					/* 할인시작분 */
			,	DATE_FORMAT(IGDA.DISCOUNT_END_DT, '%i') AS DISCOUNT_END_MINUTE_ORIGINAL			/* 원본 할인시작분 */

			,	IGDA.DISCOUNT_METHOD_TP AS DISCOUNT_METHOD_TYPE_CODE							/* 상품할인방법유형코드 */
			,	C.NAME AS DISCOUNT_METHOD_TYPE_CODE_NAME										/* 상품할인방법유형코드명 */

			,	IGDA.APPR_REQ_USER_ID															/* 승인요청자 ID */
			,	FN_DECRYPT(APPR_REQ_USER.USER_NM) AS APPR_REQ_NM								/* 승인요청자명 */
			,	APPR_REQ_USER.LOGIN_ID AS APPR_REQ_USER_LOGIN_ID								/* 승인요청자 LOGIN ID */
			,	CONCAT(FN_DECRYPT(APPR_REQ_USER.USER_NM), '(', APPR_REQ_USER.LOGIN_ID, ')') AS APPR_REQ_INFO
			,	IGDA.APPR_SUB_USER_ID															/* 1차승인자 ID */
			,	FN_DECRYPT(APPR_SUB_USER.USER_NM) AS APPR_SUB_NM								/* 1차승인자명 */
			,	APPR_SUB_USER.LOGIN_ID AS APPR_SUB_USER_LOGIN_ID								/* 1차승인자 LOGIN ID */
			,	IGDA.APPR_USER_ID																/* 2차승인자 ID */
			,	FN_DECRYPT(APPR_USER.USER_NM) AS APPR_NM										/* 2차승인자명 */
			,	APPR_USER.LOGIN_ID AS APPR_USER_LOGIN_ID										/* 2차승인자 LOGIN ID */
			,	CASE WHEN APPR_SUB_USER.LOGIN_ID IS NOT NULL THEN
					CONCAT(FN_DECRYPT(APPR_SUB_USER.USER_NM), '(', APPR_SUB_USER.LOGIN_ID, ')&lt;BR/&gt;', FN_DECRYPT(APPR_USER.USER_NM), '(', APPR_USER.LOGIN_ID, ')')
				ELSE
					CONCAT(FN_DECRYPT(APPR_USER.USER_NM), '(', APPR_USER.LOGIN_ID, ')')
				END	AS APPR_INFO

			,	IG.GOODS_NM
			,	COALESCE(IGPGM.TARGET_GOODS_ID, '합계') AS TARGET_GOODS_ID
			,	SUM(IGPGM.GOODS_QTY) AS GOODS_QTY												/* 구성수량 */
			,	SUM(E.RECOMMENDED_PRICE) AS RECOMMENDED_PRICE									/* 품목 정상가 */
			,	SUM(E.STANDARD_PRICE) AS STANDARD_PRICE											/* 품목 원가 */
			,	SUM(E.RECOMMENDED_PRICE * IGPGM.GOODS_QTY) AS RECOMMENDED_TOTAL_PRICE			/* 정상가 총액 */
			,	AVG(IGPIFDPA.DISCOUNT_RATIO) AS DISCOUNT_RATIO									/* 할인율 */
			,	SUM(
					(E.RECOMMENDED_PRICE - (E.RECOMMENDED_PRICE * IFNULL(IGPIFDPA.DISCOUNT_RATIO,0) / 100) -
					( (E.RECOMMENDED_PRICE - (E.RECOMMENDED_PRICE * IFNULL(IGPIFDPA.DISCOUNT_RATIO,0) / 100)) % 10 )) * IGPGM.GOODS_QTY
				) AS DISCOUNT_SALE_PRICE	/* 임직원 할인가 */
			,	IGPGM.BASE_GOODS_YN
			,	CASE
					WHEN NOW() BETWEEN IGDA.DISCOUNT_START_DT AND IGDA.DISCOUNT_END_DT THEN 'Proceeding'
					ELSE 'Reservation'
				END EVENT_PROC_STATUS
			,	(SELECT COUNT(IL_GOODS_PACKAGE_GOODS_MAPPING_ID) FROM IL_GOODS_PACKAGE_GOODS_MAPPING WHERE IL_GOODS_ID = #{ilGoodsId} AND GOODS_TP NOT IN('GOODS_TYPE.GIFT','GOODS_TYPE.GIFT_FOOD_MARKETING')) AS ROW_COUNT
			,	IGPGM.IL_GOODS_PACKAGE_GOODS_MAPPING_ID
			FROM
				IL_GOODS_DISCOUNT_APPR IGDA
			INNER JOIN IL_GOODS_PACKAGE_ITEM_FIXED_DISCOUNT_PRICE_APPR IGPIFDPA ON IGDA.IL_GOODS_DISCOUNT_APPR_ID = IGPIFDPA.IL_GOODS_DISCOUNT_APPR_ID
			INNER JOIN IL_GOODS_PACKAGE_GOODS_MAPPING IGPGM ON IGPIFDPA.IL_GOODS_PACKAGE_GOODS_MAPPING_ID = IGPGM.IL_GOODS_PACKAGE_GOODS_MAPPING_ID
			LEFT JOIN (
				SELECT
					A.ST_COMN_CODE_ID AS CODE
					, B.DIC_NM AS NAME
				FROM
					ST_COMN_CODE A
				INNER JOIN GB_DIC B ON A.GB_DIC_MST_ID = B.GB_DIC_MST_ID AND B.GB_LANG_ID = '1'
				WHERE
					A.ST_COMN_CODE_MST_CD = 'APPR_STAT'
				AND A.USE_YN = UPPER('Y')
			) G ON IGDA.APPR_STAT = G.CODE
			LEFT JOIN UR_USER APPR_REQ_USER ON APPR_REQ_USER.UR_USER_ID = IGDA.APPR_REQ_USER_ID
			LEFT JOIN UR_USER APPR_SUB_USER ON APPR_SUB_USER.UR_USER_ID = IGDA.APPR_SUB_USER_ID
			LEFT JOIN UR_USER APPR_USER ON APPR_USER.UR_USER_ID = IGDA.APPR_USER_ID
			LEFT JOIN (
				SELECT
					A.ST_COMN_CODE_ID AS CODE
					, B.DIC_NM AS NAME
				FROM
					ST_COMN_CODE A
				INNER JOIN GB_DIC B ON A.GB_DIC_MST_ID = B.GB_DIC_MST_ID AND B.GB_LANG_ID = '1'
				WHERE
					A.ST_COMN_CODE_MST_CD = 'GOODS_DISCOUNT_TP'
				AND A.USE_YN = UPPER('Y')
			) B ON IGDA.DISCOUNT_TP = B.CODE
			LEFT JOIN (
				SELECT
					A.ST_COMN_CODE_ID AS CODE
					, B.DIC_NM AS NAME
				FROM
					ST_COMN_CODE A
				INNER JOIN GB_DIC B ON A.GB_DIC_MST_ID = B.GB_DIC_MST_ID AND B.GB_LANG_ID = '1'
				WHERE
					A.ST_COMN_CODE_MST_CD = 'GOODS_DISCOUNT_METHOD_TP'
				AND A.USE_YN = UPPER('Y')
			) C ON IGDA.DISCOUNT_METHOD_TP = C.CODE
			INNER JOIN IL_GOODS IG ON IGPGM.TARGET_GOODS_ID = IG.IL_GOODS_ID
			INNER JOIN (
				SELECT
					IGP.IL_GOODS_ID
				,	IGP.RECOMMENDED_PRICE
				,	IGP.STANDARD_PRICE
				FROM
					IL_GOODS_PRICE IGP
				WHERE
					NOW() BETWEEN IGP.PRICE_START_DT AND IGP.PRICE_END_DT
				AND	USE_YN = 'Y'
			) E ON IGPGM.TARGET_GOODS_ID = E.IL_GOODS_ID
			WHERE
				IGDA.IL_GOODS_ID = #{ilGoodsId}
			AND	IGDA.APPR_STAT IN ('APPR_STAT.REQUEST', 'APPR_STAT.APPROVED', 'APPR_STAT.SUB_APPROVED', 'APPR_STAT.APPROVED_BY_SYSTEM')
			AND	IGDA.DISCOUNT_TP = 'GOODS_DISCOUNT_TP.EMPLOYEE'
			AND	IGPGM.GOODS_TP NOT IN('GOODS_TYPE.GIFT', 'GOODS_TYPE.GIFT_FOOD_MARKETING')
			AND	( (NOW() BETWEEN IGDA.DISCOUNT_START_DT AND IGDA.DISCOUNT_END_DT) OR (NOW() &lt; IGDA.DISCOUNT_START_DT))
			GROUP BY
				IGDA.IL_GOODS_DISCOUNT_ID
			,	IGPGM.TARGET_GOODS_ID
			WITH ROLLUP
		) GPDEL
		INNER JOIN (SELECT @discountGroupId:='', @rownum:=0, @rowGroupNum:=0) F
		WHERE
			GPDEL.GOODS_DISCOUNT_ID IS NOT NULL
		ORDER BY
			GPDEL.DISCOUNT_START_DT_TIME
		,	GPDEL.GOODS_DISCOUNT_ID IS NULL
		,	GPDEL.GOODS_DISCOUNT_ID
		,	GPDEL.TARGET_GOODS_ID = '합계'
		,	GPDEL.BASE_GOODS_YN DESC
		,	GPDEL.IL_GOODS_PACKAGE_GOODS_MAPPING_ID
	</select>

	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 묶음상품 > 임직원 할인 정보 > 임직원 할인 가격정보
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2021.01.18		임상건		  최초생성
	 * @ 2021.03.04		임상건		  쿼리문 수정
	────────────────────────────────────────────────────────────────────────-->
	<resultMap type="kr.co.pulmuone.v1.goods.goods.dto.vo.GoodsPriceInfoResultVo" id="goodsPackageEmployeePriceMap">
		<result column="ROW_NUM"							property="rowNum"/>
		<result column="ROW_GROUP_NUM"						property="rowGroupNum"/>
		<result column="IL_GOODS_ID"						property="goodsId"/>
		<result column="EMPLOYEE_PRICE_GROUP_ID"			property="employeePriceGroupId"/>
		<result column="DISCOUNT_TYPE_CODE"					property="discountTypeCode"/>
		<result column="DISCOUNT_TYPE_CODE_NAME"			property="discountTypeCodeName"/>
		<result column="APPROVAL_STATUS_CODE"				property="approvalStatusCode"/>
		<result column="APPROVAL_STATUS_CODE_NAME"			property="approvalStatusCodeName"/>
		<result column="PRICE_START_DT_TIME"				property="priceStartDateTime"/>
		<result column="PRICE_END_DT_TIME"					property="priceEndDateTime"/>
		<result column="STANDARD_PRICE"						property="standardPrice"/>
		<result column="RECOMMENDED_PRICE"					property="recommendedPrice"/>
		<result column="DISCOUNT_RATIO"						property="discountRatio"/>
		<result column="DISCOUNT_SALE_PRICE"				property="discountSalePrice"/>
		<result column="GOODS_NM"							property="goodsName"/>
		<result column="GOODS_QTY"							property="goodsQuantity"/>
		<result column="RECOMMENDED_TOTAL_PRICE"			property="recommendedTotalPrice"/>
	</resultMap>
	<select id="goodsPackageEmployeePriceList" resultMap="goodsPackageEmployeePriceMap">
		/* goodsRegist.goodsPackageEmployeePriceList */
		SELECT
			@rownum:=@rownum+1 AS ROW_NUM
		,	@rowGroupNum:=@rowGroupNum+1 AS ROW_GROUP_NUM
		,	GPBDEL.*
		FROM
		(
			SELECT
				IGPGM.IL_GOODS_PACKAGE_GOODS_MAPPING_ID
			,	IIP.IL_ITEM_PRICE_ID
			,	IIP.IL_ITEM_CD
			,	IGD.DISCOUNT_TP AS DISCOUNT_TYPE_CODE
			,	IFNULL(B.NAME, '기본할인') AS DISCOUNT_TYPE_CODE_NAME
			,	CASE WHEN IGD.DISCOUNT_START_DT IS NOT NULL THEN
					IGD.DISCOUNT_START_DT
				ELSE
					DATE_FORMAT(IGM.CREATE_DT, '%Y-%m-%d %H:%i')
				END AS PRICE_START_DT_TIME
			,	CASE WHEN IGD.DISCOUNT_END_DT IS NOT NULL THEN
					IGD.DISCOUNT_END_DT
				ELSE
					DATE_FORMAT('2999-12-31 23:59:59', '%Y-%m-%d %H:%i')
				END AS PRICE_END_DT_TIME
			,	COALESCE(IG.IL_GOODS_ID, '합계') AS IL_GOODS_ID									/* 상품ID */
			,	IG.GOODS_NM																		/* 상품명 */
			,	SUM(IIP.STANDARD_PRICE) AS STANDARD_PRICE										/* 품목 원가 */
			,	SUM(IIP.RECOMMENDED_PRICE) AS RECOMMENDED_PRICE									/* 품목 정상가 */
			,	SUM(IGPGM.GOODS_QTY) AS GOODS_QTY												/* 구성수량 */
			,	SUM(IIP.RECOMMENDED_PRICE * IGPGM.GOODS_QTY) AS RECOMMENDED_TOTAL_PRICE			/* 정상가 총액*/
			,	II.UR_BRAND_ID																	/* 브랜드ID */
			,	II.TAX_YN																		/* 과세여부 */
			,	AVG(IFNULL(IGPIFDP.DISCOUNT_RATIO , IFNULL(PEDBG.DISCOUNT_RATIO,0))) AS DISCOUNT_RATIO	/* 할인율 */
			,	SUM(
					(IIP.RECOMMENDED_PRICE - (IIP.RECOMMENDED_PRICE * IFNULL(IGPIFDP.DISCOUNT_RATIO , IFNULL(PEDBG.DISCOUNT_RATIO,0)) / 100) -
					( (IIP.RECOMMENDED_PRICE - (IIP.RECOMMENDED_PRICE * IFNULL(IGPIFDP.DISCOUNT_RATIO , IFNULL(PEDBG.DISCOUNT_RATIO,0)) / 100)) % 10 )) * IGPGM.GOODS_QTY
				) AS DISCOUNT_SALE_PRICE														/* 임직원 할인가 */
			,	(SELECT COUNT(IL_GOODS_PACKAGE_GOODS_MAPPING_ID) FROM IL_GOODS_PACKAGE_GOODS_MAPPING WHERE IL_GOODS_ID = #{ilGoodsId} AND GOODS_TP NOT IN ('GOODS_TYPE.GIFT', 'GOODS_TYPE.GIFT_FOOD_MARKETING')) AS ROW_COUNT
			FROM
				IL_GOODS_PACKAGE_GOODS_MAPPING IGPGM
			INNER JOIN IL_GOODS IG ON IG.IL_GOODS_ID = IGPGM.TARGET_GOODS_ID
			INNER JOIN (
				SELECT * FROM IL_ITEM_PRICE WHERE NOW() BETWEEN START_DT AND END_DT
			) IIP ON IIP.IL_ITEM_CD = IG.IL_ITEM_CD
			INNER JOIN IL_ITEM II ON II.IL_ITEM_CD = IIP.IL_ITEM_CD
			LEFT JOIN PS_EMPL_DISC_BRAND_GRP_BRAND PEDBGB ON II.UR_BRAND_ID = PEDBGB.UR_BRAND_ID
			LEFT JOIN PS_EMPL_DISC_BRAND_GRP PEDBG ON PEDBG.PS_EMPL_DISC_BRAND_GRP_ID = PEDBGB.PS_EMPL_DISC_BRAND_GRP_ID
			INNER JOIN IL_GOODS IGM ON IGM.IL_GOODS_ID = IGPGM.IL_GOODS_ID
			LEFT JOIN (
				SELECT
					*
				FROM
					IL_GOODS_DISCOUNT
				WHERE
					NOW() BETWEEN DISCOUNT_START_DT AND DISCOUNT_END_DT
				AND	IL_GOODS_ID = #{ilGoodsId}
				AND	DISCOUNT_TP = 'GOODS_DISCOUNT_TP.EMPLOYEE'
				AND USE_YN = 'Y'
				ORDER BY DISCOUNT_END_DT DESC
				LIMIT 1
			) IGD ON IGD.IL_GOODS_ID = IGM.IL_GOODS_ID
			LEFT JOIN IL_GOODS_PACKAGE_ITEM_FIXED_DISCOUNT_PRICE IGPIFDP
				ON IGD.IL_GOODS_DISCOUNT_ID = IGPIFDP.IL_GOODS_DISCOUNT_ID
				AND IGPGM.IL_GOODS_PACKAGE_GOODS_MAPPING_ID  = IGPIFDP.IL_GOODS_PACKAGE_GOODS_MAPPING_ID
			LEFT JOIN (
				SELECT
					A.ST_COMN_CODE_ID AS CODE
					, B.DIC_NM AS NAME
				FROM
					ST_COMN_CODE A
				INNER JOIN GB_DIC B ON A.GB_DIC_MST_ID = B.GB_DIC_MST_ID AND B.GB_LANG_ID = '1'
				WHERE
					A.ST_COMN_CODE_MST_CD = 'GOODS_DISCOUNT_TP'
				AND A.USE_YN = UPPER('Y')
			) B ON IGD.DISCOUNT_TP = B.CODE
			WHERE
				IGPGM.IL_GOODS_ID = #{ilGoodsId}
			AND	IGPGM.GOODS_TP NOT IN('GOODS_TYPE.GIFT', 'GOODS_TYPE.GIFT_FOOD_MARKETING')
			GROUP BY IG.IL_GOODS_ID
			WITH ROLLUP
		) GPBDEL
		INNER JOIN (SELECT @rownum:=0, @rowGroupNum:=0) RN
		ORDER BY
			GPBDEL.IL_GOODS_ID = '합계'
		,	GPBDEL.IL_GOODS_PACKAGE_GOODS_MAPPING_ID
	</select>

	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 일반, 일일상품 > 혜택/구매 정보 > 증정행사 내역
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2021.01.04		임상건		  최초생성
	 * @ 승인 프로세스 미적용 상태임
	────────────────────────────────────────────────────────────────────────-->
	<resultMap type="kr.co.pulmuone.v1.goods.goods.dto.vo.ExhibitGiftResultVo" id="exhibitGiftMap">
		<result column="EV_EXHIBIT_GIFT_TARGET_ID"		property="evExhibitGiftTargetId"/>
		<result column="GIFT_TARGET_TP"					property="giftTargetType"/>
		<result column="EV_EXHIBIT_ID"					property="evExhibitId"/>
		<result column="EXHIBIT_STATUS"					property="exhibitStatus"/>
		<result column="GIFT_TP"						property="giftType"/>
		<result column="GIFT_TP_NM"						property="giftTypeName"/>
		<result column="TITLE"							property="title"/>
		<result column="START_DT"						property="startDate"/>
		<result column="END_DT"							property="endDate"/>
		<result column="ALWAYS_YN"						property="alwaysYn"/>
	</resultMap>

	<select id="exhibitGiftList" resultMap="exhibitGiftMap">
		/* goodsRegist.exhibitGiftList */
		SELECT
			EEGTG.EV_EXHIBIT_GIFT_TARGET_GOODS_ID AS EV_EXHIBIT_GIFT_TARGET_ID
		,	EEG.GIFT_TARGET_TP
		,	EEGTG.EV_EXHIBIT_ID
		,	IG.IL_GOODS_ID
		,	II.UR_BRAND_ID
		,	EE.EXHIBIT_STATUS
		,	EEG.GIFT_TP
		,	GIFT_TP.NAME AS GIFT_TP_NM
		,	EE.TITLE
		,	DATE_FORMAT(EE.START_DT, '%Y-%m-%d') AS START_DT
		,	DATE_FORMAT(EE.END_DT, '%Y-%m-%d') AS END_DT
		,	EE.ALWAYS_YN
		FROM
			IL_GOODS IG
		INNER JOIN IL_ITEM II ON II.IL_ITEM_CD = IG.IL_ITEM_CD
		LEFT JOIN EV_EXHIBIT_GIFT_TARGET_GOODS EEGTG ON EEGTG.IL_GOODS_ID = IG.IL_GOODS_ID
		INNER JOIN EV_EXHIBIT EE ON EE.EV_EXHIBIT_ID = EEGTG.EV_EXHIBIT_ID
		INNER JOIN EV_EXHIBIT_GIFT EEG ON EE.EV_EXHIBIT_ID = EEG.EV_EXHIBIT_ID
		LEFT JOIN (
			SELECT
				A.ST_COMN_CODE_ID AS CODE
				, B.DIC_NM AS NAME
			FROM
				ST_COMN_CODE A
			INNER JOIN GB_DIC B ON A.GB_DIC_MST_ID = B.GB_DIC_MST_ID AND B.GB_LANG_ID = '1'
			WHERE
				A.ST_COMN_CODE_MST_CD = 'GIFT_TP'
			AND A.USE_YN = UPPER('Y')
		) GIFT_TP ON EEG.GIFT_TP = GIFT_TP.CODE
		WHERE
			EE.EXHIBIT_TP = 'EXHIBIT_TP.GIFT'
		AND	EEG.GIFT_TARGET_TP = 'GIFT_TARGET_TP.GOODS'
		AND	EE.USE_YN = 'Y'
		AND EE.DEL_YN = 'N'
		AND CASE WHEN EE.ALWAYS_YN = 'N' THEN NOW() BETWEEN EE.START_DT AND EE.END_DT ELSE 1=1 END
		AND	IG.IL_GOODS_ID = #{ilGoodsId}
		UNION ALL
		SELECT
			EEGTB.EV_EXHIBIT_GIFT_TARGET_BRAND_ID AS EV_EXHIBIT_GIFT_TARGET_ID
		,	EEG.GIFT_TARGET_TP
		,	EEGTB.EV_EXHIBIT_ID
		,	IG.IL_GOODS_ID
		,	II.UR_BRAND_ID
		,	EE.EXHIBIT_STATUS
		,	EEG.GIFT_TP
		,	GIFT_TP.NAME AS GIFT_TP_NM
		,	EE.TITLE
		,	DATE_FORMAT(EE.START_DT, '%Y-%m-%d') AS START_DT
		,	DATE_FORMAT(EE.END_DT, '%Y-%m-%d') AS END_DT
		,	EE.ALWAYS_YN
		FROM
			IL_GOODS IG
		INNER JOIN IL_ITEM II ON II.IL_ITEM_CD = IG.IL_ITEM_CD
		LEFT JOIN EV_EXHIBIT_GIFT_TARGET_BRAND EEGTB ON EEGTB.BRAND_ID = II.DP_BRAND_ID
		INNER JOIN EV_EXHIBIT EE ON EE.EV_EXHIBIT_ID = EEGTB.EV_EXHIBIT_ID
		INNER JOIN EV_EXHIBIT_GIFT EEG ON EE.EV_EXHIBIT_ID = EEG.EV_EXHIBIT_ID
		LEFT JOIN (
			SELECT
				A.ST_COMN_CODE_ID AS CODE
				, B.DIC_NM AS NAME
			FROM
				ST_COMN_CODE A
			INNER JOIN GB_DIC B ON A.GB_DIC_MST_ID = B.GB_DIC_MST_ID AND B.GB_LANG_ID = '1'
			WHERE
				A.ST_COMN_CODE_MST_CD = 'GIFT_TP'
			AND A.USE_YN = UPPER('Y')
		) GIFT_TP ON EEG.GIFT_TP = GIFT_TP.CODE
		WHERE
			EE.EXHIBIT_TP = 'EXHIBIT_TP.GIFT'
		AND	EEG.GIFT_TARGET_TP = 'GIFT_TARGET_TP.BRAND'
		AND	EE.USE_YN = 'Y'
		AND EE.DEL_YN = 'N'
		AND CASE WHEN EE.ALWAYS_YN = 'N' THEN NOW() BETWEEN EE.START_DT AND EE.END_DT ELSE 1=1 END
		AND	IG.IL_GOODS_ID = #{ilGoodsId}
	</select>

	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 마스터 품목 재고관련 정보
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2021.01.06		임상건		  최초생성
	 * @
	────────────────────────────────────────────────────────────────────────-->
	<resultMap type="kr.co.pulmuone.v1.goods.goods.dto.vo.GoodsRegistStockInfoVo" id="goodsStockInfoMap">
		<result column="IL_ITEM_CD"					property="ilItemCode"/>
		<result column="ITEM_BARCODE"				property="itemBarcode"/>
		<result column="ITEM_NM"					property="itemName"/>
		<result column="PRE_ORDER_NM"				property="preOrderName"/>
		<result column="IL_ITEM_STOCK_ID"			property="ilItemStockId"/>
		<result column="STOCK_SCHEDULED_COUNT"		property="stockScheduledCount"/>
		<result column="IL_ITEM_WAREHOUSE_ID"		property="ilItemWarehouseId"/>
		<result column="BASE_DT"					property="baseDate"/>
		<result column="UR_WAREHOUSE_ID"			property="urWarehouseId"/>
		<result column="WAREHOUSE_NM"				property="warehouseName"/>
		<result column="UR_SUPPLIER_ID"				property="urSupplierId"/>
		<result column="SUPPLIER_CD"				property="supplierCode"/>
		<result column="SUPPLIER_NM"				property="supplierName"/>
		<result column="PRE_ORDER_YN"				property="preOrderYn"/>
		<result column="STOCK_ORDER_YN"				property="stockOrderYn"/>
		<result column="UNLIMIT_STOCK_YN"			property="unlimitStockYn"/>
		<result column="STOCK_OPERATION_FORM"		property="stockOperationForm"/>
		<result column="STOCK_OPERATION_FORM_SUB"	property="stockOperationFormSub"/>
		<result column="STOCK_QTY"					property="stockQuantity"/>
	</resultMap>

	<select id="goodsStockInfo" resultMap="goodsStockInfoMap">
		/* goodsRegist.goodsStockInfo */
		SELECT
			II.IL_ITEM_CD
		,	II.ITEM_BARCODE
		,	II.ITEM_NM
		,	CASE
				WHEN IIW.PRE_ORDER_YN = 'N' THEN '한정재고'
				WHEN IIW.PRE_ORDER_YN = 'Y' AND IIW.PRE_ORDER_TP IN ('PRE_ORDER_TP.LIMITED_ALLOWED', 'PRE_ORDER_TP.UNLIMITED_ALLOWED') THEN
					CASE
						WHEN US.SUPPLIER_CD = 'PF' THEN '선주문(식품)'
						WHEN US.SUPPLIER_CD = 'OG' AND II.ERP_CTGRY_LV1_ID = '과일' AND IPT.ERP_PO_TP = 'ERP_PO_TP.R1' THEN '선주문(과일)'
						WHEN US.SUPPLIER_CD = 'OG' AND II.ERP_CTGRY_LV1_ID NOT IN ('과일', '채소') AND IPT.ERP_PO_TP = 'ERP_PO_TP.R1' THEN '선주문(가공)'
					END
			END AS PRE_ORDER_NM												#재고운영형태, 재고상세보기용
		,	IIS.IL_ITEM_STOCK_ID
		,	IFNULL(IIES2.STOCK_QTY, 0) AS STOCK_SCHEDULED_COUNT				#입고예정량
		,	IIW.IL_ITEM_WAREHOUSE_ID
		,	IFNULL(IIS.BASE_DT, DATE_FORMAT(NOW(), '%Y-%m-%d')) AS BASE_DT	#품목재고 기준일
		,	UW.UR_WAREHOUSE_ID
		,	UW.WAREHOUSE_NM
		,	US.UR_SUPPLIER_ID
		,	UC.COMP_NM AS SUPPLIER_NM
		,	UW.STOCK_ORDER_YN												#재고발주 여부(ERP연동)
		,	IIW.UNLIMIT_STOCK_YN											#무제한/한정 재고 구분
		,	IIW.PRE_ORDER_YN												#선주문 가능/불가 구분
		,	IIW.PRE_ORDER_TP												#선주문 유형
		,	US.SUPPLIER_CD													#공급처CODE
		,	IPT.ERP_PO_TP													#ERP발주유형 : ERP_PO_TP.R1 인지 확인
		,	II.ERP_CTGRY_LV1_ID												#ERP카테고리 1DEPTH
		,	IFNULL(CASE
				WHEN UW.STOCK_ORDER_YN = 'N' AND IIW.UNLIMIT_STOCK_YN = 'Y' THEN '재고미연동(무제한)'
				WHEN UW.STOCK_ORDER_YN = 'N' AND IIW.UNLIMIT_STOCK_YN = 'N' THEN '재고미연동(한정재고)'
				WHEN UW.STOCK_ORDER_YN = 'Y' AND IIW.PRE_ORDER_YN = 'N' THEN '한정재고'
				WHEN UW.STOCK_ORDER_YN = 'Y' AND IIW.PRE_ORDER_YN = 'Y' AND IIW.PRE_ORDER_TP = 'PRE_ORDER_TP.NOT_ALLOWED' THEN '선주문(한정재고)'
				WHEN UW.STOCK_ORDER_YN = 'Y' AND IIW.PRE_ORDER_YN = 'Y' AND IIW.PRE_ORDER_TP = 'PRE_ORDER_TP.LIMITED_ALLOWED' THEN '선주문'
				WHEN UW.STOCK_ORDER_YN = 'Y' AND IIW.PRE_ORDER_YN = 'Y' AND IIW.PRE_ORDER_TP = 'PRE_ORDER_TP.UNLIMITED_ALLOWED' THEN '선주문'
			END, '') AS STOCK_OPERATION_FORM								#재고운영형태
		,	IFNULL(CASE
				WHEN (UW.STOCK_ORDER_YN = 'Y' AND IIW.PRE_ORDER_YN = 'Y' AND IIW.PRE_ORDER_TP IN ('PRE_ORDER_TP.LIMITED_ALLOWED', 'PRE_ORDER_TP.UNLIMITED_ALLOWED')) THEN
					CASE
						WHEN US.SUPPLIER_CD = 'PF' THEN '(식품)'
						WHEN US.SUPPLIER_CD = 'OG' AND IPT.ERP_PO_TP = 'ERP_PO_TP.R1' AND II.ERP_CTGRY_LV1_ID = '과일' THEN '(과일)'
						WHEN US.SUPPLIER_CD = 'OG' AND IPT.ERP_PO_TP = 'ERP_PO_TP.R1' AND II.ERP_CTGRY_LV1_ID NOT IN ('과일', '채소') THEN '(가공)'
					END
			END, '') AS STOCK_OPERATION_FORM_SUB							#재고운영형태_선주문노출
		,	IFNULL(CASE
				WHEN UW.STOCK_ORDER_YN = 'Y' THEN (
					SELECT STOCK_QTY FROM IL_ITEM_ERP_STOCK
					WHERE DATE_FORMAT(NOW(), '%Y-%m-%d') = BASE_DT AND	STOCK_TP = 'ERP_STOCK_TP.CLOSED' AND IL_ITEM_WAREHOUSE_ID = IIW.IL_ITEM_WAREHOUSE_ID
					ORDER BY IL_ITEM_ERP_STOCK_ID DESC
					LIMIT 1
				)
				WHEN UW.STOCK_ORDER_YN = 'N' AND IIW.UNLIMIT_STOCK_YN = 'N' THEN IIW.NOT_IF_STOCK_CNT
				WHEN UW.STOCK_ORDER_YN = 'N' AND IIW.UNLIMIT_STOCK_YN = 'Y' THEN '무제한'
			ELSE
				0
			END, 0) AS STOCK_QTY											#전일마감 재고 수량 or 미연동 한정재고 수량
		FROM
			IL_ITEM II
		INNER JOIN IL_ITEM_WAREHOUSE IIW ON IIW.IL_ITEM_CD = II.IL_ITEM_CD
		INNER JOIN UR_SUPPLIER_WAREHOUSE USW ON USW.UR_SUPPLIER_WAREHOUSE_ID = IIW.UR_SUPPLIER_WAREHOUSE_ID
		INNER JOIN UR_WAREHOUSE UW ON UW.UR_WAREHOUSE_ID = USW.UR_WAREHOUSE_ID
		INNER JOIN UR_SUPPLIER US ON US.UR_SUPPLIER_ID = II.UR_SUPPLIER_ID
		INNER JOIN UR_COMPANY UC ON UC.UR_COMPANY_ID = US.UR_COMPANY_ID
		LEFT JOIN (
			SELECT
				*
			FROM
				IL_ITEM_STOCK
			WHERE
				DATE_FORMAT(NOW(), '%Y-%m-%d') = BASE_DT
		) IIS ON IIS.IL_ITEM_WAREHOUSE_ID = IIW.IL_ITEM_WAREHOUSE_ID
		LEFT JOIN IL_PO_TP IPT ON IPT.IL_PO_TP_ID = IIW.IL_PO_TP_ID
		LEFT JOIN (
			SELECT
				IL_ITEM_WAREHOUSE_ID
			,	STOCK_TP
			,	SUM(STOCK_QTY) AS STOCK_QTY
			FROM
				IL_ITEM_ERP_STOCK
			WHERE
				DATE_FORMAT(NOW(), '%Y-%m-%d') = BASE_DT
			AND STOCK_TP = 'ERP_STOCK_TP.SCHEDULED'
			GROUP BY
				IL_ITEM_WAREHOUSE_ID, STOCK_TP
			HAVING SUM(STOCK_QTY) > 0
		) IIES2 ON IIES2.IL_ITEM_WAREHOUSE_ID = IIW.IL_ITEM_WAREHOUSE_ID
		WHERE
			II.IL_ITEM_CD = #{ilItemCode}
		AND UW.UR_WAREHOUSE_ID = #{urWarehouseId}
	</select>

	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 묶음 상품 > 상품이미지 > 상품별 대표이미지 정렬순서 저장
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2021.01.11		임상건		  최초생성
	 * @
	────────────────────────────────────────────────────────────────────────-->
	<update id="updateGoodsPackageGoodsMappingImageOrderUpdate">
		/* goodsRegist.updateGoodsPackageGoodsMappingImageOrderUpdate */
		UPDATE IL_GOODS_PACKAGE_GOODS_MAPPING SET IMG_SORT = #{imageSortSeq} WHERE TARGET_GOODS_ID = #{targetGoodsId} AND IL_GOODS_ID = #{ilGoodsId}
	</update>

	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 품목 판매불가에 따른 상품 판매중지 대상 찾기
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2021.01.08		임상건		  최초생성
	────────────────────────────────────────────────────────────────────────-->
	<resultMap type="kr.co.pulmuone.v1.goods.goods.dto.vo.GoodsRegistVo" id="itemExtinctionGoodsStopMap">
		<result column="IL_GOODS_ID"	property="ilGoodsId"/>
		<result column="GOODS_NM"		property="goodsName"/>
	</resultMap>

	<select id="itemExtinctionGoodsStopSaleList" resultMap="itemExtinctionGoodsStopMap">
		/* goodsRegist.itemExtinctionGoodsStopSaleList */
		SELECT
			IG.IL_GOODS_ID
		,	IG.GOODS_NM
		,	IG.SALE_STATUS
		FROM
			IL_GOODS IG
		INNER JOIN IL_ITEM II ON IG.IL_ITEM_CD = II.IL_ITEM_CD
		WHERE
			II.IL_ITEM_CD = #{ilItemCode}
		UNION ALL
		SELECT
			DISTINCT
			IG.IL_GOODS_ID
		,	IG.GOODS_NM
		,	IG.SALE_STATUS
		FROM
			IL_GOODS IG
		INNER JOIN IL_GOODS_PACKAGE_GOODS_MAPPING IGPGM ON IGPGM.IL_GOODS_ID = IG.IL_GOODS_ID
		INNER JOIN IL_GOODS TIG ON TIG.IL_GOODS_ID = IGPGM.TARGET_GOODS_ID
		INNER JOIN IL_ITEM II ON II.IL_ITEM_CD = TIG.IL_ITEM_CD
		WHERE
			II.IL_ITEM_CD = #{ilItemCode}
	</select>

	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 품목 판매불가에 따른 상품 판매상태 판매중지 처리
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2021.01.08		임상건		  최초생성
	 * @
	────────────────────────────────────────────────────────────────────────-->
	<update id="updateGoodsStopSale">
		/* goodsRegist.updateGoodsStopSale */
		UPDATE IL_GOODS SET
			SALE_STATUS = #{saleStatus}
		WHERE
			IL_GOODS_ID IN (
				<foreach collection="ilGoodsIds" item="ilGoodsId" separator=",">
					#{ilGoodsId}
				</foreach>
			)
	</update>

	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 해당 구성 상품으로 구성된 묶음상품 정보가 있는지 체크
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2021.01.22		임상건		  최초생성
	────────────────────────────────────────────────────────────────────────-->
	<resultMap type="kr.co.pulmuone.v1.goods.goods.dto.vo.GoodsRegistVo" id="goodsPackageExistChkMap">
		<result column="IL_GOODS_ID"	property="ilGoodsId"/>
		<result column="GOODS_NM"		property="goodsName"/>
	</resultMap>

	<!-- HGRM-4246 기존 묶음상품 구성 체크 로직 변경 / 2021.01.31 이명수 -->
 	<select id="goodsPackageExistChk"  parameterType="HashMap" resultMap="goodsPackageExistChkMap">
		/* goodsRegist.goodsPackageExistChk */
		SELECT
			T2.IL_GOODS_ID AS IL_GOODS_ID,
			T2.GOODS_NM AS GOODS_NM
		FROM
		(
			SELECT IL_GOODS_ID FROM
			(
				SELECT IL_GOODS_ID, GROUP_CONCAT( TARGET_GOODS_ID, GOODS_TP, GOODS_QTY ORDER BY TARGET_GOODS_ID, GOODS_TP, GOODS_QTY) CONCAT_STR
				FROM IL_GOODS_PACKAGE_GOODS_MAPPING IGPM
				WHERE IL_GOODS_ID IN (
						SELECT IL_GOODS_ID FROM IL_GOODS_PACKAGE_GOODS_MAPPING WHERE TARGET_GOODS_ID = #{ilGoodsId}		/* 구성 상품 1개만 조건 추 */
					)
				GROUP BY IL_GOODS_ID
				HAVING COUNT(*) = #{ilGoodsIdsCount}	  /* 상품 구성 종류수 조건 추가 */
			) CT /* CONCAT_TABLE */
			WHERE CT.CONCAT_STR = (
				SELECT GROUP_CONCAT(ID, GT, QTY ORDER BY ID, GT, QTY) FROM
				(
				/* 새로 구성하려는 상품과 수량 */
				<foreach collection="list" item="item" separator="UNION" index="index">
					SELECT CAST(#{item.targetGoodsId} AS UNSIGNED) ID, CAST(#{item.goodsQuantity} AS UNSIGNED) QTY, #{item.goodsType} GT  FROM DUAL
				</foreach>
				) INPUT_TABLE
			)
		) T1 INNER JOIN IL_GOODS T2 ON T1.IL_GOODS_ID = T2.IL_GOODS_ID
		LIMIT 1
	</select>
	<select id="goodsPackageExistChk_bak2"  parameterType="HashMap" resultMap="goodsPackageExistChkMap">
		/* goodsRegist.goodsPackageExistChk2 */
		SELECT
			T1.IL_GOODS_ID,
			T2.GOODS_NM
		FROM
		(
		SELECT
			IL_GOODS_ID, (SELECT COUNT(*) FROM IL_GOODS_PACKAGE_GOODS_MAPPING igpgm WHERE IL_GOODS_ID = TT.IL_GOODS_ID
			AND
				(
				<foreach collection="list" item="item" separator="OR" index="index">
					(TARGET_GOODS_ID = #{item.targetGoodsId} AND GOODS_QTY = #{item.goodsQuantity})
				</foreach>
				)
			) AS GOODS_CNT
		FROM
			IL_GOODS_PACKAGE_GOODS_MAPPING TT
		WHERE
		(
			<foreach collection="list" item="item" separator="OR" index="index">
				(TARGET_GOODS_ID = #{item.targetGoodsId} AND GOODS_QTY = #{item.goodsQuantity})
			</foreach>
		)
		AND GOODS_TP NOT IN('GOODS_TYPE.GIFT', 'GOODS_TYPE.GIFT_FOOD_MARKETING')
		GROUP BY IL_GOODS_ID
		) T1 INNER JOIN IL_GOODS T2 ON T1.IL_GOODS_ID = T2.IL_GOODS_ID
		WHERE T1.GOODS_CNT = #{ilGoodsIdsCount}
		LIMIT 1
	</select>
	<select id="goodsPackageExistChk_bak" resultMap="goodsPackageExistChkMap">
		/* goodsRegist.goodsPackageExistChk */
		SELECT
			IGPGM.IL_GOODS_ID
		,	IG.GOODS_NM
		FROM
			IL_GOODS_PACKAGE_GOODS_MAPPING IGPGM
		INNER JOIN IL_GOODS IG ON IG.IL_GOODS_ID = IGPGM.IL_GOODS_ID
		WHERE
			IGPGM.TARGET_GOODS_ID IN (
			<foreach collection="ilGoodsIds" item="ilGoodsId" separator=",">
				#{ilGoodsId}
			</foreach>
		)
		AND IGPGM.GOODS_TP NOT IN('GOODS_TYPE.GIFT', 'GOODS_TYPE.GIFT_FOOD_MARKETING')
		GROUP BY IGPGM.IL_GOODS_ID
		HAVING COUNT(IGPGM.IL_GOODS_ID) = #{ilGoodsIdsCount}
		LIMIT 1
	</select>

	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 체크된 묶음 상품의 구성 상품과 동일한 수량이 있는지 체크
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2021.01.28		임상건		  최초생성
	────────────────────────────────────────────────────────────────────────-->
	<select id="goodsPackageQuantityExistChk" resultType="int">
		/* goodsRegist.goodsPackageQuantityExistChk */
		SELECT
			COUNT(1) AS PACKAGE_GOODS_QTY_CHK
		FROM
			IL_GOODS_PACKAGE_GOODS_MAPPING IGPGM
		WHERE
			IGPGM.IL_GOODS_ID = #{ilGoodsId}
		AND	IGPGM.TARGET_GOODS_ID = #{targetGoodsId}
		AND	IGPGM.GOODS_QTY = #{goodsQuantity}
		AND	IGPGM.GOODS_TP NOT IN('GOODS_TYPE.GIFT', 'GOODS_TYPE.GIFT_FOOD_MARKETING')
	</select>

	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 상품 변경내역 저장
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2020.03.17		임상건		  최초생성
	 * @
	────────────────────────────────────────────────────────────────────────-->
	<insert id="addGoodsChangeLog">
		/* goodsRegist.addGoodsChangeLog */
		INSERT INTO IL_GOODS_CHNAGE_LOG
		(
			IL_GOODS_ID
		,	TABLE_NM
		,	TABLE_ID_ORIG
		,	TABLE_ID_NEW
		,	BEFORE_DATA
		,	AFTER_DATA
		,	COLUMN_NM
		,	COLUMN_LABEL
		,	CREATE_ID
		,	CREATE_DT
		)
		VALUES
		(
			#{ilGoodsId}
		,	#{tableNm}
		,	#{tableIdOrig}
		,	#{tableIdNew}
		,	#{beforeData}
		,	#{afterData}
		,	#{columnNm}
		,	#{columnLabel}
		,	#{createId}
		,	#{createDate}
		)
	</insert>

	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 상품 승인 내역 저장
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2021.04.02		임상건		  최초생성
	────────────────────────────────────────────────────────────────────────-->
	<insert id="addGoodsAppr" useGeneratedKeys="true" keyProperty="ilGoodsApprId">
		/* goodsRegist.addGoodsAppr */
		INSERT INTO IL_GOODS_APPR (
			IL_GOODS_ID
		,	APPR_KIND_TP
		,	APPR_STAT
		,	APPR_REQ_DT
		,	APPR_REQ_USER_ID
		,	APPR_SUB_USER_ID
		,	APPR_USER_ID
		,	CREATE_DT
		,	CREATE_ID
		<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(goodsName)">
		,	GOODS_NM
		</if>
		<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(goodsDesc)">
		,	GOODS_DESC
		</if>
		<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(searchKeyword)">
		,	SEARCH_KYWRD
		</if>
		<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(displayYn)">
		,	DISP_YN
		</if>
		<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(saleStartDate)">
		,	SALE_START_DT
		</if>
		<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(saleEndDate)">
		,	SALE_END_DT
		</if>
		<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(saleStatus)">
		,	SALE_STATUS
		</if>
		<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(goodsMemo)">
		,	GOODS_MEMO
		</if>
		)
		VALUES (
			#{ilGoodsId}
		,	#{apprKindTp}
		,	#{apprStat}
		,	NOW()
		,	#{apprReqUserId}
		,	#{apprSubUserId}
		,	#{apprUserId}
		,	NOW()
		,	#{apprReqUserId}
		<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(goodsName)">
		,	#{goodsName}
		</if>
		<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(goodsDesc)">
		,	#{goodsDesc}
		</if>
		<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(searchKeyword)">
		,	#{searchKeyword}
		</if>
		<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(displayYn)">
		,	#{displayYn}
		</if>
		<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(saleStartDate)">
		,	#{saleStartDate}
		</if>
		<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(saleEndDate)">
		,	#{saleEndDate}
		</if>
		<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(saleStatus)">
		,	#{saleStatus}
		</if>
		<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(goodsMemo)">
		,	#{goodsMemo}
		</if>
		)
	</insert>


	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 상품 승인 상태 이력 저장
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2021.04.02		임상건		  최초생성
	────────────────────────────────────────────────────────────────────────-->
	<insert id="addGoodsApprStatusHistory" useGeneratedKeys="true" keyProperty="ilGoodsApprId">
		/* goodsRegist.addGoodsApprStatusHistory */
		INSERT INTO IL_GOODS_APPR_STATUS_HISTORY (
			IL_GOODS_APPR_ID
		,	PREV_APPR_STAT
		,	APPR_STAT
		,	STATUS_CMNT
		,	APPR_SUB_USER_ID
		,	APPR_USER_ID
		,	CREATE_DT
		,	CREATE_ID
		)
		VALUES (
			#{ilGoodsApprId}
		,	#{prevApprStat}
		,	#{apprStat}
		,	#{statusCmnt}
		,	#{apprSubUserId}
		,	#{apprUserId}
		,	NOW()
		,	#{apprReqUserId}
		)
	</insert>

	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 상품 승인 내역 수정(1,2차 승인자 변경)
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2021.04.06		임상건		  최초생성
	────────────────────────────────────────────────────────────────────────-->
	<insert id="updateGoodsAppr" useGeneratedKeys="true" keyProperty="ilGoodsApprId">
		/* goodsRegist.updateGoodsAppr */
		UPDATE IL_GOODS_APPR SET
			APPR_SUB_USER_ID = #{apprSubUserId}
		,	APPR_USER_ID = #{apprUserId}
		,	APPR_STAT = #{apprStat}
		,	MODIFY_DT = NOW()
		,	MODIFY_ID = #{apprReqUserId}
		<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(goodsName)">
		,	GOODS_NM = #{goodsName}
		</if>
		<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(searchKeyword)">
		,	SEARCH_KYWRD = #{searchKeyword}
		</if>
		<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(displayYn)">
		,	DISP_YN = #{displayYn}
		</if>
		<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(saleStartDate)">
		,	SALE_START_DT = #{saleStartDate}
		</if>
		<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(saleEndDate)">
		,	SALE_END_DT = #{saleEndDate}
		</if>
		<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(saleStatus)">
		,	SALE_STATUS = #{saleStatus}
		</if>
		<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(goodsMemo)">
		,	GOODS_MEMO = #{goodsMemo}
		</if>
		WHERE
			IL_GOODS_APPR_ID = #{ilGoodsApprId}
	</insert>

	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 상품 승인 내역 확인, 승인 내역 존재시 요청 자격 확인
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2021.04.06		임상건		  최초생성
	────────────────────────────────────────────────────────────────────────-->
	<resultMap type="kr.co.pulmuone.v1.goods.goods.dto.vo.GoodsRegistApprVo" id="goodsApprInfoMap">
		<result column="IL_GOODS_APPR_ID"	property="ilGoodsApprId"/>
		<result column="IL_GOODS_ID"		property="ilGoodsId"/>
		<result column="APPR_REQ_USER_YN"	property="apprReqUserYn"/>
		<result column="APPR_REQ_USER_ID"	property="apprReqUserId"/>
		<result column="APPR_STAT"			property="apprStat"/>
		<result column="NOW_SALE_STATUS"	property="nowSaleStatus"/>
		<result column="SAVED_SALE_STATUS"	property="savedSaleStatus"/>
		<result column="GOODS_NM"			property="goodsName"/>
		<result column="GOODS_DESC"			property="goodsDesc"/>
		<result column="SEARCH_KYWRD"		property="searchKeyword"/>
		<result column="DISP_YN"			property="displayYn"/>
		<result column="SALE_START_DT"		property="saleStartDate"/>
		<result column="SALE_END_DT"		property="saleEndDate"/>
		<result column="SALE_STATUS"		property="saleStatus"/>
		<result column="GOODS_MEMO"			property="goodsMemo"/>
		<result column="IL_ITEM_CD"			property="ilItemCode"/>
	</resultMap>
	<select id="goodsApprInfo" resultMap="goodsApprInfoMap">
		/* goodsRegist.goodsApprInfo */
		SELECT
			IGA.IL_GOODS_APPR_ID
		,	IGA.IL_GOODS_ID
		<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(userId)">
		,	CASE WHEN IGA.APPR_REQ_USER_ID = #{userId} THEN TRUE ELSE FALSE END APPR_REQ_USER_YN
		</if>
		,	IGA.APPR_REQ_USER_ID
		,	IGA.APPR_STAT
		,	IG.SALE_STATUS AS NOW_SALE_STATUS
		,	IG.SAVED_SALE_STATUS
		,	IGA.GOODS_NM
		,	IGA.GOODS_DESC
		,	IGA.SEARCH_KYWRD
		,	IGA.DISP_YN
		,	IGA.SALE_START_DT
		,	IGA.SALE_END_DT
		,	IGA.SALE_STATUS
		,	IGA.GOODS_MEMO
		, 	IG.IL_ITEM_CD AS IL_ITEM_CD
		FROM
			IL_GOODS_APPR IGA
		INNER JOIN IL_GOODS IG ON IG.IL_GOODS_ID = IGA.IL_GOODS_ID
		WHERE
		<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(ilGoodsId)">
			IGA.IL_GOODS_ID = #{ilGoodsId}
		</if>
		<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(ilGoodsApprId)">
			IGA.IL_GOODS_APPR_ID = #{ilGoodsApprId}
		</if>
		AND	IGA.APPR_KIND_TP = #{apprKindTp}
		ORDER BY IGA.IL_GOODS_APPR_ID DESC
		LIMIT 1
	</select>

	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 상품 승인 완료시 상품 판매상태, 상품 정보 변경
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2021.04.09		임상건		  최초생성
	────────────────────────────────────────────────────────────────────────-->
	<update id="updateGoodsApprovedSaleStatus">
		/* goodsRegist.updateGoodsApprovedSaleStatus */
		UPDATE IL_GOODS SET
		<choose>
			<when test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(saleStatus)">
				SALE_STATUS = #{saleStatus}
			</when>
			<otherwise>
				SALE_STATUS = SALE_STATUS
			</otherwise>
		</choose>
		<if test="savedSaleStatus != null">
			<choose>
				<when test="@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(savedSaleStatus, '')">
					,	SAVED_SALE_STATUS = NULL
				</when>
				<otherwise>
					,	SAVED_SALE_STATUS = #{savedSaleStatus}
				</otherwise>
			</choose>
		</if>
		<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(apprKindTp, 'APPR_KIND_TP.GOODS_CLIENT')">
			<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(goodsName)">
			,	GOODS_NM = #{goodsName}
			</if>
			,	GOODS_DESC = #{goodsDesc}
			,	SEARCH_KYWRD = #{searchKeyword}
			<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(displayYn)">
			,	DISP_YN = #{displayYn}
			</if>
			<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(saleStartDate)">
			,	SALE_START_DT = #{saleStartDate}
			</if>
			<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(saleEndDate)">
			,	SALE_END_DT = #{saleEndDate}
			</if>
			,	GOODS_MEMO = #{goodsMemo}
		</if>
		<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(modifyId)">
		,	MODIFY_ID = #{modifyId}
		,	MODIFY_DT = NOW()
		</if>
		WHERE
			IL_GOODS_ID = #{ilGoodsId}
	</update>

	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 상품 승인 요청시 상품 판매상태 변경
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2021.04.09		임상건		  최초생성
	────────────────────────────────────────────────────────────────────────-->
	<update id="updateGoodsRequestSaleStatus">
		/* goodsRegist.updateGoodsRequestSaleStatus */
		UPDATE IL_GOODS SET
		<choose>
			<when test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(saleStatus)">
				SALE_STATUS = #{saleStatus}
			</when>
			<otherwise>
				SALE_STATUS = SALE_STATUS
			</otherwise>
		</choose>
		<choose>
			<when test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(savedSaleStatus)">
				, SAVED_SALE_STATUS = #{savedSaleStatus}
			</when>
			<otherwise>
				, SAVED_SALE_STATUS = SAVED_SALE_STATUS
			</otherwise>
		</choose>
		<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(modifyId)">
		,	MODIFY_ID = #{modifyId}
		,	MODIFY_DT = NOW()
		</if>
		WHERE
			IL_GOODS_ID = #{ilGoodsId}
	</update>

	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 상품 승인 상태 항목
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2021.04.16		임상건		  최초생성
	────────────────────────────────────────────────────────────────────────-->
	<resultMap type="kr.co.pulmuone.v1.goods.goods.dto.vo.GoodsRegistApprVo" id="goodsApprStatusMap">
		<result column="IL_GOODS_ID"		property="ilGoodsId"/>
		<result column="IL_GOODS_APPR_ID"	property="ilGoodsApprId"/>
		<result column="APPR_STAT"			property="apprStat"/>
		<result column="APPR_STAT_NAME"		property="apprStatName"/>
		<result column="APPR_ID"			property="apprId"/>
		<result column="USER_NM"			property="userName"/>
		<result column="LOGIN_ID"			property="loginId"/>
		<result column="APPR_DT"			property="apprDate"/>
	</resultMap>
	<select id="goodsApprStatusList" resultMap="goodsApprStatusMap">
		/* goodsRegist.goodsApprStatusList */
		SELECT
			*
		FROM
		(
			SELECT
				IGA.IL_GOODS_ID
			,	IGA.IL_GOODS_APPR_ID
			,	IGA.APPR_STAT
			,	APPR_STAT_CODE.NAME AS APPR_STAT_NAME
			,	IGA.APPR_CHG_USER_ID AS APPR_ID
			,	FN_DECRYPT(UU.USER_NM) AS USER_NM
			,	UU.LOGIN_ID
			,	IGA.APPR_CHG_DT AS APPR_DT
			FROM
				IL_GOODS_APPR IGA
			LEFT JOIN (
				SELECT
					A.ST_COMN_CODE_ID AS CODE
					, B.DIC_NM AS NAME
				FROM
					ST_COMN_CODE A
				INNER JOIN GB_DIC B ON A.GB_DIC_MST_ID = B.GB_DIC_MST_ID AND B.GB_LANG_ID = '1'
				WHERE
					A.ST_COMN_CODE_MST_CD = 'APPR_STAT'
				AND A.USE_YN = UPPER('Y')
			) APPR_STAT_CODE ON APPR_STAT_CODE.CODE = IGA.APPR_STAT
			LEFT JOIN UR_USER UU ON UU.UR_USER_ID = IGA.APPR_CHG_USER_ID
			WHERE
				IGA.IL_GOODS_ID = #{ilGoodsId}
			AND	IGA.APPR_STAT = 'APPR_STAT.APPROVED'
			ORDER BY IGA.IL_GOODS_APPR_ID DESC
			LIMIT 1
		) A
		UNION ALL
		SELECT
			*
		FROM
		(
			SELECT
				IGA.IL_GOODS_ID
			,	IGA.IL_GOODS_APPR_ID
			,	IGA.APPR_STAT
			,	APPR_STAT_CODE.NAME AS APPR_STAT_NAME
			,	CASE WHEN IGA.APPR_STAT = 'APPR_STAT.REQUEST' THEN
					IGA.APPR_REQ_USER_ID
				WHEN IGA.APPR_STAT = 'APPR_STAT.SUB_APPROVED' THEN
					IGA.APPR_SUB_CHG_USER_ID
				END AS APPR_ID
			,	FN_DECRYPT(UU.USER_NM) AS USER_NM
			,	UU.LOGIN_ID
			,	CASE WHEN IGA.APPR_STAT = 'APPR_STAT.REQUEST' THEN
					IGA.APPR_REQ_DT
				WHEN IGA.APPR_STAT = 'APPR_STAT.SUB_APPROVED' THEN
					IGA.APPR_SUB_CHG_DT
				END AS APPR_DT
			FROM
				IL_GOODS_APPR IGA
			LEFT JOIN (
				SELECT
					A.ST_COMN_CODE_ID AS CODE
					, B.DIC_NM AS NAME
				FROM
					ST_COMN_CODE A
				INNER JOIN GB_DIC B ON A.GB_DIC_MST_ID = B.GB_DIC_MST_ID AND B.GB_LANG_ID = '1'
				WHERE
					A.ST_COMN_CODE_MST_CD = 'APPR_STAT'
				AND A.USE_YN = UPPER('Y')
			) APPR_STAT_CODE ON APPR_STAT_CODE.CODE = IGA.APPR_STAT
			LEFT JOIN UR_USER UU ON UU.UR_USER_ID = CASE WHEN IGA.APPR_STAT = 'APPR_STAT.REQUEST' THEN
					IGA.APPR_REQ_USER_ID
				WHEN IGA.APPR_STAT = 'APPR_STAT.SUB_APPROVED' THEN
					IGA.APPR_SUB_CHG_USER_ID
				END
			WHERE
				IGA.IL_GOODS_ID = #{ilGoodsId}
			AND	IGA.APPR_STAT IN ('APPR_STAT.REQUEST', 'APPR_STAT.SUB_APPROVED')
			ORDER BY IGA.IL_GOODS_APPR_ID DESC
			LIMIT 1
		) B
	</select>

	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 품목 승인 요청시 상품 판매 대기 상태로 변경 ('SALE_STATUS.SAVE','SALE_STATUS.STOP_PERMANENT_SALE'는 제외)
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2021.07.05		신선미		  최초생성
	────────────────────────────────────────────────────────────────────────-->
	<update id="updateGoodsSaleStatusToWaitByItemAppr">
		/* goodsRegist.updateGoodsSaleStatusToWaitByItemAppr */
		UPDATE IL_GOODS AS CURRENT_GOODS , (SELECT SALE_STATUS, IL_GOODS_ID FROM IL_GOODS) AS BEFORE_GOODS
			SET CURRENT_GOODS.SAVED_SALE_STATUS = BEFORE_GOODS.SALE_STATUS, CURRENT_GOODS.SALE_STATUS = 'SALE_STATUS.WAIT'
		WHERE CURRENT_GOODS.IL_GOODS_ID = BEFORE_GOODS.IL_GOODS_ID
			AND CURRENT_GOODS.IL_ITEM_CD = #{ilItemCode}
			AND CURRENT_GOODS.SALE_STATUS NOT IN ('SALE_STATUS.WAIT', 'SALE_STATUS.SAVE','SALE_STATUS.STOP_PERMANENT_SALE')
	</update>

	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 품목 수정 승인시 상품의 판매 상태 원상 복귀
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2021.07.05		신선미		  최초생성
	────────────────────────────────────────────────────────────────────────-->
	<update id="updateGoodsSaleStatusToBackByItemAppr">
		/* goodsRegist.updateGoodsSaleStatusToBackByItemAppr */
		UPDATE IL_GOODS AS CURRENT_GOODS , (SELECT SALE_STATUS, IL_GOODS_ID, SAVED_SALE_STATUS FROM IL_GOODS) AS BEFORE_GOODS
			LEFT JOIN IL_GOODS_APPR IGA ON BEFORE_GOODS.IL_GOODS_ID = IGA.IL_GOODS_ID
			SET CURRENT_GOODS.SALE_STATUS = BEFORE_GOODS.SAVED_SALE_STATUS, CURRENT_GOODS.SAVED_SALE_STATUS = NULL
		WHERE
			CURRENT_GOODS.IL_GOODS_ID = BEFORE_GOODS.IL_GOODS_ID
			AND CURRENT_GOODS.IL_ITEM_CD = #{ilItemCode}
			AND CURRENT_GOODS.SALE_STATUS = 'SALE_STATUS.WAIT'
			AND CURRENT_GOODS.SAVED_SALE_STATUS IS NOT NULL
			AND IGA.IL_GOODS_APPR_ID = (
				SELECT
					MAX(IL_GOODS_APPR_ID)
					FROM IL_GOODS_APPR
					WHERE IL_GOODS_ID = CURRENT_GOODS.IL_GOODS_ID
				)
			AND (IGA.APPR_STAT NOT IN ('APPR_STAT.NONE', 'APPR_STAT.REQUEST', 'APPR_STAT.SUB_APPROVED') OR IGA.APPR_STAT IS NULL)

	</update>

	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 상품 할인 승인 내역 확인, 승인 내역 존재시 요청 자격 확인
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2021.04.29		임상건		  최초생성
	────────────────────────────────────────────────────────────────────────-->
	<resultMap type="kr.co.pulmuone.v1.goods.goods.dto.vo.GoodsDiscountApprVo" id="goodsDiscountApprInfoMap">
		<result column="IL_GOODS_DISCOUNT_APPR_ID"	property="ilGoodsDiscountApprId"/>
		<result column="IL_GOODS_DISCOUNT_ID"		property="ilGoodsDiscountId"/>
		<result column="IL_GOODS_ID"				property="ilGoodsId"/>
		<result column="APPR_STAT"					property="apprStat"/>
		<result column="DISCOUNT_START_DT"			property="discountStartDt"/>
	</resultMap>
	<select id="goodsDiscountApprInfo" resultMap="goodsDiscountApprInfoMap">
		/* goodsRegist.goodsDiscountApprInfo */
		SELECT
			IGDA.IL_GOODS_DISCOUNT_APPR_ID
		,	IGDA.IL_GOODS_DISCOUNT_ID
		,	IGDA.IL_GOODS_ID
		,	IGDA.APPR_STAT
		,	DATE_FORMAT(IGDA.DISCOUNT_START_DT, '%Y-%m-%d %H:%i') AS DISCOUNT_START_DT
		FROM
			IL_GOODS_DISCOUNT_APPR IGDA
		INNER JOIN IL_GOODS IG ON IG.IL_GOODS_ID = IGDA.IL_GOODS_ID
		WHERE
		<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(ilGoodsId)">
			IGDA.IL_GOODS_ID = #{ilGoodsId}
		</if>
		<if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(ilGoodsDiscountApprId)">
			IGDA.IL_GOODS_DISCOUNT_APPR_ID = #{ilGoodsDiscountApprId}
		</if>
		AND	IGDA.DISCOUNT_TP = #{discountType}
		ORDER BY IGDA.IL_GOODS_DISCOUNT_APPR_ID DESC
		LIMIT 1
	</select>

	<select id="getGoodsCountByItemCode" resultType="int" >
	/* goodsRegist.getGoodsCountByItemCode */
		SELECT
			COUNT(1) AS GOODS_CNT
		FROM
			IL_GOODS
		WHERE
			IL_ITEM_CD = #{ilItemCode}
	</select>

	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 품목 승인 요청시 상품 판매 대기 상태 변경내역 저장
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2021.07.06		신선미 		  최초생성
	 * @
	────────────────────────────────────────────────────────────────────────-->
	<insert id="addGoodsChangeLogUpdateByItemAppr">
		/* goodsRegist.addGoodsChangeLogUpdateByItemAppr */
		INSERT INTO IL_GOODS_CHNAGE_LOG
		(
			 IL_GOODS_ID
		,	TABLE_NM
		,	TABLE_ID_ORIG
		,	TABLE_ID_NEW
		,	BEFORE_DATA
		,	AFTER_DATA
		,	COLUMN_NM
		,	COLUMN_LABEL
		,	CREATE_ID
		,	CREATE_DT
		)
		SELECT
			IL_GOODS_ID AS IL_GOODS_ID
			, #{goodsChangeLogVo.tableNm} AS TABLE_NM
			, IL_GOODS_ID AS TABLE_ID_ORIG
			, IL_GOODS_ID AS TABLE_ID_NEW
			, SALE_STATUS AS BEFORE_DATA
			<choose>
				<when test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(goodsChangeLogVo.afterData)">
					, #{goodsChangeLogVo.afterData} AS AFTER_DATA
				</when>
				<otherwise>
					, SALE_STATUS AS AFTER_DATA
				</otherwise>
			</choose>
			, #{goodsChangeLogVo.columnNm} AS COLUMN_NM
			, #{goodsChangeLogVo.columnLabel} AS COLUMN_LABEL
			, #{goodsChangeLogVo.createId} AS CREATE_ID
			, #{goodsChangeLogVo.createDate} AS CREATE_DT
		FROM IL_GOODS
		WHERE IL_ITEM_CD = #{ilItemCode}
		AND SALE_STATUS NOT IN ('SALE_STATUS.WAIT', 'SALE_STATUS.SAVE','SALE_STATUS.STOP_PERMANENT_SALE')
	</insert>

	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 품목 수정 승인시 상품의 판매 상태 원상 복귀 변경내역 저장
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2021.07.06		신선미 		  최초생성
	 * @
	────────────────────────────────────────────────────────────────────────-->
	<insert id="addGoodsChangeLogBackByItemAppr">
		/* goodsRegist.addGoodsChangeLogBackByItemAppr */
		INSERT INTO IL_GOODS_CHNAGE_LOG
		(
		IL_GOODS_ID
		,	TABLE_NM
		,	TABLE_ID_ORIG
		,	TABLE_ID_NEW
		,	BEFORE_DATA
		,	AFTER_DATA
		,	COLUMN_NM
		,	COLUMN_LABEL
		,	CREATE_ID
		,	CREATE_DT
		)
		SELECT
		IG.IL_GOODS_ID AS IL_GOODS_ID
		, #{goodsChangeLogVo.tableNm} AS TABLE_NM
		, IG.IL_GOODS_ID AS TABLE_ID_ORIG
		, IG.IL_GOODS_ID AS TABLE_ID_NEW
		<choose>
			<when test="@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(goodsChangeLogVo.beforeData)">
				, #{goodsChangeLogVo.beforeData} AS BEFORE_DATA
			</when>
			<otherwise>
				, IG.SALE_STATUS AS BEFORE_DATA
			</otherwise>
		</choose>
		, IG.SAVED_SALE_STATUS AS AFTER_DATA
		, #{goodsChangeLogVo.columnNm} AS COLUMN_NM
		, #{goodsChangeLogVo.columnLabel} AS COLUMN_LABEL
		, #{goodsChangeLogVo.createId} AS CREATE_ID
		, #{goodsChangeLogVo.createDate} AS CREATE_DT
		FROM IL_GOODS IG
		LEFT JOIN IL_GOODS_APPR IGA ON IG.IL_GOODS_ID = IGA.IL_GOODS_ID
		WHERE
			IG.IL_ITEM_CD = #{ilItemCode}
			AND IG.SALE_STATUS = 'SALE_STATUS.WAIT'
			AND IG.SAVED_SALE_STATUS IS NOT NULL
			AND IG.SAVED_SALE_STATUS != 'SALE_STATUS.WAIT'
			AND IGA.IL_GOODS_APPR_ID = (
				SELECT
				MAX(IL_GOODS_APPR_ID)
				FROM IL_GOODS_APPR
				WHERE IL_GOODS_ID = IG.IL_GOODS_ID
			)
			AND (IGA.APPR_STAT NOT IN ('APPR_STAT.NONE', 'APPR_STAT.REQUEST', 'APPR_STAT.SUB_APPROVED') OR IGA.APPR_STAT IS NULL)

	</insert>

	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 묶음 구성상품 선물하기 허용 여부
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2021.08.02		신선미		  최초생성
	 * @
	────────────────────────────────────────────────────────────────────────-->
	<select id="getPresentYnsByPackageGoodsId" resultType="java.lang.String">
		/* goodsRegist.getPackagesPresentYnByPackageGoodsId */
		SELECT PRESENT_YN
		FROM
			IL_GOODS_PACKAGE_GOODS_MAPPING IGPGM
		INNER JOIN IL_GOODS IG ON IGPGM.TARGET_GOODS_ID = IG.IL_GOODS_ID
		WHERE IGPGM.IL_GOODS_ID = #{ilGoodsId}
		GROUP BY PRESENT_YN
	</select>

	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 선물하기 허용 여부 update
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2021.08.02		신선미		  최초생성
	 * @
	────────────────────────────────────────────────────────────────────────-->
	<update id="updateGoodsPresentYn">
		/* goodsRegist.updateGoodsPresentYn */
		UPDATE IL_GOODS SET
		PRESENT_YN = #{presentYn}
		WHERE IL_GOODS_ID = #{ilGoodsId}
	</update>



	<!--───────────────────────────────────────────────────────────────────────
       * description 		: 식단 패턴 리스트 조회
       * @
       * @ 수정일			수정자          수정내용
       * @ ──────────────────────────────────────────────────────────────────────
       * @ 2021.10.01		안치열    	   최초생성
       * @
      ────────────────────────────────────────────────────────────────────────-->
	<select id="getMealScheduleList" resultType="kr.co.pulmuone.v1.goods.item.dto.vo.MealPatternListVo">
		/* goodsRegist.getMealScheduleList */
		SELECT MPG.IL_GOODS_DAILY_MEAL_PATTERN_CD AS PATTERN_CD
			, MPG.IL_GOODS_ID
			, MP.IL_GOODS_DAILY_MEAL_PATTERN_NM AS PATTERN_NM
			, MP.PATTERN_START_DT
			, MP.PATTERN_END_DT
			, IL.GOODS_NM
			, MP.MODIFY_DT
		FROM IL_GOODS_DAILY_MEAL_PATTERN_GOODS MPG
		INNER JOIN IL_GOODS_DAILY_MEAL_PATTERN MP ON MP.IL_GOODS_DAILY_MEAL_PATTERN_CD = MPG.IL_GOODS_DAILY_MEAL_PATTERN_CD
		INNER JOIN IL_GOODS IL ON MPG.IL_GOODS_ID = IL.IL_GOODS_ID
		WHERE MPG.IL_GOODS_ID = #{ilGoodsId}
	</select>

</mapper>