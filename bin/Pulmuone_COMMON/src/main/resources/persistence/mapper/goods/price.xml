<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.pulmuone.v1.comm.mapper.goods.price.GoodsPriceMapper">

  <!-- 상품정보 -->
  <resultMap type="kr.co.pulmuone.v1.goods.price.dto.vo.ItemVo" id="itemMap">
    <result column="IL_ITEM_CD"                         property="ilItemCd" />
    <result column="ITEM_TP"                            property="itemTp" />
    <result column="ITEM_NM"                            property="itemNm" />
    <result column="ITEM_BARCODE"                       property="itemBarcode" />
    <result column="ERP_IF_YN"                          property="erpIfYn" />
    <result column="ERP_STOCK_IF_YN"                    property="erpStockIfYn" />
    <result column="IL_CTGRY_STD_ID"                    property="ilCtgryStdId" />
    <result column="UR_SUPPLIER_ID"                     property="urSupplierId" />
    <result column="UR_BRAND_ID"                        property="urBrandId" />
    <result column="ITEM_GRP"                           property="itemGrp" />
    <result column="BATCH_PRICE_CHANGE_DT"              property="batchPriceChangeDt" />
  </resultMap>

  <!-- 상품정보 -->
	<resultMap type="kr.co.pulmuone.v1.goods.price.dto.vo.GoodsVo" id="goodsMap">
    <result column="IL_GOODS_ID"                        property="ilGoodsId" />
    <result column="IL_ITEM_CD"                         property="ilItemCd" />
    <result column="UR_WAREHOUSE_ID"                    property="urWarehouseId" />
    <result column="GOODS_TP"                           property="goodsTp" />
    <result column="SALE_TP"                            property="saleTp" />
    <result column="GOODS_NM"                           property="goodsNm" />
    <result column="PACKAGE_UNIT_DISP_YN"               property="packageUnitDispYn" />
    <result column="PROMOTION_NM"                       property="promotionNm" />
    <result column="PROMOTION_NM_START_DT"              property="promotionNmStartDt" />
    <result column="PROMOTION_NM_END_DT"                property="promotionNmEndDt" />
    <result column="GOODS_DESC"                         property="goodsDesc" />
    <result column="SEARCH_KYWRD"                       property="searchKywrd" />
    <result column="PURCHASE_TARGET_TP"                 property="purchaseTargetTp" />
    <result column="PURCHASE_MEMBER_YN"                 property="purchaseMemberYn" />
    <result column="PURCHASE_EMPLOYEE_YN"               property="purchaseEmployeeYn" />
    <result column="PURCHASE_NONMEMBER_YN"              property="purchaseNonmemberYn" />
    <result column="DISP_WEB_PC_YN"                     property="dispWebPcYn" />
    <result column="DISP_WEB_MOBILE_YN"                 property="dispWebMobileYn" />
    <result column="DISP_APP_YN"                        property="dispAppYn" />
    <result column="SALE_START_DT"                      property="saleStartDt" />
    <result column="SALE_END_DT"                        property="saleEndDt" />
    <result column="DISP_YN"                            property="dispYn" />
    <result column="SALE_STATUS"                        property="saleStatus" />
    <result column="AUTO_DISP_SIZE_YN"                  property="autoDispSizeYn" />
    <result column="SIZE_ETC"                           property="sizeEtc" />
    <result column="SALE_SHOP_YN"                       property="saleShopYn" />
    <result column="COUPON_USE_YN"                      property="couponUseYn" />
    <result column="LIMIT_MIN_CNT"                      property="limitMinCnt" />
    <result column="LIMIT_MAX_TP"                       property="limitMaxTp" />
    <result column="LIMIT_MAX_DURATION"                 property="limitMaxDuration" />
    <result column="LIMIT_MAX_CNT"                      property="limitMaxCnt" />
    <result column="MD_RECOMMEND_YN"                    property="mdRecommendYn" />
    <result column="GOODS_MEMO"                         property="goodsMemo" />
    <result column="DEL_YN"                             property="delYn" />
    <result column="NOTICE_BELOW_1_IMG_URL"             property="noticeBelow1ImgUrl" />
    <result column="NOTICE_BELOW_1_START_DT"            property="noticeBelow1StartDt" />
    <result column="NOTICE_BELOW_2_START_DT"            property="noticeBelow2StartDt" />
    <result column="NOTICE_BELOW_2_IMG_URL"             property="noticeBelow2ImgUrl" />
    <result column="NOTICE_BELOW_1_END_DT"              property="noticeBelow1EndDt" />
    <result column="NOTICE_BELOW_2_END_DT"              property="noticeBelow2EndDt" />
    <result column="GOODS_PACKAGE_IMG_TP"               property="goodsPackageImgTp" />
    <result column="GOODS_PACKAGE_BASIC_DESC_YN"        property="goodsPackageBasicDescYn" />
    <result column="GOODS_PACKAGE_BASIC_DESC"           property="goodsPackageBasicDesc" />
    <result column="GOODS_PACKAGE_VIDEO_URL"            property="goodsPackageVideoUrl" />
    <result column="GOODS_PACKAGE_VIDEO_AUTOPLAY_YN"    property="goodsPackageVideoAutoplayYn" />
    <result column="GOODS_DAILY_TP"                     property="goodsDailyTp" />
    <result column="GOODS_DAILY_ALLERGY_YN"             property="goodsDailyAllergyYn" />
    <result column="GOODS_DAILY_BULK_YN"                property="goodsDailyBulkYn" />
    <result column="BATCH_PRICE_CHANGE_DT"              property="batchPriceChangeDt" />
    <result column="CREATE_ID"                          property="createId" />
    <result column="CREATE_DT"                          property="createDt" />
    <result column="MODIFY_ID"                          property="modifyId" />
    <result column="MODIFY_DT"                          property="modifyDt" />
    <result column="PRESENT_YN"                         property="presentYn"/>
    <!-- IL_GOODS_PACKAGE_GOODS_MAPPING -->
    <result column="IL_GOODS_PACKAGE_GOODS_MAPPING_ID"  property="ilGoodsPackageGoodsMappingId" />
	</resultMap>

  <!-- 묶음상품구성정보 -->
	<resultMap type="kr.co.pulmuone.v1.goods.price.dto.vo.GoodsPackageMappingVo" id="goodsPackageMappingMap">
		<result column="IL_GOODS_PACKAGE_GOODS_MAPPING_ID"  property="ilGoodsPackageGoodsMappingId" />
		<result column="IL_GOODS_ID"                        property="ilGoodsId" />
		<result column="TARGET_GOODS_ID"                    property="targetGoodsId" />
    <result column="GOODS_TP"                           property="goodsTp" />
    <result column="BASE_GOODS_YN"                      property="baseGoodsYn" />
    <result column="GOODS_QTY"                          property="goodsQty" />
    <result column="SALE_PRICE_PER_UNIT"                property="salePricePerUnit" />
    <result column="SALE_PRICE"                         property="salePrice" />
    <result column="CREATE_ID"                          property="createId" />
    <result column="CREATE_DT"                          property="createDt" />
    <result column="MODIFY_ID"                          property="modifyId" />
    <result column="MODIFY_DT"                          property="modifyDt" />
    <result column="IL_ITEM_CD"                         property="ilItemCd" />
	</resultMap>

  <!-- 품목가격정보 -->
  <resultMap type="kr.co.pulmuone.v1.goods.price.dto.vo.ItemPriceVo" id="itemPriceMap">
    <result column="IL_ITEM_PRICE_ID"                   property="ilItemPriceId" />
    <result column="IL_ITEM_CD"                         property="ilItemCd" />
    <result column="START_DT"                           property="startDt" />
    <result column="END_DT"                             property="endDt" />
    <result column="STANDARD_PRICE"                     property="standardPrice" />
    <result column="RECOMMENDED_PRICE"                  property="recommendedPrice" />
    <result column="CREATE_ID"                          property="createId" />
    <result column="CREATE_DT"                          property="createDt" />
    <result column="MODIFY_ID"                          property="modifyId" />
    <result column="MODIFY_DT"                          property="modifyDt" />
    <result column="REG_TP"                             property="regTp" />
    <result column="STATUS"                             property="status" />
    <result column="STATUS_NM"                          property="statusNm" />
    <result column="APPROVE_ID"                         property="approveId" />
    <result column="APPROVE_NM"                         property="approveNm" />
  </resultMap>

  <!-- 상품할인정보 -->
	<resultMap type="kr.co.pulmuone.v1.goods.price.dto.vo.GoodsDiscountVo" id="goodsDiscountMap">
		<result column="IL_GOODS_DISCOUNT_ID"               property="ilGoodsDiscountId" />
		<result column="IL_GOODS_PRICE_ID"                  property="ilGoodsPriceId" />
		<result column="IL_GOODS_ID"                        property="ilGoodsId" />
    <result column="DISCOUNT_TP"                        property="discountTp" />
    <result column="DISCOUNT_START_DT"                  property="discountStartDt" />
    <result column="DISCOUNT_END_DT"                    property="discountEndDt" />
    <result column="DISCOUNT_METHOD_TP"                 property="discountMethodTp" />
    <result column="DISCOUNT_RATIO"                     property="discountRatio" />
    <result column="DISCOUNT_SALE_PRICE"                property="discountSalePrice" />
    <result column="CREATE_ID"                          property="createId" />
    <result column="CREATE_DT"                          property="createDt" />
    <result column="MODIFY_ID"                          property="modifyId" />
    <result column="MODIFY_DT"                          property="modifyDt" />
    <result column="DISCOUNT_APPLY_SALE_PRICE"          property="discountApplySalePrice" />

    <result column="DISCOUNT_TP_NM"                     property="discountTpNm" />
    <result column="DISCOUNT_METHOD_TP_NM"              property="discountMethodTpNm" />
    <result column="STATUS"                             property="status" />
    <result column="STATUS_NM"                          property="statusNm" />
    <result column="APPR_REQ_INFO"                      property="apprReqInfo" />
    <result column="APPR_INFO"                          property="apprInfo" />
    <result column="STANDARD_PRICE"                     property="standardPrice" />
    <result column="DISCOUNT_PRICE"                     property="discountPrice" />
    <result column="RECOMMENDED_PRICE"                  property="recommendedPrice" />
	</resultMap>

  <!-- 상품가격정보 -->
  <resultMap type="kr.co.pulmuone.v1.goods.price.dto.vo.GoodsPriceVo" id="goodsPriceMap">
    <result column="IL_GOODS_PRICE_ID"                  property="ilGoodsPriceId" />
    <result column="IL_GOODS_ID"                        property="ilGoodsId" />
    <result column="IL_ITEM_PRICE_ID"                   property="ilItemPriceId" />
    <result column="IL_GOODS_DISCOUNT_ID"               property="ilGoodsDiscountId" />
    <result column="DISCOUNT_TP"                        property="discountTp" />
    <result column="PRICE_START_DT"                     property="priceStartDt" />
    <result column="PRICE_END_DT"                       property="priceEndDt" />
    <result column="STANDARD_PRICE"                     property="standardPrice" />
    <result column="RECOMMENDED_PRICE"                  property="recommendedPrice" />
    <result column="SALE_PRICE"                         property="salePrice" />
    <result column="CREATE_ID"                          property="createId" />
    <result column="CREATE_DT"                          property="createDt" />
    <result column="MODIFY_ID"                          property="modifyId" />
    <result column="MODIFY_DT"                          property="modifyDt" />

    <result column="DISCOUNT_RATIO"                     property="discountRatio" />
    <result column="DISCOUNT_SALE_PRICE"                property="discountSalePrice" />
    <result column="DISCOUNT_PRICE"                     property="discountPrice" />
    <result column="DISCOUNT_TP_NM"                     property="discountTpNm" />
    <result column="DISCOUNT_METHOD_TP_NM"              property="discountMethodTpNm" />
    <result column="STATUS"                             property="status" />
    <result column="STATUS_NM"                          property="statusNm" />
    <result column="APPR_REQ_INFO"                      property="apprReqInfo" />
    <result column="APPR_INFO"                          property="apprInfo" />
  </resultMap>

  <!-- 임직원 할인 가격정보 -->
  <resultMap type="kr.co.pulmuone.v1.goods.price.dto.vo.GoodsPriceVo" id="goodsEmployeePriceMap">
    <result column="IL_GOODS_EMPLOYEE_PRICE_ID"         property="ilGoodsEmployeePriceId" />
    <result column="IL_GOODS_ID"                        property="ilGoodsId" />
    <result column="IL_ITEM_PRICE_ID"                   property="ilItemPriceId" />
    <result column="IL_GOODS_DISCOUNT_ID"               property="ilGoodsDiscountId" />
    <result column="DISCOUNT_TP"                        property="discountTp" />
    <result column="PRICE_START_DT"                     property="priceStartDt" />
    <result column="PRICE_END_DT"                       property="priceEndDt" />
    <result column="STANDARD_PRICE"                     property="standardPrice" />
    <result column="RECOMMENDED_PRICE"                  property="recommendedPrice" />
    <result column="SALE_PRICE"                         property="salePrice" />
    <result column="CREATE_ID"                          property="createId" />
    <result column="CREATE_DT"                          property="createDt" />
    <result column="MODIFY_ID"                          property="modifyId" />
    <result column="MODIFY_DT"                          property="modifyDt" />

    <result column="DISCOUNT_RATIO"                     property="discountRatio" />
    <result column="DISCOUNT_SALE_PRICE"                property="discountSalePrice" />
    <result column="DISCOUNT_PRICE"                     property="discountPrice" />
    <result column="DISCOUNT_TP_NM"                     property="discountTpNm" />
    <result column="DISCOUNT_METHOD_TP_NM"              property="discountMethodTpNm" />
    <result column="STATUS"                             property="status" />
    <result column="STATUS_NM"                          property="statusNm" />
    <result column="APPROVE_ID"                         property="approveId" />
    <result column="APPROVE_NM"                         property="approveNm" />
  </resultMap>


  <!--───────────────────────────────────────────────────────────────────────
   * description    : 대상상품리스트조회-품목ID
   * @
   * @ 수정일                    수정자          수정내용
   * @ ──────────────────────────────────────────────────────────────────────
   * @ 2020.08.28   dgyoun  최초생성
   * @
  ────────────────────────────────────────────────────────────────────────-->
  <select id="getTargetItemListByDate" resultMap="itemMap">
      /*price.getTargetItemListByDate*/
      SELECT  I.IL_ITEM_CD
            , I.ITEM_TP
            , I.ITEM_NM
            , I.ITEM_BARCODE
            , I.ERP_IF_YN
            , DATE_FORMAT(BATCH_PRICE_CHANGE_DT, '%Y%m%d%H%i%s')  AS BATCH_PRICE_CHANGE_DT
      FROM    IL_ITEM I
    <where>
        AND   I.PRICE_CHANGE_PROC_YN = 'N'
      <if test='@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(baseDe)'>
        AND   I.BATCH_PRICE_CHANGE_DT <![CDATA[>=]]> STR_TO_DATE(CONCAT(#{baseDe}, '000000'), '%Y%m%d%H%i%s')
        AND   I.BATCH_PRICE_CHANGE_DT <![CDATA[<=]]> STR_TO_DATE(CONCAT(#{baseDe}, '235959'), '%Y%m%d%H%i%s')
      </if>
        AND   I.ERP_IF_YN     = 'Y'
    </where>
      ORDER BY IL_ITEM_CD
  </select>

  <!--───────────────────────────────────────────────────────────────────────
   * description    : 대상상품리스트조회-품목ID
   * @
   * @ 수정일                    수정자          수정내용
   * @ ──────────────────────────────────────────────────────────────────────
   * @ 2020.08.28   dgyoun  최초생성
   * @
  ────────────────────────────────────────────────────────────────────────-->
	<select id="getTargetGoodsList" resultMap="goodsMap">
  		/*price.getTargetGoodsList*/
      SELECT  G.IL_GOODS_ID
            , G.IL_ITEM_CD
            , G.UR_WAREHOUSE_ID
            , G.GOODS_TP
            , G.SALE_TP
            , G.GOODS_NM
            , G.PACKAGE_UNIT_DISP_YN
            , G.PROMOTION_NM
            , G.PROMOTION_NM_START_DT
            , G.PROMOTION_NM_END_DT
            , G.GOODS_DESC
            , G.SEARCH_KYWRD
            , G.PURCHASE_TARGET_TP
            , G.PURCHASE_MEMBER_YN
            , G.PURCHASE_EMPLOYEE_YN
            , G.PURCHASE_NONMEMBER_YN
            , G.DISP_WEB_PC_YN
            , G.DISP_WEB_MOBILE_YN
            , G.DISP_APP_YN
            , DATE_FORMAT(G.SALE_START_DT, '%Y%m%d%H%i%s')  AS SALE_START_DT
            , DATE_FORMAT(G.SALE_END_DT, '%Y%m%d%H%i%s')    AS SALE_END_DT
            , G.DISP_YN
            , G.SALE_STATUS
            , G.AUTO_DISP_SIZE_YN
            , G.SIZE_ETC
            , G.SALE_SHOP_YN
            , G.COUPON_USE_YN
            , G.LIMIT_MIN_CNT
            , G.LIMIT_MAX_TP
            , G.LIMIT_MAX_DURATION
            , G.LIMIT_MAX_CNT
            , G.MD_RECOMMEND_YN
            , G.GOODS_MEMO
            , G.DEL_YN
            , G.NOTICE_BELOW_1_IMG_URL
            , DATE_FORMAT(G.NOTICE_BELOW_1_START_DT, '%Y%m%d%H%i%s')    AS NOTICE_BELOW_1_START_DT
            , DATE_FORMAT(G.NOTICE_BELOW_2_START_DT, '%Y%m%d%H%i%s')    AS NOTICE_BELOW_2_START_DT
            , G.NOTICE_BELOW_2_IMG_URL
            , DATE_FORMAT(G.NOTICE_BELOW_1_END_DT, '%Y%m%d%H%i%s')      AS NOTICE_BELOW_1_END_DT
            , DATE_FORMAT(G.NOTICE_BELOW_2_END_DT, '%Y%m%d%H%i%s')      AS NOTICE_BELOW_2_END_DT
            , G.GOODS_PACKAGE_IMG_TP
            , G.GOODS_PACKAGE_BASIC_DESC_YN
            , G.GOODS_PACKAGE_BASIC_DESC
            , G.GOODS_PACKAGE_VIDEO_URL
            , G.GOODS_PACKAGE_VIDEO_AUTOPLAY_YN
            , G.GOODS_DAILY_TP
            , G.GOODS_DAILY_ALLERGY_YN
            , G.GOODS_DAILY_BULK_YN
            , DATE_FORMAT(BATCH_PRICE_CHANGE_DT, '%Y%m%d%H%i%s')  AS BATCH_PRICE_CHANGE_DT
            , G.CREATE_ID
            , DATE_FORMAT(G.CREATE_DT, '%Y%m%d%H%i%s')      AS CREATE_DT
            , G.MODIFY_ID
            , DATE_FORMAT(G.MODIFY_DT, '%Y%m%d%H%i%s')      AS MODIFY_DT
      FROM    IL_GOODS G
    <where>
      <if test="ilItemCdList !=null and ilItemCdList.size != 0">
        AND  (1, G.IL_ITEM_CD) IN
                            <foreach collection="ilItemCdList" item="ilItemCd" index="index" separator="," open="(" close=")">
                                  (1, #{ilItemCd})
                            </foreach>
      </if>
      <!--
      <if test='@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(ilItemCd)'>
        AND   G.IL_ITEM_CD = #{ilItemCd}
      </if>
      -->
      <if test='@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(baseDe)'>
        AND   G.BATCH_PRICE_CHANGE_DT <![CDATA[>=]]> STR_TO_DATE(CONCAT(#{baseDe}, '000000'), '%Y%m%d%H%i%s')
        AND   G.BATCH_PRICE_CHANGE_DT <![CDATA[<=]]> STR_TO_DATE(CONCAT(#{baseDe}, '235959'), '%Y%m%d%H%i%s')
      </if>
    </where>
      ORDER BY G.IL_GOODS_ID
	</select>

  <!--───────────────────────────────────────────────────────────────────────
   * description    : 대상상품리스트조회-상품.가격변경처리여부(N) 기준
   * @
   * @ 수정일                    수정자          수정내용
   * @ ──────────────────────────────────────────────────────────────────────
   * @ 2020.09.22   dgyoun  최초생성
   * @
  ────────────────────────────────────────────────────────────────────────-->
  <select id="getTargetGoodsListForOrga" resultMap="goodsMap">
      /*price.getTargetGoodsListForOrga*/
      SELECT  G.IL_GOODS_ID
            , G.IL_ITEM_CD
            , G.UR_WAREHOUSE_ID
            , G.GOODS_TP
            , G.SALE_TP
            , G.GOODS_NM
            , G.PACKAGE_UNIT_DISP_YN
            , G.PROMOTION_NM
            , G.PROMOTION_NM_START_DT
            , G.PROMOTION_NM_END_DT
            , G.GOODS_DESC
            , G.SEARCH_KYWRD
            , G.PURCHASE_TARGET_TP
            , G.PURCHASE_MEMBER_YN
            , G.PURCHASE_EMPLOYEE_YN
            , G.PURCHASE_NONMEMBER_YN
            , G.DISP_WEB_PC_YN
            , G.DISP_WEB_MOBILE_YN
            , G.DISP_APP_YN
            , DATE_FORMAT(G.SALE_START_DT, '%Y%m%d%H%i%s')  AS SALE_START_DT
            , DATE_FORMAT(G.SALE_END_DT, '%Y%m%d%H%i%s')    AS SALE_END_DT
            , G.DISP_YN
            , G.SALE_STATUS
            , G.AUTO_DISP_SIZE_YN
            , G.SIZE_ETC
            , G.SALE_SHOP_YN
            , G.COUPON_USE_YN
            , G.LIMIT_MIN_CNT
            , G.LIMIT_MAX_TP
            , G.LIMIT_MAX_DURATION
            , G.LIMIT_MAX_CNT
            , G.MD_RECOMMEND_YN
            , G.GOODS_MEMO
            , G.DEL_YN
            , G.NOTICE_BELOW_1_IMG_URL
            , DATE_FORMAT(G.NOTICE_BELOW_1_START_DT, '%Y%m%d%H%i%s')    AS NOTICE_BELOW_1_START_DT
            , DATE_FORMAT(G.NOTICE_BELOW_2_START_DT, '%Y%m%d%H%i%s')    AS NOTICE_BELOW_2_START_DT
            , G.NOTICE_BELOW_2_IMG_URL
            , DATE_FORMAT(G.NOTICE_BELOW_1_END_DT, '%Y%m%d%H%i%s')      AS NOTICE_BELOW_1_END_DT
            , DATE_FORMAT(G.NOTICE_BELOW_2_END_DT, '%Y%m%d%H%i%s')      AS NOTICE_BELOW_2_END_DT
            , G.GOODS_PACKAGE_IMG_TP
            , G.GOODS_PACKAGE_BASIC_DESC_YN
            , G.GOODS_PACKAGE_BASIC_DESC
            , G.GOODS_PACKAGE_VIDEO_URL
            , G.GOODS_PACKAGE_VIDEO_AUTOPLAY_YN
            , G.GOODS_DAILY_TP
            , G.GOODS_DAILY_ALLERGY_YN
            , G.GOODS_DAILY_BULK_YN
            , DATE_FORMAT(BATCH_PRICE_CHANGE_DT, '%Y%m%d%H%i%s')  AS BATCH_PRICE_CHANGE_DT
            , G.CREATE_ID
            , DATE_FORMAT(G.CREATE_DT, '%Y%m%d%H%i%s')      AS CREATE_DT
            , G.MODIFY_ID
            , DATE_FORMAT(G.MODIFY_DT, '%Y%m%d%H%i%s')      AS MODIFY_DT
      FROM    IL_GOODS G
    <where>
        AND   G.PRICE_CHANGE_PROC_YN = 'N'
      <if test='@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(baseDe)'>
        AND   G.BATCH_PRICE_CHANGE_DT <![CDATA[>=]]> STR_TO_DATE(CONCAT(#{baseDe}, '000000'), '%Y%m%d%H%i%s')
        AND   G.BATCH_PRICE_CHANGE_DT <![CDATA[<=]]> STR_TO_DATE(CONCAT(#{baseDe}, '235959'), '%Y%m%d%H%i%s')
      </if>
    </where>
      ORDER BY G.IL_GOODS_ID
  </select>

  <!--───────────────────────────────────────────────────────────────────────
   * description    : 상품정보조회
   * @
   * @ 수정일                    수정자          수정내용
   * @ ──────────────────────────────────────────────────────────────────────
   * @ 2020.08.28   dgyoun  최초생성
   * @
  ────────────────────────────────────────────────────────────────────────-->
	<select id="getGoodsInfo" resultMap="goodsMap">
  		/*price.getGoodsInfo*/
      SELECT  G.IL_GOODS_ID
            , G.IL_ITEM_CD
            , G.UR_WAREHOUSE_ID
            , G.GOODS_TP
            , G.SALE_TP
            , G.GOODS_NM
            , G.PACKAGE_UNIT_DISP_YN
            , G.PROMOTION_NM
            , G.PROMOTION_NM_START_DT
            , G.PROMOTION_NM_END_DT
            , G.GOODS_DESC
            , G.SEARCH_KYWRD
            , G.PURCHASE_TARGET_TP
            , G.PURCHASE_MEMBER_YN
            , G.PURCHASE_EMPLOYEE_YN
            , G.PURCHASE_NONMEMBER_YN
            , G.DISP_WEB_PC_YN
            , G.DISP_WEB_MOBILE_YN
            , G.DISP_APP_YN
            , DATE_FORMAT(G.SALE_START_DT, '%Y%m%d%H%i%s')  AS SALE_START_DT
            , DATE_FORMAT(G.SALE_END_DT, '%Y%m%d%H%i%s')    AS SALE_END_DT
            , G.DISP_YN
            , G.SALE_STATUS
            , G.AUTO_DISP_SIZE_YN
            , G.SIZE_ETC
            , G.SALE_SHOP_YN
            , G.COUPON_USE_YN
            , G.LIMIT_MIN_CNT
            , G.LIMIT_MAX_TP
            , G.LIMIT_MAX_DURATION
            , G.LIMIT_MAX_CNT
            , G.MD_RECOMMEND_YN
            , G.GOODS_MEMO
            , G.DEL_YN
            , G.NOTICE_BELOW_1_IMG_URL
            , DATE_FORMAT(G.NOTICE_BELOW_1_START_DT, '%Y%m%d%H%i%s')    AS NOTICE_BELOW_1_START_DT
            , DATE_FORMAT(G.NOTICE_BELOW_2_START_DT, '%Y%m%d%H%i%s')    AS NOTICE_BELOW_2_START_DT
            , G.NOTICE_BELOW_2_IMG_URL
            , DATE_FORMAT(G.NOTICE_BELOW_1_END_DT, '%Y%m%d%H%i%s')      AS NOTICE_BELOW_1_END_DT
            , DATE_FORMAT(G.NOTICE_BELOW_2_END_DT, '%Y%m%d%H%i%s')      AS NOTICE_BELOW_2_END_DT
            , G.GOODS_PACKAGE_IMG_TP
            , G.GOODS_PACKAGE_BASIC_DESC_YN
            , G.GOODS_PACKAGE_BASIC_DESC
            , G.GOODS_PACKAGE_VIDEO_URL
            , G.GOODS_PACKAGE_VIDEO_AUTOPLAY_YN
            , G.GOODS_DAILY_TP
            , G.GOODS_DAILY_ALLERGY_YN
            , G.GOODS_DAILY_BULK_YN
            , G.CREATE_ID
            , DATE_FORMAT(G.CREATE_DT, '%Y%m%d%H%i%s')      AS CREATE_DT
            , G.MODIFY_ID
            , DATE_FORMAT(G.MODIFY_DT, '%Y%m%d%H%i%s')      AS MODIFY_DT
      FROM    IL_GOODS G
    <where>
        AND   G.IL_GOODS_ID = #{ilGoodsId}
    </where>
	</select>

  <!--───────────────────────────────────────────────────────────────────────
   * description    : 구성상품리스트조회
   * @
   * @ 수정일                    수정자          수정내용
   * @ ──────────────────────────────────────────────────────────────────────
   * @ 2020.08.28   dgyoun  최초생성
   * @
  ────────────────────────────────────────────────────────────────────────-->
  <select id="getGoodsPackageMappingList" resultMap="goodsPackageMappingMap">
      /*price.getGoodsPackageMappingList*/
      SELECT  P.IL_GOODS_PACKAGE_GOODS_MAPPING_ID
            , P.IL_GOODS_ID
            , P.TARGET_GOODS_ID
            , P.GOODS_TP
            , P.BASE_GOODS_YN
            , P.GOODS_QTY
            , P.SALE_PRICE_PER_UNIT
            , P.SALE_PRICE
            , P.CREATE_ID
            , DATE_FORMAT(P.CREATE_DT, '%Y%m%d%H%i%s')      AS CREATE_DT
            , P.MODIFY_ID
            , DATE_FORMAT(P.MODIFY_DT, '%Y%m%d%H%i%s')      AS MODIFY_DT
            , G.IL_ITEM_CD
      FROM    IL_GOODS_PACKAGE_GOODS_MAPPING P
            , IL_GOODS G
    <where>
        AND   P.IL_GOODS_ID = #{ilGoodsId}
        AND   G.IL_GOODS_ID = P.TARGET_GOODS_ID
        AND   G.BATCH_PRICE_CHANGE_DT <![CDATA[>=]]> STR_TO_DATE(CONCAT(#{baseDe}, '000000'), '%Y%m%d%H%i%s')
        AND   G.BATCH_PRICE_CHANGE_DT <![CDATA[<=]]> STR_TO_DATE(CONCAT(#{baseDe}, '235959'), '%Y%m%d%H%i%s')
    </where>
  </select>

  <!--───────────────────────────────────────────────────────────────────────
   * description    : 묶음상품리스트조회
   * @
   * @ 수정일                    수정자          수정내용
   * @ ──────────────────────────────────────────────────────────────────────
   * @ 2020.08.28   dgyoun  최초생성
   * @
  ────────────────────────────────────────────────────────────────────────-->
  <select id="getPackageGoodsListByMappingGoods" resultMap="goodsMap">
      /*price.getPackageGoodsListByMappingGoods*/
      SELECT  P.IL_GOODS_PACKAGE_GOODS_MAPPING_ID
            , G.IL_GOODS_ID
            , G.IL_ITEM_CD
            , G.UR_WAREHOUSE_ID
            , G.GOODS_TP
            , G.SALE_TP
            , G.GOODS_NM
            , G.PACKAGE_UNIT_DISP_YN
            , G.PROMOTION_NM
            , G.PROMOTION_NM_START_DT
            , G.PROMOTION_NM_END_DT
            , G.GOODS_DESC
            , G.SEARCH_KYWRD
            , G.PURCHASE_TARGET_TP
            , G.PURCHASE_MEMBER_YN
            , G.PURCHASE_EMPLOYEE_YN
            , G.PURCHASE_NONMEMBER_YN
            , G.DISP_WEB_PC_YN
            , G.DISP_WEB_MOBILE_YN
            , G.DISP_APP_YN
            , DATE_FORMAT(G.SALE_START_DT, '%Y%m%d%H%i%s')  AS SALE_START_DT
            , DATE_FORMAT(G.SALE_END_DT, '%Y%m%d%H%i%s')    AS SALE_END_DT
            , G.DISP_YN
            , G.SALE_STATUS
            , G.AUTO_DISP_SIZE_YN
            , G.SIZE_ETC
            , G.SALE_SHOP_YN
            , G.COUPON_USE_YN
            , G.LIMIT_MIN_CNT
            , G.LIMIT_MAX_TP
            , G.LIMIT_MAX_DURATION
            , G.LIMIT_MAX_CNT
            , G.MD_RECOMMEND_YN
            , G.GOODS_MEMO
            , G.DEL_YN
            , G.NOTICE_BELOW_1_IMG_URL
            , DATE_FORMAT(G.NOTICE_BELOW_1_START_DT, '%Y%m%d%H%i%s')    AS NOTICE_BELOW_1_START_DT
            , DATE_FORMAT(G.NOTICE_BELOW_2_START_DT, '%Y%m%d%H%i%s')    AS NOTICE_BELOW_2_START_DT
            , G.NOTICE_BELOW_2_IMG_URL
            , DATE_FORMAT(G.NOTICE_BELOW_1_END_DT, '%Y%m%d%H%i%s')      AS NOTICE_BELOW_1_END_DT
            , DATE_FORMAT(G.NOTICE_BELOW_2_END_DT, '%Y%m%d%H%i%s')      AS NOTICE_BELOW_2_END_DT
            , G.GOODS_PACKAGE_IMG_TP
            , G.GOODS_PACKAGE_BASIC_DESC_YN
            , G.GOODS_PACKAGE_BASIC_DESC
            , G.GOODS_PACKAGE_VIDEO_URL
            , G.GOODS_PACKAGE_VIDEO_AUTOPLAY_YN
            , G.GOODS_DAILY_TP
            , G.GOODS_DAILY_ALLERGY_YN
            , G.GOODS_DAILY_BULK_YN
            , G.CREATE_ID
            , DATE_FORMAT(G.CREATE_DT, '%Y%m%d%H%i%s')      AS CREATE_DT
            , G.MODIFY_ID
            , DATE_FORMAT(G.MODIFY_DT, '%Y%m%d%H%i%s')      AS MODIFY_DT
            , G.PRESENT_YN
      FROM    IL_GOODS_PACKAGE_GOODS_MAPPING P
            , IL_GOODS G
    <where>
        AND   P.TARGET_GOODS_ID = #{ilGoodsIid}
        AND   G.IL_GOODS_ID = P.IL_GOODS_ID
    </where>
  </select>

  <!--───────────────────────────────────────────────────────────────────────
   * description    : 상품가격리스트조회
   * @
   * @ 수정일                    수정자          수정내용
   * @ ──────────────────────────────────────────────────────────────────────
   * @ 2020.08.28   dgyoun  최초생성
   * @
  ────────────────────────────────────────────────────────────────────────-->
  <select id="getItemPriceList" resultMap="itemPriceMap">
      /*price.getItemPriceList*/
      SELECT  P.IL_ITEM_PRICE_ID
            , P.IL_ITEM_CD
            , DATE_FORMAT(P.START_DT, '%Y%m%d%H%i%s')       AS START_DT
            , DATE_FORMAT(P.END_DT, '%Y%m%d%H%i%s')         AS END_DT
            , P.STANDARD_PRICE
            , P.RECOMMENDED_PRICE
            , P.CREATE_ID
            , DATE_FORMAT(P.CREATE_DT, '%Y%m%d%H%i%s')      AS CREATE_DT
            , P.MODIFY_ID
            , DATE_FORMAT(P.MODIFY_DT, '%Y%m%d%H%i%s')      AS MODIFY_DT
      FROM    IL_GOODS G
            , IL_ITEM_PRICE P
    <where>
        AND   G.IL_GOODS_ID = #{ilGoodsId}
        AND   P.IL_ITEM_CD  = G.IL_ITEM_CD
    </where>
      ORDER BY P.START_DT, P.IL_ITEM_PRICE_ID
  </select>

  <!--───────────────────────────────────────────────────────────────────────
   * description    : 상품가격시작일자리스트조회-일반상품
   *                  품목구간의시작일자 + 할인구간의시작일자 리스트
   *                  1. 시작일자와 종료일자를 모두 시작일자항목에 나열
   *                  2. 종료일자의 경우 +1초로 변환
   * @
   * @ 수정일                    수정자          수정내용
   * @ ──────────────────────────────────────────────────────────────────────
   * @ 2020.08.28   dgyoun  최초생성
   * @
  ────────────────────────────────────────────────────────────────────────-->
  <select id="getGoodsPriceItemDiscountPeriodList" resultMap="goodsPriceMap">
      /*price.getGoodsPriceItemDiscountPeriodList*/
      SELECT  C.IL_GOODS_ID
            , C.IL_ITEM_CD
            , P.IL_ITEM_PRICE_ID
            , C.PRICE_START_DT
            , P.STANDARD_PRICE
            , P.RECOMMENDED_PRICE
      FROM    (
              SELECT  A.IL_GOODS_ID
                    , A.IL_ITEM_CD
                    , B.M
                    , CASE  WHEN B.M = 1 THEN DATE_FORMAT(A.START_DT, '%Y%m%d%H%i%s')
                            WHEN B.M = 2 THEN DATE_FORMAT(DATE_ADD(A.END_DT, INTERVAL 1 SECOND), '%Y%m%d%H%i%s')
                            ELSE ''
                      END   PRICE_START_DT
              FROM    (
                      SELECT  G.IL_GOODS_ID
                            , IP.IL_ITEM_CD
                            , IP.START_DT   AS START_DT
                            , IP.END_DT     AS END_DT
                      FROM    IL_GOODS G
                            , IL_ITEM_PRICE IP
                    <where>
                        AND   G.IL_GOODS_ID = #{ilGoodsId}
                        AND   IP.IL_ITEM_CD = G.IL_ITEM_CD
                    </where>

                      UNION ALL

                      SELECT  GD.IL_GOODS_ID
                            , G.IL_ITEM_CD
                            , GD.DISCOUNT_START_DT  AS START_DT
                            , GD.DISCOUNT_END_DT    AS END_DT
                      FROM    IL_GOODS_DISCOUNT GD
                            , IL_GOODS G
                    <where>
                        AND   GD.IL_GOODS_ID = #{ilGoodsId}
                        AND   GD.USE_YN = 'Y'
                        AND   G.IL_GOODS_ID = GD.IL_GOODS_ID
                    </where>
                      ) A
                    , (
                      SELECT  1 M
                      UNION ALL
                      SELECT  2 M
                      ) B
              ) C
            , IL_ITEM_PRICE P
    <where>
        AND   C.PRICE_START_DT <![CDATA[<]]> '30000101000000'
        AND   P.IL_ITEM_CD = C.IL_ITEM_CD
        AND   P.START_DT <![CDATA[<=]]> STR_TO_DATE(C.PRICE_START_DT, '%Y%m%d%H%i%s')
        AND   P.END_DT   <![CDATA[>=]]> STR_TO_DATE(C.PRICE_START_DT, '%Y%m%d%H%i%s')
    </where>
      GROUP BY C.IL_GOODS_ID, C.IL_ITEM_CD, P.IL_ITEM_PRICE_ID, C.PRICE_START_DT
      ORDER BY C.IL_GOODS_ID, C.IL_ITEM_CD, C.PRICE_START_DT, P.IL_ITEM_PRICE_ID
  </select>

  <!--───────────────────────────────────────────────────────────────────────
   * description    : 품목가격리스트조회-묶음상품의구성상품전체
   * @
   * @ 수정일                    수정자          수정내용
   * @ ──────────────────────────────────────────────────────────────────────
   * @ 2020.08.28   dgyoun  최초생성
   * @
  ────────────────────────────────────────────────────────────────────────-->
  <select id="getItemPriceListForPackage" resultMap="itemPriceMap">
      /*price.getItemPriceListForPackage*/
      SELECT  P.IL_ITEM_PRICE_ID
            , P.IL_ITEM_CD
            , P.START_DT
            , P.END_DT
            , P.STANDARD_PRICE
            , P.RECOMMENDED_PRICE
            , P.CREATE_ID
            , DATE_FORMAT(P.CREATE_DT, '%Y%m%d%H%i%s')      AS CREATE_DT
            , P.MODIFY_ID
            , DATE_FORMAT(P.MODIFY_DT, '%Y%m%d%H%i%s')      AS MODIFY_DT
      FROM    IL_GOODS_PACKAGE_GOODS_MAPPING M
            , IL_GOODS G
            , IL_ITEM_PRICE P
    <where>
        AND   M.IL_GOODS_ID = #{ilGoodsId}
        AND   G.IL_GOODS_ID = M.TARGET_GOODS_ID
        AND   P.IL_ITEM_CD  = G.IL_ITEM_CD
    </where>
      ORDER BY P.START_DT, P.IL_ITEM_PRICE_ID
  </select>

  <!--───────────────────────────────────────────────────────────────────────
   * description    : 상품가격시작일자리스트조회-묶음상품의구성상품전체
   *                  품목구간의시작일자 + 할인구간의시작일자 리스트
   * @
   * @ 수정일                    수정자          수정내용
   * @ ──────────────────────────────────────────────────────────────────────
   * @ 2020.08.28   dgyoun  최초생성
   * @
  ────────────────────────────────────────────────────────────────────────-->
  <select id="getGoodsPriceItemDiscountPeriodListForPackage" resultMap="goodsPriceMap">
      /*price.getGoodsPriceItemDiscountPeriodListForPackage*/
      SELECT  #{ilGoodsId}      AS IL_GOODS_ID
            , C.PRICE_START_DT
      FROM    (
              SELECT  A.IL_GOODS_ID
                    , B.M
                    , CASE  WHEN B.M = 1 THEN DATE_FORMAT(A.START_DT, '%Y%m%d%H%i%s')
                            WHEN B.M = 2 THEN DATE_FORMAT(DATE_ADD(A.END_DT, INTERVAL 1 SECOND), '%Y%m%d%H%i%s')
                            ELSE ''
                      END   PRICE_START_DT
              FROM    (
                      SELECT  G.IL_GOODS_ID
                            , IP.START_DT   AS START_DT
                            , IP.END_DT     AS END_DT
                      FROM    IL_GOODS G
                            , IL_ITEM_PRICE IP
                    <where>
                        AND   G.IL_GOODS_ID IN  (
                                                SELECT  M.TARGET_GOODS_ID
                                                FROM    IL_GOODS_PACKAGE_GOODS_MAPPING M
                                                WHERE   M.IL_GOODS_ID = #{ilGoodsId}
                                                )
                        AND   IP.IL_ITEM_CD = G.IL_ITEM_CD
                    </where>
                      UNION ALL

                      SELECT  GD.IL_GOODS_ID
                            , GD.DISCOUNT_START_DT  AS START_DT
                            , GD.DISCOUNT_END_DT    AS END_DT
                      FROM    IL_GOODS_DISCOUNT GD
                    <where>
                        AND   GD.IL_GOODS_ID IN (
                                                SELECT  M.TARGET_GOODS_ID
                                                FROM    IL_GOODS_PACKAGE_GOODS_MAPPING M
                                                WHERE   M.IL_GOODS_ID = #{ilGoodsId}
                                                )
                        AND   GD.USE_YN = 'Y'
                    </where>
                      ) A
                    , (
                      SELECT  1 M
                      UNION ALL
                      SELECT  2 M
                      ) B
              ) C
    <where>
        AND   C.PRICE_START_DT <![CDATA[<]]> '30000101000000'
    </where>
      GROUP BY C.IL_GOODS_ID, C.PRICE_START_DT
      ORDER BY C.IL_GOODS_ID, C.PRICE_START_DT
  </select>

  <!--───────────────────────────────────────────────────────────────────────
   * description    : 묶음상품의 구성상품 품목가격 Sum
   * @
   * @ 수정일                    수정자          수정내용
   * @ ──────────────────────────────────────────────────────────────────────
   * @ 2020.08.28   dgyoun  최초생성
   * @
  ────────────────────────────────────────────────────────────────────────-->
  <select id="getTargetGoodsItemPriceSum" resultMap="itemPriceMap">
      /*price.getTargetGoodsItemPriceSum*/
      SELECT  SUM(STANDARD_PRICE)     AS STANDARD_PRICE
            , SUM(RECOMMENDED_PRICE)  AS RECOMMENDED_PRICE
      FROM    IL_GOODS_PACKAGE_GOODS_MAPPING M
            , IL_GOOODS G
            , IL_ITEM_PRICE P
    <where>
        AND   M.IL_GOODS_ID = #{ilGoodsId}
        AND   G.IL_GOODS_ID = M.TARGET_GOODS_ID
        AND   P.IL_ITEM_CD  = G.IL_ITEM_CD
        AND   P.START_DT <![CDATA[<=]]> STR_TO_DATE(#{scheduleStartDt}, '%Y%m%d%H%i%s')
        AND   P.END_DT   <![CDATA[>=]]> STR_TO_DATE(#{scheduleStartDt}, '%Y%m%d%H%i%s')
    </where>
  </select>

  <!--───────────────────────────────────────────────────────────────────────
   * description    : 상품할인리스트조회
   * @ 할인가                    : GOODS_DISCOUNT_METHOD_TP.FIXED_PRICE -> DISCOUNT_SALE_PRICE
   *                  GOODS_DISCOUNT_METHOD_TP.FIXED_RATE  -> 정상가 - (정상가*DISCOUNT_RATIO/100) -> 1원 절삭
   * @ 수정일                    수정자          수정내용
   * @ ──────────────────────────────────────────────────────────────────────
   * @ 2020.08.28   dgyoun  최초생성
   * @
  ────────────────────────────────────────────────────────────────────────-->
  <select id="getGoodsDiscountList" resultMap="goodsDiscountMap">
      /*price.getGoodsDiscountList*/
      SELECT  D.IL_GOODS_DISCOUNT_ID
            , D.IL_GOODS_ID
            , D.DISCOUNT_TP
            , DATE_FORMAT(D.DISCOUNT_START_DT, '%Y%m%d%H%i%s')  AS DISCOUNT_START_DT
            , DATE_FORMAT(D.DISCOUNT_END_DT, '%Y%m%d%H%i%s')    AS DISCOUNT_END_DT
            , D.DISCOUNT_METHOD_TP
            , D.DISCOUNT_RATIO
            , D.DISCOUNT_SALE_PRICE
            , D.CREATE_ID
            , DATE_FORMAT(D.CREATE_DT, '%Y%m%d%H%i%s')      AS CREATE_DT
            , D.MODIFY_ID
            , DATE_FORMAT(D.MODIFY_DT, '%Y%m%d%H%i%s')      AS MODIFY_DT
            , CASE  WHEN  D.DISCOUNT_METHOD_TP = 'GOODS_DISCOUNT_METHOD_TP.FIXED_PRICE'
                          THEN  DISCOUNT_SALE_PRICE
                    WHEN  D.DISCOUNT_METHOD_TP = 'GOODS_DISCOUNT_METHOD_TP.FIXED_RATE'
                          THEN  TRUNCATE(IFNULL(#{recommendedPrice}, 0) - (IFNULL(#{recommendedPrice}, 0) * IFNULL(D.DISCOUNT_RATIO, 0) / 100), -1)
                    ELSE  IFNULL(#{recommendedPrice}, 0)
              END   DISCOUNT_APPLY_SALE_PRICE
      FROM    IL_GOODS_DISCOUNT D
    <where>
        AND   D.IL_GOODS_ID = #{ilGoodsId}
        AND   D.DISCOUNT_TP IN ('GOODS_DISCOUNT_TP.PRIORITY', 'GOODS_DISCOUNT_TP.ERP_EVENT', 'GOODS_DISCOUNT_TP.IMMEDIATE')
      <if test='@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(scheduleStartDt)'>
        AND   D.DISCOUNT_START_DT <![CDATA[<=]]> STR_TO_DATE(#{scheduleStartDt}, '%Y%m%d%H%i%s')
        AND   D.DISCOUNT_END_DT   <![CDATA[>=]]> STR_TO_DATE(#{scheduleStartDt}, '%Y%m%d%H%i%s')
      </if>
        AND   D.USE_YN = 'Y'
    </where>
      ORDER BY  CASE  WHEN D.DISCOUNT_TP = 'GOODS_DISCOUNT_TP.PRIORITY'   THEN 1
                      WHEN D.DISCOUNT_TP = 'GOODS_DISCOUNT_TP.ERP_EVENT'  THEN 2
                      WHEN D.DISCOUNT_TP = 'GOODS_DISCOUNT_TP.IMMEDIATE'   THEN 3
                      ELSE 99
                END ASC
              , D.IL_GOODS_DISCOUNT_ID
  </select>

  <!--───────────────────────────────────────────────────────────────────────
   * description    : 상품가격미사용수정
   * @
   * @ 수정일                    수정자          수정내용
   * @ ──────────────────────────────────────────────────────────────────────
   * @ 2020.08.28   dgyoun  최초생성
   * @ 2020.10.05   david.nam price_change_proc_yn, price_change_proc_dt 추가
   * @
  ────────────────────────────────────────────────────────────────────────-->
  <update id="putGoodsPriceUnUse" parameterType="kr.co.pulmuone.v1.goods.price.dto.vo.GoodsPriceVo">
    /*price.putGoodsPriceUnUse*/
    UPDATE  IL_GOODS_PRICE
    SET     USE_YN      = 'N'
          , MODIFY_ID   = #{modifyId}
          , MODIFY_DT   = NOW()
          , PRICE_CHANGE_PROC_YN = 'N'
          , PRICE_CHANGE_PROC_DT = STR_TO_DATE('1900-01-01', '%Y-%m-%d')
    WHERE   IL_GOODS_ID = #{ilGoodsId}
      AND   USE_YN = 'Y'
  </update>

  <!--───────────────────────────────────────────────────────────────────────
   * description    : 상품가격스케줄등록
   * @
   * @ 수정일                    수정자          수정내용
   * @ ──────────────────────────────────────────────────────────────────────
   * @ 2020.08.28   dgyoun  최초생성
   * @ 2020.10.05   david.nam price_change_proc_yn, price_change_proc_dt 추가
   * @
  ────────────────────────────────────────────────────────────────────────-->
  <insert id="addGoodsPrice" parameterType="kr.co.pulmuone.v1.goods.price.dto.vo.GoodsPriceVo">
    /*price.addGoodsPrice*/
    INSERT INTO IL_GOODS_PRICE(
        IL_GOODS_ID
      , IL_ITEM_PRICE_ID
      , IL_GOODS_DISCOUNT_ID
      , DISCOUNT_TP
      , PRICE_START_DT
      , PRICE_END_DT
      , STANDARD_PRICE
      , RECOMMENDED_PRICE
      , SALE_PRICE
      , CREATE_ID
      , CREATE_DT
      , MODIFY_ID
      , MODIFY_DT
      , PRICE_CHANGE_PROC_YN
      , PRICE_CHANGE_PROC_DT
    )
    VALUES (
        #{ilGoodsId}
      , #{ilItemPriceId}
      , #{ilGoodsDiscountId}
      , #{discountTp}
      , #{priceStartDt}
      , #{priceEndDt}
      , #{standardPrice}
      , #{recommendedPrice}
      , #{salePrice}
      , #{createId}
      , NOW()
      , #{modifyId}
      , NOW()
      , 'N'
      , STR_TO_DATE('1900-01-01', '%Y-%m-%d')
    )
  </insert>

  <!--───────────────────────────────────────────────────────────────────────
   * description    :  품목-상품가격변경처리여부수정
   * @
   * @ 수정일                    수정자          수정내용
   * @ ──────────────────────────────────────────────────────────────────────
   * @ 2020.08.28   dgyoun  최초생성
   * @
  ────────────────────────────────────────────────────────────────────────-->
  <update id="putItemPorcYn" parameterType="kr.co.pulmuone.v1.goods.price.dto.vo.ItemVo">
    /*price.putItemPorcYn*/
    UPDATE  IL_ITEM
    SET     PRICE_CHANGE_PROC_YN  = 'Y'
          , MODIFY_ID             = #{modifyId}
          , PRICE_CHANGE_PROC_DT  = NOW()
    WHERE   IL_ITEM_CD = #{ilItemCd}
  </update>

  <!--───────────────────────────────────────────────────────────────────────
   * description    :  상품-상품가격변경처리여부수정
   * @
   * @ 수정일                    수정자          수정내용
   * @ ──────────────────────────────────────────────────────────────────────
   * @ 2020.08.28   dgyoun  최초생성
   * @
  ────────────────────────────────────────────────────────────────────────-->
  <update id="putGoodsPorcYn" parameterType="kr.co.pulmuone.v1.goods.price.dto.vo.GoodsVo">
    /*price.putGoodsPorcYn*/
    UPDATE  IL_GOODS
    SET     PRICE_CHANGE_PROC_YN  = 'Y'
          , MODIFY_ID             = #{modifyId}
          , PRICE_CHANGE_PROC_DT  = NOW()
    WHERE   IL_GOODS_ID = #{ilGoodsId}
  </update>

  <!--───────────────────────────────────────────────────────────────────────
   * description    : 상품가격리스트조회
   * @ 수정일                    수정자          수정내용
   * @ ──────────────────────────────────────────────────────────────────────
   * @ 2020.09.09   dgyoun  최초생성
   * @ 2021.11.30   남기승     정상가 노출처리
  ────────────────────────────────────────────────────────────────────────-->
  <select id="getGoodsPricePagingList" resultMap="goodsPriceMap">
      /*price.getGoodsPricePagingList*/
      SELECT  SQL_CALC_FOUND_ROWS
              A.IL_GOODS_PRICE_ID
            , A.IL_GOODS_ID
            , A.IL_ITEM_PRICE_ID
            , A.IL_GOODS_DISCOUNT_ID
            , A.DISCOUNT_TP
            , A.PRICE_START_DT
            , A.PRICE_END_DT
            , A.STANDARD_PRICE
            , A.RECOMMENDED_PRICE
            , A.SALE_PRICE
            , A.USE_YN
            , A.CREATE_ID
            , A.CREATE_DT
            , A.MODIFY_ID
            , A.MODIFY_DT
            , CASE  WHEN A.DISCOUNT_METHOD_TP = 'GOODS_DISCOUNT_METHOD_TP.FIXED_RATE'
                    THEN A.DISCOUNT_RATIO
                    ELSE TRUNCATE((((CAST(A.RECOMMENDED_PRICE AS SIGNED) - CAST(A.SALE_PRICE AS SIGNED)) / A.RECOMMENDED_PRICE) * 100), 0)
              END   DISCOUNT_RATIO
            , (CAST(A.RECOMMENDED_PRICE AS SIGNED) - CAST(A.SALE_PRICE AS SIGNED))  AS DISCOUNT_PRICE     <!-- 할인되는금액 -->
            , A.DISCOUNT_SALE_PRICE                                       <!-- 고정가할인금액 -->
            , A.STATUS
            , CASE WHEN A.DISCOUNT_TP = 'GOODS_DISCOUNT_TP.NONE' THEN '시스템승인 ' ELSE A.STATUS_NM END AS STATUS_NM
            , A.APPR_REQ_INFO
            , A.APPR_INFO
            , A.DISCOUNT_METHOD_TP
            , C1.NAME AS DISCOUNT_TP_NM
            , IFNULL(C2.NAME, '') AS DISCOUNT_METHOD_TP_NM
      FROM    (
              SELECT  GP.IL_GOODS_PRICE_ID
                    , GP.IL_GOODS_ID
                    , GP.IL_ITEM_PRICE_ID
                    , GP.IL_GOODS_DISCOUNT_ID
                    , IFNULL(GP.DISCOUNT_TP, 'GOODS_DISCOUNT_TP.NONE')  AS DISCOUNT_TP
                    , GP.PRICE_START_DT
                    , GP.PRICE_END_DT
                    , GP.STANDARD_PRICE
                    , GP.RECOMMENDED_PRICE
                    , GP.SALE_PRICE
                    , GP.USE_YN
                    , GP.CREATE_ID
                    , GP.CREATE_DT
                    , GP.MODIFY_ID
                    , GP.MODIFY_DT
                    , GD.DISCOUNT_RATIO
                    , GD.DISCOUNT_SALE_PRICE
                    , GD.DISCOUNT_METHOD_TP
                    , GDA.APPR_STAT  AS STATUS
                    , IFNULL(C3.NAME, '승인완료')        AS STATUS_NM
                    , IFNULL(CONCAT(FN_DECRYPT(APPR_REQ_USER.USER_NM), '(', APPR_REQ_USER.LOGIN_ID, ')'), '') AS APPR_REQ_INFO
                    , IFNULL(CASE WHEN APPR_SUB_USER.LOGIN_ID IS NOT NULL THEN
                        CONCAT(FN_DECRYPT(APPR_SUB_USER.USER_NM), '(', APPR_SUB_USER.LOGIN_ID, ')&lt;BR/&gt;', FN_DECRYPT(APPR_USER.USER_NM), '(', APPR_USER.LOGIN_ID, ')')
                      ELSE
                        CONCAT(FN_DECRYPT(APPR_USER.USER_NM), '(', APPR_USER.LOGIN_ID, ')')
                      END, '') AS APPR_INFO
              FROM    IL_GOODS_PRICE GP
                            LEFT OUTER  JOIN  IL_GOODS_DISCOUNT GD
                                        ON    GD.IL_GOODS_DISCOUNT_ID = GP.IL_GOODS_DISCOUNT_ID
                                        AND   GD.USE_YN = 'Y'
                            LEFT OUTER  JOIN  IL_GOODS_DISCOUNT_APPR GDA
                                        ON    GDA.IL_GOODS_DISCOUNT_ID = GD.IL_gOODS_DISCOUNT_ID
                            LEFT JOIN UR_USER APPR_REQ_USER ON APPR_REQ_USER.UR_USER_ID = GDA.APPR_REQ_USER_ID
                            LEFT JOIN UR_USER APPR_SUB_USER ON APPR_SUB_USER.UR_USER_ID = GDA.APPR_SUB_USER_ID
                            LEFT JOIN UR_USER APPR_USER ON APPR_USER.UR_USER_ID = GDA.APPR_USER_ID
                            LEFT OUTER  JOIN  (
                                SELECT  CD.ST_COMN_CODE_ID AS CODE
                                        , DC.DIC_NM          AS NAME
                                FROM    ST_COMN_CODE CD
                                        , GB_DIC DC
                                WHERE   CD.ST_COMN_CODE_MST_CD  = 'APPR_STAT'
                                AND   CD.GB_DIC_MST_ID        = DC.GB_DIC_MST_ID
                                AND   DC.GB_LANG_ID           = '1'
                            ) C3
                            ON    C3.CODE  = GDA.APPR_STAT
            <where>
                AND   GP.IL_GOODS_ID = #{ilGoodsId}
                AND   GP.USE_YN = 'Y'
                AND   GP.PRICE_START_DT &lt;= NOW()
            </where>
              ) A
                  LEFT OUTER  JOIN  (
                                    SELECT  CD.ST_COMN_CODE_ID AS CODE
                                          , DC.DIC_NM          AS NAME
                                    FROM    ST_COMN_CODE CD
                                          , GB_DIC DC
                                    WHERE   CD.ST_COMN_CODE_MST_CD  = 'GOODS_DISCOUNT_TP'
                                      AND   CD.GB_DIC_MST_ID        = DC.GB_DIC_MST_ID
                                      AND   DC.GB_LANG_ID           = '1'
                                    ) C1
                              ON    C1.CODE  = A.DISCOUNT_TP
                  LEFT OUTER  JOIN  (
                                    SELECT  CD.ST_COMN_CODE_ID AS CODE
                                          , DC.DIC_NM          AS NAME
                                    FROM    ST_COMN_CODE CD
                                          , GB_DIC DC
                                    WHERE   CD.ST_COMN_CODE_MST_CD  = 'GOODS_DISCOUNT_METHOD_TP'
                                      AND   CD.GB_DIC_MST_ID        = DC.GB_DIC_MST_ID
                                      AND   DC.GB_LANG_ID           = '1'
                                    ) C2
                              ON    C2.CODE  = A.DISCOUNT_METHOD_TP
      ORDER BY  A.PRICE_START_DT DESC, A.PRICE_END_DT DESC
              , CASE  WHEN A.DISCOUNT_TP = 'GOODS_DISCOUNT_TP.PRIORITY'   THEN 1
                      WHEN A.DISCOUNT_TP = 'GOODS_DISCOUNT_TP.ERP_EVENT'  THEN 2
                      WHEN A.DISCOUNT_TP = 'GOODS_DISCOUNT_TP.IMMEDIATE'   THEN 3
                        WHEN A.DISCOUNT_TP = 'GOODS_DISCOUNT_TP.NONE'   THEN 4
                      ELSE 99
                END ASC
    <include refid="_common.pageLimit"/>
  </select>


  <!--───────────────────────────────────────────────────────────────────────
   * description    : 임직원 할인 가격정보
   * @ 수정일                    수정자          수정내용
   * @ ──────────────────────────────────────────────────────────────────────
   * @ 2021.01.15   임상건  최초생성
   * @
  ────────────────────────────────────────────────────────────────────────-->
  <select id="getGoodsEmployeePricePagingList" resultMap="goodsEmployeePriceMap">
      /*price.getGoodsEmployeePricePagingList*/
      SELECT  SQL_CALC_FOUND_ROWS
              A.IL_GOODS_EMPLOYEE_PRICE_ID
            , A.IL_GOODS_ID
            , A.IL_ITEM_PRICE_ID
            , A.IL_GOODS_DISCOUNT_ID
            , A.DISCOUNT_TP
            , A.PRICE_START_DT
            , A.PRICE_END_DT
            , A.STANDARD_PRICE
            , A.RECOMMENDED_PRICE
            , A.SALE_PRICE
            , A.USE_YN
            , A.CREATE_ID
            , A.CREATE_DT
            , A.MODIFY_ID
            , A.MODIFY_DT
            , CASE  WHEN A.DISCOUNT_METHOD_TP = 'GOODS_DISCOUNT_METHOD_TP.FIXED_RATE'
                    THEN A.DISCOUNT_RATIO
                    ELSE TRUNCATE((((A.RECOMMENDED_PRICE - A.SALE_PRICE) / A.RECOMMENDED_PRICE) * 100), 0)
              END   DISCOUNT_RATIO
            , (A.RECOMMENDED_PRICE - A.SALE_PRICE)  AS DISCOUNT_PRICE     <!-- 할인되는금액 -->
            , A.DISCOUNT_SALE_PRICE                                       <!-- 고정가할인금액 -->
            , A.STATUS
            , A.STATUS_NM
            , A.APPROVE_ID
            , A.APPROVE_NM
            , A.DISCOUNT_METHOD_TP
            , C1.NAME AS DISCOUNT_TP_NM
            , IFNULL(C2.NAME, '') AS DISCOUNT_METHOD_TP_NM
      FROM    (
              SELECT  GP.IL_GOODS_EMPLOYEE_PRICE_ID
                    , GP.IL_GOODS_ID
                    , GP.IL_ITEM_PRICE_ID
                    , GP.IL_GOODS_DISCOUNT_ID
                    , IFNULL(GP.DISCOUNT_TP, 'GOODS_DISCOUNT_TP.NONE')  AS DISCOUNT_TP
                    , GP.PRICE_START_DT
                    , GP.PRICE_END_DT
                    , GP.STANDARD_PRICE
                    , GP.RECOMMENDED_PRICE
                    , GP.SALE_PRICE
                    , GP.USE_YN
                    , GP.CREATE_ID
                    , GP.CREATE_DT
                    , GP.MODIFY_ID
                    , GP.MODIFY_DT
                    , GD.DISCOUNT_RATIO
                    , GD.DISCOUNT_SALE_PRICE
                    , GD.DISCOUNT_METHOD_TP
                    , '0'         AS STATUS
                    , '승인완료'     AS STATUS_NM
                    , 99          AS APPROVE_ID
                    , '나승인'      AS APPROVE_NM
              FROM    IL_GOODS_EMPLOYEE_PRICE GP
                            LEFT OUTER  JOIN  IL_GOODS_DISCOUNT GD
                                        ON    GD.IL_GOODS_DISCOUNT_ID = GP.IL_GOODS_DISCOUNT_ID
                                        AND   GD.USE_YN = 'Y'
            <where>
                AND   GP.IL_GOODS_ID = #{ilGoodsId}
                AND   GP.USE_YN = 'Y'
            </where>
              ) A
                  LEFT OUTER  JOIN  (
                                    SELECT  CD.ST_COMN_CODE_ID AS CODE
                                          , DC.DIC_NM          AS NAME
                                    FROM    ST_COMN_CODE CD
                                          , GB_DIC DC
                                    WHERE   CD.ST_COMN_CODE_MST_CD  = 'GOODS_DISCOUNT_TP'
                                      AND   CD.GB_DIC_MST_ID        = DC.GB_DIC_MST_ID
                                      AND   DC.GB_LANG_ID           = '1'
                                    ) C1
                              ON    C1.CODE  = A.DISCOUNT_TP
                  LEFT OUTER  JOIN  (
                                    SELECT  CD.ST_COMN_CODE_ID AS CODE
                                          , DC.DIC_NM          AS NAME
                                    FROM    ST_COMN_CODE CD
                                          , GB_DIC DC
                                    WHERE   CD.ST_COMN_CODE_MST_CD  = 'GOODS_DISCOUNT_METHOD_TP'
                                      AND   CD.GB_DIC_MST_ID        = DC.GB_DIC_MST_ID
                                      AND   DC.GB_LANG_ID           = '1'
                                    ) C2
                              ON    C2.CODE  = A.DISCOUNT_METHOD_TP
      ORDER BY  A.PRICE_START_DT DESC, A.PRICE_END_DT DESC
              , CASE  WHEN A.DISCOUNT_TP = 'GOODS_DISCOUNT_TP.PRIORITY'   THEN 1
                      WHEN A.DISCOUNT_TP = 'GOODS_DISCOUNT_TP.ERP_EVENT'  THEN 2
                      WHEN A.DISCOUNT_TP = 'GOODS_DISCOUNT_TP.IMMEDIATE'   THEN 3
                      ELSE 99
                END ASC
    <include refid="_common.pageLimit"/>
  </select>

  <!--───────────────────────────────────────────────────────────────────────
   * description    : 품목가격리스트조회
   * @ 수정일                    수정자          수정내용
   * @ ──────────────────────────────────────────────────────────────────────
   * @ 2020.09.09   dgyoun  최초생성
   * @
  ────────────────────────────────────────────────────────────────────────-->
  <select id="getItemPricePagingList" resultMap="itemPriceMap">
      /*price.getItemPricePagingList*/
      SELECT  SQL_CALC_FOUND_ROWS
              IP.IL_ITEM_PRICE_ID
            , IP.IL_ITEM_CD
            , IP.START_DT
            , IP.END_DT
            , IP.STANDARD_PRICE
            , IP.RECOMMENDED_PRICE
            , IP.CREATE_ID
            , IP.CREATE_DT
            , IP.MODIFY_ID
            , IP.MODIFY_DT
            , 'S'       AS REG_TP
            , '시스템'    AS REG_TP_NM
            , '0'       AS STATUS
            , '승인완료'   AS STATUS_NM
            , 99        AS APPROVE_ID
            , '나승인'    AS  APPROVE_NM
      FROM    IL_ITEM_PRICE IP
    <where>
        AND   IP.IL_ITEM_CD = #{ilItemCd}
    </where>
      ORDER BY  IP.START_DT DESC, IP.END_DT DESC
    <include refid="_common.pageLimit"/>
  </select>

  <!--───────────────────────────────────────────────────────────────────────
   * description    : 상품할인정보리스트조회
   * @ 수정일                    수정자          수정내용
   * @ ──────────────────────────────────────────────────────────────────────
   * @ 2020.09.17   dgyoun  최초생성
   * @
  ────────────────────────────────────────────────────────────────────────-->
  <select id="getGoodsDiscountPagingList" resultMap="goodsDiscountMap">
      /*price.getGoodsDiscountPagingList*/
      SELECT SQL_CALC_FOUND_ROWS
        UI.*
      FROM (
          SELECT
              GD.IL_GOODS_DISCOUNT_ID
              , E.IL_GOODS_PRICE_ID
              , GD.IL_GOODS_ID
              , GD.DISCOUNT_TP
              , GD.DISCOUNT_START_DT
              , GD.DISCOUNT_END_DT
              , GD.DISCOUNT_METHOD_TP
              , E.STANDARD_PRICE
              , E.RECOMMENDED_PRICE
              , CASE WHEN GD.DISCOUNT_METHOD_TP = 'GOODS_DISCOUNT_METHOD_TP.FIXED_RATE' THEN
                    E.RECOMMENDED_PRICE - TRUNCATE(E.RECOMMENDED_PRICE - (E.RECOMMENDED_PRICE * (GD.DISCOUNT_RATIO * 0.01)),-1)
                ELSE
                    E.RECOMMENDED_PRICE - GD.DISCOUNT_SALE_PRICE
                END AS DISCOUNT_PRICE
              , CASE WHEN GD.DISCOUNT_METHOD_TP = 'GOODS_DISCOUNT_METHOD_TP.FIXED_RATE' THEN
                    GD.DISCOUNT_RATIO
                ELSE
                     TRUNCATE(100-((GD.DISCOUNT_SALE_PRICE/E.RECOMMENDED_PRICE)*100),0)
                END AS DISCOUNT_RATIO
              , CASE WHEN GD.DISCOUNT_METHOD_TP = 'GOODS_DISCOUNT_METHOD_TP.FIXED_RATE' THEN
                    TRUNCATE(E.RECOMMENDED_PRICE - (E.RECOMMENDED_PRICE * (GD.DISCOUNT_RATIO * 0.01)),-1)
                 ELSE
                     GD.DISCOUNT_SALE_PRICE
                END AS DISCOUNT_SALE_PRICE
              , GD.USE_YN
              , GD.CREATE_ID
              , GD.CREATE_DT
              , GD.MODIFY_ID
              , GD.MODIFY_DT
              , GDA.APPR_STAT  AS STATUS
              , IFNULL(C3.NAME, '승인완료')        AS STATUS_NM
              , IFNULL(CONCAT(FN_DECRYPT(APPR_REQ_USER.USER_NM), '(', APPR_REQ_USER.LOGIN_ID, ')'), '') AS APPR_REQ_INFO
              , IFNULL(CASE WHEN APPR_SUB_USER.LOGIN_ID IS NOT NULL THEN
                    CONCAT(FN_DECRYPT(APPR_SUB_USER.USER_NM), '(', APPR_SUB_USER.LOGIN_ID, ')&lt;BR/&gt;', FN_DECRYPT(APPR_USER.USER_NM), '(', APPR_USER.LOGIN_ID, ')')
                ELSE
                    CONCAT(FN_DECRYPT(APPR_USER.USER_NM), '(', APPR_USER.LOGIN_ID, ')')
                END, '') AS APPR_INFO
              , C1.NAME               AS DISCOUNT_TP_NM
              , C2.NAME               AS DISCOUNT_METHOD_TP_NM
          FROM    IL_GOODS_DISCOUNT GD
          LEFT OUTER  JOIN  IL_GOODS_DISCOUNT_APPR GDA
            ON    GDA.IL_GOODS_DISCOUNT_ID = GD.IL_GOODS_DISCOUNT_ID
          LEFT JOIN UR_USER APPR_REQ_USER ON APPR_REQ_USER.UR_USER_ID = GDA.APPR_REQ_USER_ID
          LEFT JOIN UR_USER APPR_SUB_USER ON APPR_SUB_USER.UR_USER_ID = GDA.APPR_SUB_USER_ID
          LEFT JOIN UR_USER APPR_USER ON APPR_USER.UR_USER_ID = GDA.APPR_USER_ID
          LEFT OUTER  JOIN  (
              SELECT  CD.ST_COMN_CODE_ID AS CODE
                    , DC.DIC_NM          AS NAME
              FROM    ST_COMN_CODE CD
                    , GB_DIC DC
              WHERE   CD.ST_COMN_CODE_MST_CD  = 'APPR_STAT'
              AND   CD.GB_DIC_MST_ID        = DC.GB_DIC_MST_ID
              AND   DC.GB_LANG_ID           = '1'
          ) C3
          ON    C3.CODE  = GDA.APPR_STAT
          LEFT OUTER  JOIN  (
              SELECT  CD.ST_COMN_CODE_ID AS CODE
                    , DC.DIC_NM          AS NAME
              FROM    ST_COMN_CODE CD
                    , GB_DIC DC
              WHERE   CD.ST_COMN_CODE_MST_CD  = 'GOODS_DISCOUNT_TP'
              AND   CD.GB_DIC_MST_ID        = DC.GB_DIC_MST_ID
              AND   DC.GB_LANG_ID           = '1'
          ) C1
          ON    C1.CODE  = GD.DISCOUNT_TP
          LEFT OUTER  JOIN  (
              SELECT  CD.ST_COMN_CODE_ID AS CODE
                    , DC.DIC_NM          AS NAME
              FROM    ST_COMN_CODE CD
                    , GB_DIC DC
              WHERE   CD.ST_COMN_CODE_MST_CD  = 'GOODS_DISCOUNT_METHOD_TP'
              AND   CD.GB_DIC_MST_ID        = DC.GB_DIC_MST_ID
              AND   DC.GB_LANG_ID           = '1'
          ) C2
          ON    C2.CODE  = GD.DISCOUNT_METHOD_TP
          LEFT JOIN (
              SELECT
                  IGP.IL_GOODS_PRICE_ID
                  ,	IGP.IL_GOODS_ID
                  ,	IGP.RECOMMENDED_PRICE
                  ,	IGP.STANDARD_PRICE
                  ,	IGP.DISCOUNT_TP
                  ,	IGP.IL_GOODS_DISCOUNT_ID
                  ,	IGP.PRICE_START_DT
                  ,	IGP.PRICE_END_DT
              FROM
                IL_GOODS_PRICE IGP
              WHERE
                IGP.USE_YN = 'Y'
          ) E ON E.IL_GOODS_ID = GD.IL_GOODS_ID
          AND
          CASE WHEN GD.DISCOUNT_START_DT &lt; NOW() THEN
                GD.DISCOUNT_START_DT BETWEEN E.PRICE_START_DT AND E.PRICE_END_DT
               WHEN GD.DISCOUNT_START_DT &gt;= NOW() THEN
                NOW() BETWEEN  E.PRICE_START_DT AND E.PRICE_END_DT
          END
          <where>
              AND   GD.IL_GOODS_ID = #{ilGoodsId}
              AND   GD.USE_YN='Y'
              AND   GDA.APPR_STAT IN ('APPR_STAT.APPROVED', 'APPR_STAT.APPROVED_BY_SYSTEM')
              <if test='@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(discountTp)'>
                  AND   GD.DISCOUNT_TP = #{discountTp}
              </if>
              <if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(discountTp, 'GOODS_DISCOUNT_TP.EMPLOYEE')">
                  AND   GD.DISCOUNT_START_DT &lt;= NOW()
              </if>
              AND   GD.USE_YN = 'Y'
          </where>
          UNION
          SELECT
              GD.IL_GOODS_DISCOUNT_ID
              , E.IL_GOODS_PRICE_ID
              , GD.IL_GOODS_ID
              , GD.DISCOUNT_TP
              , GD.DISCOUNT_START_DT
              , GD.DISCOUNT_END_DT
              , GD.DISCOUNT_METHOD_TP
              , E.STANDARD_PRICE
              , E.RECOMMENDED_PRICE
              , CASE WHEN GD.DISCOUNT_METHOD_TP = 'GOODS_DISCOUNT_METHOD_TP.FIXED_RATE' THEN
                        E.RECOMMENDED_PRICE - TRUNCATE(E.RECOMMENDED_PRICE - (E.RECOMMENDED_PRICE * (GD.DISCOUNT_RATIO * 0.01)),-1)
                ELSE
                        E.RECOMMENDED_PRICE - GD.DISCOUNT_SALE_PRICE
                END AS DISCOUNT_PRICE
              , CASE WHEN GD.DISCOUNT_METHOD_TP = 'GOODS_DISCOUNT_METHOD_TP.FIXED_RATE' THEN
                        GD.DISCOUNT_RATIO
                ELSE
                        TRUNCATE(100-((GD.DISCOUNT_SALE_PRICE/E.RECOMMENDED_PRICE)*100),0)
                END AS DISCOUNT_RATIO
              , CASE WHEN GD.DISCOUNT_METHOD_TP = 'GOODS_DISCOUNT_METHOD_TP.FIXED_RATE' THEN
                        TRUNCATE(E.RECOMMENDED_PRICE - (E.RECOMMENDED_PRICE * (GD.DISCOUNT_RATIO * 0.01)),-1)
                ELSE
                        GD.DISCOUNT_SALE_PRICE
                END AS DISCOUNT_SALE_PRICE
              , GD.USE_YN
              , GD.CREATE_ID
              , GD.CREATE_DT
              , GD.MODIFY_ID
              , GD.MODIFY_DT
              , 'APPR_STAT.APPROVED' AS STATUS
              , '승인완료' AS STATUS_NM
              , IFNULL(CONCAT(FN_DECRYPT(APPR_REQ_USER.USER_NM), '(', APPR_REQ_USER.LOGIN_ID, ')'), '') AS APPR_REQ_INFO
              , CONCAT(FN_DECRYPT(APPR_USER.USER_NM), '(', APPR_USER.LOGIN_ID, ')') AS APPR_INFO
              , C1.NAME               AS DISCOUNT_TP_NM
              , C2.NAME               AS DISCOUNT_METHOD_TP_NM
          FROM    IL_GOODS_DISCOUNT GD
          LEFT JOIN UR_USER APPR_REQ_USER ON APPR_REQ_USER.UR_USER_ID = '0'
          LEFT JOIN UR_USER APPR_SUB_USER ON APPR_SUB_USER.UR_USER_ID = '0'
          LEFT JOIN UR_USER APPR_USER ON APPR_USER.UR_USER_ID = '0'
          LEFT OUTER  JOIN  (
              SELECT  CD.ST_COMN_CODE_ID AS CODE
                    , DC.DIC_NM          AS NAME
              FROM    ST_COMN_CODE CD
                    , GB_DIC DC
              WHERE   CD.ST_COMN_CODE_MST_CD  = 'GOODS_DISCOUNT_TP'
              AND   CD.GB_DIC_MST_ID        = DC.GB_DIC_MST_ID
              AND   DC.GB_LANG_ID           = '1'
          ) C1
          ON    C1.CODE  = GD.DISCOUNT_TP
          LEFT OUTER  JOIN  (
              SELECT  CD.ST_COMN_CODE_ID AS CODE
                    , DC.DIC_NM          AS NAME
              FROM    ST_COMN_CODE CD
                    , GB_DIC DC
              WHERE   CD.ST_COMN_CODE_MST_CD  = 'GOODS_DISCOUNT_METHOD_TP'
              AND   CD.GB_DIC_MST_ID        = DC.GB_DIC_MST_ID
              AND   DC.GB_LANG_ID           = '1'
          ) C2
          ON    C2.CODE  = GD.DISCOUNT_METHOD_TP
          LEFT JOIN (
          SELECT
              IGP.IL_GOODS_PRICE_ID
              ,	IGP.IL_GOODS_ID
              ,	IGP.RECOMMENDED_PRICE
              ,	IGP.STANDARD_PRICE
              ,	IGP.DISCOUNT_TP
              ,	IGP.IL_GOODS_DISCOUNT_ID
              ,	IGP.PRICE_START_DT
              ,	IGP.PRICE_END_DT
          FROM
            IL_GOODS_PRICE IGP
          WHERE
             IGP.USE_YN = 'Y'
          ) E ON E.IL_GOODS_ID = GD.IL_GOODS_ID
          AND
          CASE WHEN GD.DISCOUNT_START_DT &lt; NOW() THEN
                GD.DISCOUNT_START_DT BETWEEN E.PRICE_START_DT AND E.PRICE_END_DT
               WHEN GD.DISCOUNT_START_DT &gt;= NOW() THEN
                NOW() BETWEEN  E.PRICE_START_DT AND E.PRICE_END_DT
          END
          <where>
              AND   GD.IL_GOODS_ID = #{ilGoodsId}
              AND   GD.USE_YN='Y'
              <if test='@kr.co.pulmuone.v1.comm.util.StringUtil@isNotEmpty(discountTp)'>
                  AND   GD.DISCOUNT_TP = #{discountTp}
              </if>
              <if test="@kr.co.pulmuone.v1.comm.util.StringUtil@isEquals(discountTp, 'GOODS_DISCOUNT_TP.EMPLOYEE')">
                  AND   GD.DISCOUNT_START_DT &lt;= NOW()
              </if>
              AND  NOT EXISTS (
              SELECT  1
                FROM  IL_GOODS_DISCOUNT_APPR  IGDA
              WHERE  IGDA.IL_GOODS_DISCOUNT_ID = GD.IL_GOODS_DISCOUNT_ID
              AND IGDA.DISCOUNT_TP = GD.DISCOUNT_TP
              AND IGDA.APPR_STAT IN ('APPR_STAT.APPROVED', 'APPR_STAT.APPROVED_BY_SYSTEM')
              )
              AND   GD.USE_YN = 'Y'
          </where>
      ) AS UI
      ORDER BY  UI.DISCOUNT_START_DT DESC, UI.DISCOUNT_END_DT DESC
                , CASE  WHEN UI.DISCOUNT_TP = 'GOODS_DISCOUNT_TP.PRIORITY'   THEN 1
                        WHEN UI.DISCOUNT_TP = 'GOODS_DISCOUNT_TP.ERP_EVENT'  THEN 2
                        WHEN UI.DISCOUNT_TP = 'GOODS_DISCOUNT_TP.IMMEDIATE'   THEN 3
                  ELSE 99
                  END ASC
    <include refid="_common.pageLimit"/>
  </select>

  <!--───────────────────────────────────────────────────────────────────────
	 * description 		: 묶음상품 > 임직원 할인 정보 > 임직원 개별할인 정보 > 변경이력 보기
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2020.12.30		임상건		  최초생성
	 * @ 승인 프로세스 미적용 상태임
	────────────────────────────────────────────────────────────────────────-->
	<resultMap type="kr.co.pulmuone.v1.goods.goods.dto.vo.GoodsPriceInfoResultVo" id="goodsPackageEmployeeDiscountMap">
		<result column="ROW_NUM"							property="rowNum"/>
		<result column="ROW_GROUP_NUM"						property="rowGroupNum"/>
		<result column="ROW_COUNT"							property="rowCount"/>
		<result column="TODAY_ROW"							property="todayRow"/>
		<result column="GOODS_ID"							property="goodsId"/>
		<result column="GOODS_DISCOUNT_ID"					property="goodsDiscountId"/>
		<result column="DISCOUNT_TYPE_CODE"					property="discountTypeCode"/>
		<result column="DISCOUNT_TYPE_CODE_NAME"			property="discountTypeCodeName"/>
		<result column="APPROVAL_STATUS_CODE"				property="approvalStatusCode"/>
		<result column="APPROVAL_STATUS_CODE_NAME"			property="approvalStatusCodeName"/>
		<result column="DISCOUNT_START_DT_TIME"				property="discountStartDateTime"/>
		<result column="DISCOUNT_END_DT_TIME"				property="discountEndDateTime"/>
		<result column="DISCOUNT_METHOD_TYPE_CODE"			property="discountMethodTypeCode"/>
		<result column="DISCOUNT_METHOD_TYPE_CODE_NAME"		property="discountMethodTypeCodeName"/>
		<result column="APPROVE_ID"							property="approveId"/>
		<result column="APPROVE_NM"							property="approveName"/>
		<result column="GOODS_NM"							property="goodsName"/>
		<result column="GOODS_QTY"							property="goodsQuantity"/>
		<result column="RECOMMENDED_PRICE"					property="recommendedPrice"/>
		<result column="RECOMMENDED_TOTAL_PRICE"			property="recommendedTotalPrice"/>
		<result column="DISCOUNT_RATIO"						property="discountRatio"/>
		<result column="DISCOUNT_SALE_PRICE"				property="discountSalePrice"/>
	</resultMap>
	<select id="goodsPackageEmployeeDiscountHistoryGridList" resultMap="goodsPackageEmployeeDiscountMap">
		/* price.goodsPackageEmployeeDiscountHistoryGridList */
		SELECT SQL_CALC_FOUND_ROWS
			@rownum:=@rownum+1 AS ROW_NUM
		,	(CASE @discountGroupId WHEN GPDEL.GOODS_DISCOUNT_ID THEN @rowGroupNum:=@rowGroupNum+1 ELSE @rowGroupNum:=1 END) AS ROW_GROUP_NUM
		,	(@discountGroupId:=GPDEL.GOODS_DISCOUNT_ID) AS DISCOUNT_GROUP_ID
		,	GPDEL.*
		FROM
		(
			SELECT
				IGDA.IL_GOODS_ID AS GOODS_ID														/* 상품ID */
			,	'시스템' AS REG_TP_NM															/* 구분 */
			,	IGDA.IL_GOODS_DISCOUNT_ID AS GOODS_DISCOUNT_ID									/* 상품할인ID */
			,	IGDA.IL_GOODS_DISCOUNT_APPR_ID AS GOODS_DISCOUNT_APPR_ID						/* 상품할인승인ID */
			,	IGDA.DISCOUNT_TP AS DISCOUNT_TYPE_CODE											/* 상품할인유형코드 */
			,	B.NAME AS DISCOUNT_TYPE_CODE_NAME												/* 상품할인유형코드명 */
			,	IGDA.APPR_STAT AS APPROVAL_STATUS_CODE											/* 승인상태코드 */
			,	G.NAME AS APPROVAL_STATUS_CODE_NAME												/* 승인상태코드명 */
			,	DATE_FORMAT(IGDA.DISCOUNT_START_DT, '%Y-%m-%d %H:%i') AS DISCOUNT_START_DT_TIME	/* 할인시작일(시간, 분 포함)*/
			,	DATE_FORMAT(IGDA.DISCOUNT_END_DT, '%Y-%m-%d %H:%i')  AS DISCOUNT_END_DT_TIME		/* 할인종료일(시간, 분 포함)*/
			,	IGDA.DISCOUNT_METHOD_TP AS DISCOUNT_METHOD_TYPE_CODE								/* 상품할인방법유형코드 */
			,	C.NAME AS DISCOUNT_METHOD_TYPE_CODE_NAME										/* 상품할인방법유형코드명 */
			,	IGDA.APPR_REQ_USER_ID																/* 승인요청자 ID */
			,	FN_DECRYPT(APPR_REQ_USER.USER_NM) AS APPR_REQ_NM								/* 승인요청자명 */
			,	APPR_REQ_USER.LOGIN_ID AS APPR_REQ_USER_LOGIN_ID								/* 승인요청자 LOGIN ID */
			,	CONCAT(FN_DECRYPT(APPR_REQ_USER.USER_NM), '(', APPR_REQ_USER.LOGIN_ID, ')') AS APPR_REQ_INFO
			,	IGDA.APPR_SUB_USER_ID																/* 1차승인자 ID */
			,	FN_DECRYPT(APPR_SUB_USER.USER_NM) AS APPR_SUB_NM								/* 1차승인자명 */
			,	APPR_SUB_USER.LOGIN_ID AS APPR_SUB_USER_LOGIN_ID								/* 1차승인자 LOGIN ID */
			,	IGDA.APPR_USER_ID																	/* 2차승인자 ID */
			,	FN_DECRYPT(APPR_USER.USER_NM) AS APPR_NM										/* 2차승인자명 */
			,	APPR_USER.LOGIN_ID AS APPR_USER_LOGIN_ID										/* 2차승인자 LOGIN ID */
			,	CASE WHEN APPR_SUB_USER.LOGIN_ID IS NOT NULL THEN
					CONCAT(FN_DECRYPT(APPR_SUB_USER.USER_NM), '(', APPR_SUB_USER.LOGIN_ID, ')&lt;BR/&gt;', FN_DECRYPT(APPR_USER.USER_NM), '(', APPR_USER.LOGIN_ID, ')')
				ELSE
					CONCAT(FN_DECRYPT(APPR_USER.USER_NM), '(', APPR_USER.LOGIN_ID, ')')
				END	AS APPR_INFO
			,	IG.GOODS_NM
			,	COALESCE(IGPGM.TARGET_GOODS_ID, '합계') AS TARGET_GOODS_ID						/* 구성 상품ID */
			,	SUM(IGPGM.GOODS_QTY) AS GOODS_QTY												/* 구성수량 */
			,	SUM(E.RECOMMENDED_PRICE) AS RECOMMENDED_PRICE									/* 정상가 */
			,	SUM(E.RECOMMENDED_PRICE * IGPGM.GOODS_QTY) AS RECOMMENDED_TOTAL_PRICE			/* 정상가 총액 */
			,	AVG(IGPIFDPA.DISCOUNT_RATIO) AS DISCOUNT_RATIO									/* 할인율 */
			,	SUM(TRUNCATE(E.RECOMMENDED_PRICE - (E.RECOMMENDED_PRICE * (IFNULL(IGPIFDPA.DISCOUNT_RATIO,0)) * 0.01),-1) * IGPGM.GOODS_QTY) AS DISCOUNT_SALE_PRICE	/* 임직원 할인가 */
			,	IGPGM.BASE_GOODS_YN
			,	CASE
					WHEN SYSDATE() BETWEEN IGDA.DISCOUNT_START_DT AND IGDA.DISCOUNT_END_DT THEN 'Proceeding'
					ELSE 'Reservation'
				END EVENT_PROC_STATUS
			,	(SELECT COUNT(IL_GOODS_PACKAGE_GOODS_MAPPING_ID) FROM IL_GOODS_PACKAGE_GOODS_MAPPING WHERE IL_GOODS_ID = #{ilGoodsId} AND GOODS_TP NOT IN('GOODS_TYPE.GIFT', 'GOODS_TYPE.GIFT_FOOD_MARKETING')) AS ROW_COUNT
			,	CASE WHEN SYSDATE() BETWEEN IGDA.DISCOUNT_START_DT AND IGDA.DISCOUNT_END_DT THEN TRUE ELSE FALSE END TODAY_ROW
			,	IGPGM.IL_GOODS_PACKAGE_GOODS_MAPPING_ID
			FROM
				IL_GOODS_DISCOUNT_APPR IGDA
			INNER JOIN IL_GOODS_PACKAGE_ITEM_FIXED_DISCOUNT_PRICE_APPR IGPIFDPA ON IGDA.IL_GOODS_DISCOUNT_APPR_ID = IGPIFDPA.IL_GOODS_DISCOUNT_APPR_ID
			INNER JOIN IL_GOODS_PACKAGE_GOODS_MAPPING IGPGM ON IGPIFDPA.IL_GOODS_PACKAGE_GOODS_MAPPING_ID = IGPGM.IL_GOODS_PACKAGE_GOODS_MAPPING_ID
			LEFT JOIN (
				SELECT
					A.ST_COMN_CODE_ID AS CODE
					, B.DIC_NM AS NAME
				FROM
					ST_COMN_CODE A
				INNER JOIN GB_DIC B ON A.GB_DIC_MST_ID = B.GB_DIC_MST_ID AND B.GB_LANG_ID = '1'
				WHERE
					A.ST_COMN_CODE_MST_CD = 'APPR_STAT'
				AND A.USE_YN = UPPER('Y')
			) G ON IGDA.APPR_STAT = G.CODE
			LEFT JOIN UR_USER APPR_REQ_USER ON APPR_REQ_USER.UR_USER_ID = IGDA.APPR_REQ_USER_ID
			LEFT JOIN UR_USER APPR_SUB_USER ON APPR_SUB_USER.UR_USER_ID = IGDA.APPR_SUB_USER_ID
			LEFT JOIN UR_USER APPR_USER ON APPR_USER.UR_USER_ID = IGDA.APPR_USER_ID
			LEFT JOIN (
				SELECT
					A.ST_COMN_CODE_ID AS CODE
					, B.DIC_NM AS NAME
				FROM
					ST_COMN_CODE A
				INNER JOIN GB_DIC B ON A.GB_DIC_MST_ID = B.GB_DIC_MST_ID AND B.GB_LANG_ID = '1'
				WHERE
					A.ST_COMN_CODE_MST_CD = 'GOODS_DISCOUNT_TP'
				AND A.USE_YN = UPPER('Y')
			) B ON IGDA.DISCOUNT_TP = B.CODE
			LEFT JOIN (
				SELECT
					A.ST_COMN_CODE_ID AS CODE
					, B.DIC_NM AS NAME
				FROM
					ST_COMN_CODE A
				INNER JOIN GB_DIC B ON A.GB_DIC_MST_ID = B.GB_DIC_MST_ID AND B.GB_LANG_ID = '1'
				WHERE
					A.ST_COMN_CODE_MST_CD = 'GOODS_DISCOUNT_METHOD_TP'
				AND A.USE_YN = UPPER('Y')
			) C ON IGDA.DISCOUNT_METHOD_TP = C.CODE
			INNER JOIN IL_GOODS IG ON IGPGM.TARGET_GOODS_ID = IG.IL_GOODS_ID
			LEFT JOIN (
				SELECT
					IGP.IL_GOODS_PRICE_ID
				,	IGP.IL_GOODS_ID
				,	IGP.RECOMMENDED_PRICE
				,	IGP.STANDARD_PRICE
				,	IGP.DISCOUNT_TP
				,	IGP.IL_GOODS_DISCOUNT_ID
				,	IGP.PRICE_START_DT
				,	IGP.PRICE_END_DT
				FROM
					IL_GOODS_PRICE IGP
				WHERE
					IGP.USE_YN = 'Y'
			) E ON E.IL_GOODS_ID = IGPGM.TARGET_GOODS_ID
				AND
					CASE WHEN IGDA.DISCOUNT_START_DT &lt; NOW() THEN
						IGDA.DISCOUNT_START_DT BETWEEN E.PRICE_START_DT AND E.PRICE_END_DT
					WHEN IGDA.DISCOUNT_START_DT &gt;= NOW() THEN
						NOW() BETWEEN  E.PRICE_START_DT AND E.PRICE_END_DT
					END
			WHERE
				IGDA.IL_GOODS_ID = #{ilGoodsId}
			AND	IGDA.DISCOUNT_TP = 'GOODS_DISCOUNT_TP.EMPLOYEE'
			AND	IGPGM.GOODS_TP NOT IN ('GOODS_TYPE.GIFT', 'GOODS_TYPE.GIFT_FOOD_MARKETING')
			AND	( (SYSDATE() BETWEEN IGDA.DISCOUNT_START_DT AND IGDA.DISCOUNT_END_DT) OR (SYSDATE() &lt; IGDA.DISCOUNT_START_DT))
			AND	IGDA.APPR_STAT IN ('APPR_STAT.APPROVED', 'APPR_STAT.APPROVED_BY_SYSTEM')
			GROUP BY
				IGDA.IL_GOODS_DISCOUNT_ID
			,	IGPGM.TARGET_GOODS_ID
			WITH ROLLUP
		) GPDEL
		INNER JOIN (SELECT @discountGroupId:='', @rownum:=0, @rowGroupNum:=0) F
		WHERE
			GPDEL.GOODS_DISCOUNT_ID IS NOT NULL
		ORDER BY
			GPDEL.DISCOUNT_START_DT_TIME
		,	GPDEL.GOODS_DISCOUNT_ID IS NULL
		,	GPDEL.GOODS_DISCOUNT_ID
		,	GPDEL.TARGET_GOODS_ID = '합계'
		,	GPDEL.BASE_GOODS_YN DESC
		,	GPDEL.IL_GOODS_PACKAGE_GOODS_MAPPING_ID
		<include refid="_common.groupPageLimit"/>
	</select>

	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 묶음상품 > 임직원 할인 정보 > 임직원 할인 가격정보 > 변경이력 보기
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2021.01.18		임상건		  최초생성
	 * @ 승인 프로세스 미적용 상태임
	────────────────────────────────────────────────────────────────────────-->
	<resultMap type="kr.co.pulmuone.v1.goods.goods.dto.vo.GoodsPriceInfoResultVo" id="goodsPackageEmployeePriceHistoryMap">
		<result column="ROW_NUM"							property="rowNum"/>
		<result column="ROW_GROUP_NUM"						property="rowGroupNum"/>
		<result column="ROW_COUNT"							property="rowCount"/>
		<result column="TODAY_ROW"							property="todayRow"/>
		<result column="GOODS_ID"							property="goodsId"/>
		<result column="EMPLOYEE_PRICE_GROUP_ID"			property="employeePriceGroupId"/>
		<result column="DISCOUNT_TYPE_CODE"					property="discountTypeCode"/>
		<result column="DISCOUNT_TYPE_CODE_NAME"			property="discountTypeCodeName"/>
		<result column="APPROVAL_STATUS_CODE"				property="approvalStatusCode"/>
		<result column="APPROVAL_STATUS_CODE_NAME"			property="approvalStatusCodeName"/>
		<result column="DISCOUNT_START_DT_TIME"				property="discountStartDateTime"/>
		<result column="DISCOUNT_END_DT_TIME"				property="discountEndDateTime"/>
		<result column="RECOMMENDED_PRICE"					property="recommendedPrice"/>
		<result column="STANDARD_PRICE"						property="standardPrice"/>
		<result column="APPROVE_ID"							property="approveId"/>
		<result column="APPROVE_NM"							property="approveName"/>
		<result column="DISCOUNT_RATIO"						property="discountRatio"/>
		<result column="DISCOUNT_SALE_PRICE"				property="discountSalePrice"/>
		<result column="GOODS_NM"							property="goodsName"/>
		<result column="GOODS_QTY"							property="goodsQuantity"/>
		<result column="RECOMMENDED_TOTAL_PRICE"			property="recommendedTotalPrice"/>
	</resultMap>
	<select id="goodsPackageEmployeePriceHistroyList" resultMap="goodsPackageEmployeePriceHistoryMap">
		/* price.goodsPackageEmployeePriceHistroyList */
		SELECT SQL_CALC_FOUND_ROWS
			@rownum:=@rownum+1 AS ROW_NUM
		,	(CASE @employeePriceGroupId WHEN GPDEL.IL_GOODS_EMPLOYEE_PRICE_ID THEN @rowGroupNum:=@rowGroupNum+1 ELSE @rowGroupNum:=1 END) AS ROW_GROUP_NUM
		,	(@employeePriceGroupId:=GPDEL.IL_GOODS_EMPLOYEE_PRICE_ID) AS EMPLOYEE_PRICE_GROUP_ID
		,	GPDEL.*
		FROM
		(
			SELECT
				IGPGM.IL_GOODS_ID																/* 상품ID */
			,	'시스템' AS REG_TP_NM															/* 구분 */
			,	IGEP.IL_GOODS_EMPLOYEE_PRICE_ID													/* 상품 임직원 가격 ID */
			,	IGEP.IL_GOODS_DISCOUNT_ID AS GOODS_DISCOUNT_ID									/* 상품할인ID */
			,	IGEP.DISCOUNT_TP AS DISCOUNT_TYPE_CODE											/* 상품할인유형코드 */
			,	B.NAME AS DISCOUNT_TYPE_CODE_NAME												/* 상품할인유형코드명 */
			,	'APPR_STAT.APPROVED' AS APPROVAL_STATUS_CODE								/* 승인상태코드 (승인프로세스가 정의되지 않아서 하드코딩으로 처리)  */
			,	CASE WHEN IGEP.DISCOUNT_TP != 'GOODS_DISCOUNT_TP.ERP_EVENT' THEN '승인완료'
				ELSE '' END AS APPROVAL_STATUS_CODE_NAME										/* 승인상태코드명 (승인프로세스가 정의되지 않아서 하드코딩으로 처리)  */
			,	DATE_FORMAT(IGEP.PRICE_START_DT, '%Y-%m-%d %H:%i') AS DISCOUNT_START_DT_TIME	/* 할인시작일(시간, 분 포함)*/
			,	DATE_FORMAT(IGEP.PRICE_END_DT, '%Y-%m-%d %H:%i') AS DISCOUNT_END_DT_TIME		/* 할인종료일(시간, 분 포함)*/
			,	99 AS APPROVE_ID
			,	'나승인' AS APPROVE_NM
			,	IG.GOODS_NM
			,	COALESCE(IGPGM.TARGET_GOODS_ID, '합계') AS TARGET_GOODS_ID
			,	SUM(IGPGM.GOODS_QTY) AS GOODS_QTY												/* 구성수량 */
			,	SUM(IGP.RECOMMENDED_PRICE) AS RECOMMENDED_PRICE									/* 품목 정상가 */
			,	SUM(IGP.STANDARD_PRICE) AS STANDARD_PRICE										/* 품목 원가 */
			,	SUM(IGP.RECOMMENDED_PRICE * IGPGM.GOODS_QTY) AS RECOMMENDED_TOTAL_PRICE			/* 정상가 총액 */
			,	AVG(
					CASE
						WHEN IGEP.IL_GOODS_DISCOUNT_ID IS NOT NULL THEN
							IGPIFDP.DISCOUNT_RATIO
					ELSE
						IFNULL(PEDBG.DISCOUNT_RATIO, 0)
					END
				) AS DISCOUNT_RATIO																/* 할인율 */
			,	SUM(TRUNCATE((IGP.RECOMMENDED_PRICE * IGPGM.GOODS_QTY) - ((IGP.RECOMMENDED_PRICE * IGPGM.GOODS_QTY) * (IFNULL(
					CASE
						WHEN IGEP.IL_GOODS_DISCOUNT_ID IS NOT NULL THEN
							IGPIFDP.DISCOUNT_RATIO
					ELSE
						IFNULL(PEDBG.DISCOUNT_RATIO, 0)
					END
					,	0) * 0.01)),-1)) AS DISCOUNT_SALE_PRICE									/* 임직원 할인가 */
			,	IGPGM.BASE_GOODS_YN
			,	CASE
					WHEN NOW() BETWEEN IGEP.PRICE_START_DT AND IGEP.PRICE_END_DT THEN 'Proceeding'
					ELSE 'Reservation'
				END EVENT_PROC_STATUS
			,	(SELECT COUNT(IL_GOODS_PACKAGE_GOODS_MAPPING_ID) FROM IL_GOODS_PACKAGE_GOODS_MAPPING WHERE IL_GOODS_ID = #{ilGoodsId} AND GOODS_TP NOT IN ('GOODS_TYPE.GIFT', 'GOODS_TYPE.GIFT_FOOD_MARKETING')) AS ROW_COUNT
			,	CASE WHEN SYSDATE() BETWEEN IGEP.PRICE_START_DT AND IGEP.PRICE_END_DT THEN TRUE ELSE FALSE END TODAY_ROW
			FROM
				IL_GOODS_PACKAGE_GOODS_MAPPING IGPGM
			INNER JOIN IL_GOODS IG ON IG.IL_GOODS_ID = IGPGM.TARGET_GOODS_ID
			LEFT JOIN IL_GOODS_EMPLOYEE_PRICE IGEP ON IGEP.IL_GOODS_ID = IGPGM.IL_GOODS_ID
			LEFT JOIN (
				SELECT
					*
				FROM
					IL_GOODS_PRICE
				WHERE
					USE_YN ='Y'
			) IGP ON IGP.IL_GOODS_ID = IGPGM.TARGET_GOODS_ID AND IGEP.PRICE_START_DT BETWEEN IGP.PRICE_START_DT AND IGP.PRICE_END_DT
			INNER JOIN IL_ITEM II ON II.IL_ITEM_CD = IG.IL_ITEM_CD
			LEFT JOIN IL_GOODS_PACKAGE_ITEM_FIXED_DISCOUNT_PRICE IGPIFDP ON
				IGEP.IL_GOODS_DISCOUNT_ID = IGPIFDP.IL_GOODS_DISCOUNT_ID
			AND	IGPGM.IL_GOODS_PACKAGE_GOODS_MAPPING_ID = IGPIFDP.IL_GOODS_PACKAGE_GOODS_MAPPING_ID
			LEFT JOIN PS_EMPL_DISC_BRAND_GRP_BRAND PEDBGB ON II.UR_BRAND_ID = PEDBGB.UR_BRAND_ID
			LEFT JOIN PS_EMPL_DISC_BRAND_GRP PEDBG ON PEDBG.PS_EMPL_DISC_BRAND_GRP_ID = PEDBGB.PS_EMPL_DISC_BRAND_GRP_ID
			INNER JOIN IL_GOODS IGM ON IGM.IL_GOODS_ID = IGPGM.IL_GOODS_ID
			LEFT JOIN (
				SELECT
					A.ST_COMN_CODE_ID AS CODE
					, B.DIC_NM AS NAME
				FROM
					ST_COMN_CODE A
				INNER JOIN GB_DIC B ON A.GB_DIC_MST_ID = B.GB_DIC_MST_ID AND B.GB_LANG_ID = '1'
				WHERE
					A.ST_COMN_CODE_MST_CD = 'GOODS_DISCOUNT_TP'
				AND A.USE_YN = UPPER('Y')
			) B ON IGEP.DISCOUNT_TP = B.CODE
			WHERE
				IGPGM.IL_GOODS_ID = #{ilGoodsId}
			AND	IGPGM.GOODS_TP NOT IN ('GOODS_TYPE.GIFT', 'GOODS_TYPE.GIFT_FOOD_MARKETING')
			AND IGEP.USE_YN = 'Y'
			GROUP BY
				IGEP.IL_GOODS_EMPLOYEE_PRICE_ID
			,	IGPGM.TARGET_GOODS_ID
			WITH ROLLUP
		) GPDEL
		INNER JOIN (SELECT @employeePriceGroupId:='', @rownum:=0, @rowGroupNum:=0) F
		WHERE
			GPDEL.IL_GOODS_EMPLOYEE_PRICE_ID IS NOT NULL
		ORDER BY
			GPDEL.IL_GOODS_EMPLOYEE_PRICE_ID IS NULL
		,	GPDEL.IL_GOODS_EMPLOYEE_PRICE_ID
		,	GPDEL.TARGET_GOODS_ID = '합계'
		,	GPDEL.BASE_GOODS_YN DESC
		,	GPDEL.TARGET_GOODS_ID
		<include refid="_common.groupPageLimit"/>
	</select>


	<resultMap type="kr.co.pulmuone.v1.goods.goods.dto.vo.GoodsPriceInfoResultVo" id="goodsPackageGoodsMappingPriceMap">
		<result column="GOODS_ID"					property="goodsId"/>
		<result column="BASE_GOODS_YN"				property="baseGoodsYn"/>
		<result column="GOODS_TP_NM"				property="goodsTypeName"/>
		<result column="GOODS_NM"					property="goodsName"/>
		<result column="TAX_NM"						property="taxName"/>
		<result column="GOODS_QTY"					property="goodsQuantity"/>
		<result column="RECOMMENDED_TOTAL_PRICE"	property="recommendedTotalPrice"/>
		<result column="DISCOUNT_TOTAL_PRICE"		property="discountTotalPrice"/>
		<result column="DISCOUNT_UNIT_SALE_PRICE"	property="discountUnitSalePrice"/>
		<result column="DISCOUNT_SALE_PRICE"		property="discountSalePrice"/>
		<result column="DISCOUNT_RATIO"				property="discountRatio"/>
	</resultMap>
	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 묶음상품 > 즉시할인, 기본할인 > 상세내역 > 상세보기
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2021.03.02		임상건		  최초생성
	────────────────────────────────────────────────────────────────────────-->
	<select id="goodsPackageGoodsMappingDiscount" resultMap="goodsPackageGoodsMappingPriceMap">
		/* price.goodsPackageGoodsMappingDiscount */
		SELECT SQL_CALC_FOUND_ROWS
			GPGMP.*
		FROM
		(
			SELECT
				IGP.IL_GOODS_PRICE_ID
			,	COALESCE(IGPGM.TARGET_GOODS_ID, '합계') AS GOODS_ID
			,	IGPGM.BASE_GOODS_YN
			,	TARGET_IG.GOODS_TP
			,	GOODS_TP.NAME AS GOODS_TP_NM
			,	TARGET_IG.GOODS_NM
			,	CASE WHEN TARGET_II.TAX_YN = 'Y' THEN '과세'
				WHEN TARGET_II.TAX_YN = 'N' THEN '면세'
				END AS TAX_NM
			,	SUM(IGPGM.GOODS_QTY) AS GOODS_QTY
			,	SUM((E.RECOMMENDED_PRICE * IGPGM.GOODS_QTY)) AS RECOMMENDED_TOTAL_PRICE
			,	SUM((E.RECOMMENDED_PRICE-IGPIFDP.UNIT_SALE_PRICE) * IGPGM.GOODS_QTY) AS DISCOUNT_TOTAL_PRICE
			,	SUM(IGPIFDP.UNIT_SALE_PRICE) AS DISCOUNT_UNIT_SALE_PRICE
			,	SUM(IGPIFDP.SALE_PRICE) AS DISCOUNT_SALE_PRICE
			,	AVG(CASE WHEN IGD.DISCOUNT_METHOD_TP = 'GOODS_DISCOUNT_METHOD_TP.FIXED_RATE' THEN
					IGD.DISCOUNT_RATIO
				ELSE
					TRUNCATE(100-((IGPIFDP.UNIT_SALE_PRICE/E.RECOMMENDED_PRICE)*100),1)
				END) AS DISCOUNT_RATIO
			FROM
				IL_GOODS_DISCOUNT IGD
			LEFT JOIN (
				SELECT
					IGP.IL_GOODS_PRICE_ID
				,	IGP.IL_GOODS_ID
				,	IGP.RECOMMENDED_PRICE
				,	IGP.STANDARD_PRICE
				,	IGP.DISCOUNT_TP
				,	IGP.IL_GOODS_DISCOUNT_ID
				,	IGP.PRICE_START_DT
				,	IGP.PRICE_END_DT
				FROM
					IL_GOODS_PRICE IGP
				WHERE
					IGP.USE_YN = 'Y'
			) IGP ON IGP.IL_GOODS_ID = IGD.IL_GOODS_ID
			AND
				CASE WHEN IGD.DISCOUNT_START_DT &lt; NOW() THEN
					IGD.DISCOUNT_START_DT BETWEEN IGP.PRICE_START_DT AND IGP.PRICE_END_DT
				WHEN IGD.DISCOUNT_START_DT &gt;= NOW() THEN
					NOW() BETWEEN IGP.PRICE_START_DT AND IGP.PRICE_END_DT
				END
			INNER JOIN IL_GOODS_PACKAGE_ITEM_FIXED_DISCOUNT_PRICE IGPIFDP ON IGD.IL_GOODS_DISCOUNT_ID = IGPIFDP.IL_GOODS_DISCOUNT_ID
			INNER JOIN IL_GOODS_PACKAGE_GOODS_MAPPING IGPGM ON IGPIFDP.IL_GOODS_PACKAGE_GOODS_MAPPING_ID = IGPGM.IL_GOODS_PACKAGE_GOODS_MAPPING_ID
			INNER JOIN IL_GOODS TARGET_IG ON TARGET_IG.IL_GOODS_ID = IGPGM.TARGET_GOODS_ID
			INNER JOIN IL_ITEM TARGET_II ON TARGET_II.IL_ITEM_CD = TARGET_IG.IL_ITEM_CD
			LEFT JOIN (
				SELECT
					A.ST_COMN_CODE_ID AS CODE
					, B.DIC_NM AS NAME
				FROM
					ST_COMN_CODE A
				INNER JOIN GB_DIC B ON A.GB_DIC_MST_ID = B.GB_DIC_MST_ID AND B.GB_LANG_ID = '1'
				WHERE
					A.ST_COMN_CODE_MST_CD = 'GOODS_TYPE'
				AND A.USE_YN = UPPER('Y')
			) GOODS_TP ON GOODS_TP.CODE = TARGET_IG.GOODS_TP
			LEFT JOIN (
				SELECT
					IGP.IL_GOODS_PRICE_ID
				,	IGP.IL_GOODS_ID
				,	IGP.RECOMMENDED_PRICE
				,	IGP.STANDARD_PRICE
				,	IGP.DISCOUNT_TP
				,	IGP.IL_GOODS_DISCOUNT_ID
				,	IGP.PRICE_START_DT
				,	IGP.PRICE_END_DT
				FROM
					IL_GOODS_PRICE IGP
				WHERE
					IGP.USE_YN = 'Y'
			) E ON E.IL_GOODS_ID = TARGET_IG.IL_GOODS_ID
			AND
				CASE WHEN IGD.DISCOUNT_START_DT &lt; NOW() THEN
					IGD.DISCOUNT_START_DT BETWEEN E.PRICE_START_DT AND E.PRICE_END_DT
				WHEN IGD.DISCOUNT_START_DT &gt;= NOW() THEN
					NOW() BETWEEN E.PRICE_START_DT AND E.PRICE_END_DT
				END
			WHERE
				IGD.IL_GOODS_DISCOUNT_ID = #{ilGoodsDiscountId}
				AND IGD.USE_YN = 'Y'
			GROUP BY
				IGP.IL_GOODS_PRICE_ID
			,	IGPGM.TARGET_GOODS_ID
			WITH ROLLUP
		) GPGMP
		WHERE
			GPGMP.IL_GOODS_PRICE_ID IS NOT NULL
		ORDER BY
			GPGMP.IL_GOODS_PRICE_ID
		,	GPGMP.GOODS_ID = '합계'
		,	GPGMP.BASE_GOODS_YN DESC
		,	GPGMP.GOODS_ID
	</select>

	<!--───────────────────────────────────────────────────────────────────────
	 * description 		: 묶음상품 > 판매 가격정보 > 변경이력 보기 > 상세보기
	 * @
	 * @ 수정일			수정자		  수정내용
	 * @ ──────────────────────────────────────────────────────────────────────
	 * @ 2021.03.02		임상건		  최초생성
	────────────────────────────────────────────────────────────────────────-->
	<select id="goodsPackageGoodsMappingPrice" resultMap="goodsPackageGoodsMappingPriceMap">
		/* price.goodsPackageGoodsMappingPrice */
		SELECT SQL_CALC_FOUND_ROWS
			GPGMP.*
		FROM
		(
			SELECT
				IGP.IL_GOODS_PRICE_ID
			,	COALESCE(IGPGM.TARGET_GOODS_ID, '합계') AS GOODS_ID
			,	IGPGM.BASE_GOODS_YN
			,	TARGET_IG.GOODS_TP
			,	GOODS_TP.NAME AS GOODS_TP_NM
			,	TARGET_IG.GOODS_NM
			,	CASE WHEN TARGET_II.TAX_YN = 'Y' THEN '과세'
				WHEN TARGET_II.TAX_YN = 'N' THEN '면세'
				END AS TAX_NM
			,	SUM(IGPGM.GOODS_QTY) AS GOODS_QTY
			,	SUM((E.RECOMMENDED_PRICE * IGPGM.GOODS_QTY)) AS RECOMMENDED_TOTAL_PRICE
			,	SUM((E.RECOMMENDED_PRICE-IGPIFDP.UNIT_SALE_PRICE) * IGPGM.GOODS_QTY) AS DISCOUNT_TOTAL_PRICE
			,	SUM(IGPIFDP.UNIT_SALE_PRICE) AS DISCOUNT_UNIT_SALE_PRICE
			,	SUM(IGPIFDP.SALE_PRICE) AS DISCOUNT_SALE_PRICE
			,	AVG(CASE WHEN IGD.DISCOUNT_METHOD_TP = 'GOODS_DISCOUNT_METHOD_TP.FIXED_RATE' THEN
					IGD.DISCOUNT_RATIO
				ELSE
					TRUNCATE(100-((IGPIFDP.UNIT_SALE_PRICE/E.RECOMMENDED_PRICE)*100),1)
				END) AS DISCOUNT_RATIO
			FROM
				IL_GOODS_PRICE IGP
			INNER JOIN IL_GOODS_DISCOUNT IGD ON IGD.IL_GOODS_DISCOUNT_ID = IGP.IL_GOODS_DISCOUNT_ID
			INNER JOIN IL_GOODS_PACKAGE_ITEM_FIXED_DISCOUNT_PRICE IGPIFDP ON IGD.IL_GOODS_DISCOUNT_ID = IGPIFDP.IL_GOODS_DISCOUNT_ID
			INNER JOIN IL_GOODS_PACKAGE_GOODS_MAPPING IGPGM ON IGPIFDP.IL_GOODS_PACKAGE_GOODS_MAPPING_ID = IGPGM.IL_GOODS_PACKAGE_GOODS_MAPPING_ID
			INNER JOIN IL_GOODS TARGET_IG ON TARGET_IG.IL_GOODS_ID = IGPGM.TARGET_GOODS_ID
			INNER JOIN IL_ITEM TARGET_II ON TARGET_II.IL_ITEM_CD = TARGET_IG.IL_ITEM_CD
			LEFT JOIN (
				SELECT
					A.ST_COMN_CODE_ID AS CODE
					, B.DIC_NM AS NAME
				FROM
					ST_COMN_CODE A
				INNER JOIN GB_DIC B ON A.GB_DIC_MST_ID = B.GB_DIC_MST_ID AND B.GB_LANG_ID = '1'
				WHERE
					A.ST_COMN_CODE_MST_CD = 'GOODS_TYPE'
				AND A.USE_YN = UPPER('Y')
			) GOODS_TP ON GOODS_TP.CODE = TARGET_IG.GOODS_TP
			LEFT JOIN (
				SELECT
					IGP.IL_GOODS_PRICE_ID
				,	IGP.IL_GOODS_ID
				,	IGP.RECOMMENDED_PRICE
				,	IGP.STANDARD_PRICE
				,	IGP.DISCOUNT_TP
				,	IGP.IL_GOODS_DISCOUNT_ID
				,	IGP.PRICE_START_DT
				,	IGP.PRICE_END_DT
				FROM
					IL_GOODS_PRICE IGP
				WHERE
					IGP.USE_YN = 'Y'
			) E ON E.IL_GOODS_ID = TARGET_IG.IL_GOODS_ID
			AND
				CASE WHEN IGP.PRICE_START_DT &lt; NOW() THEN
					IGP.PRICE_START_DT BETWEEN E.PRICE_START_DT AND E.PRICE_END_DT
				WHEN IGP.PRICE_START_DT &gt;= NOW() THEN
					NOW() BETWEEN  E.PRICE_START_DT AND E.PRICE_END_DT
				END
			WHERE
				IGP.IL_GOODS_PRICE_ID = #{ilGoodsPriceId}
			GROUP BY
				IGP.IL_GOODS_PRICE_ID
			,	IGPGM.TARGET_GOODS_ID
			WITH ROLLUP
		) GPGMP
		WHERE
			GPGMP.IL_GOODS_PRICE_ID IS NOT NULL
		ORDER BY
			GPGMP.IL_GOODS_PRICE_ID
		,	GPGMP.GOODS_ID = '합계'
		,	GPGMP.BASE_GOODS_YN DESC
		,	GPGMP.GOODS_ID
	</select>
  <!-- #################################################################### -->
  <!-- 전건수 -->
  <!-- #################################################################### -->
  <select id="selectTotalCount" resultType="int">
    /* price.selectTotalCount */
    SELECT FOUND_ROWS()
  </select>


</mapper>